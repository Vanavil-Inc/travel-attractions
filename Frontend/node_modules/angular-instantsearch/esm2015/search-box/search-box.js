/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, Inject, forwardRef } from "@angular/core";
import { connectSearchBox } from "instantsearch.js/es/connectors";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
import { noop } from "../utils";
export class NgAisSearchBox extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super("SearchBox");
        this.instantSearchParent = instantSearchParent;
        this.placeholder = "Search";
        this.submitTitle = "Submit";
        this.resetTitle = "Reset";
        this.searchAsYouType = true;
        // Output events
        // form
        this.submit = new EventEmitter();
        this.reset = new EventEmitter();
        // input
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.state = {
            query: "",
            refine: noop
        };
        this.createWidget(connectSearchBox);
    }
    /**
     * @param {?} query
     * @return {?}
     */
    handleChange(query) {
        this.change.emit(query);
        if (this.searchAsYouType) {
            this.state.refine(query);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleSubmit(event) {
        // send submit event to parent component
        this.submit.emit(event);
        event.preventDefault();
        if (!this.searchAsYouType) {
            this.state.refine(this.state.query);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleReset(event) {
        // send reset event to parent component
        this.reset.emit(event);
        // reset search
        this.state.refine("");
    }
}
NgAisSearchBox.decorators = [
    { type: Component, args: [{
                selector: "ais-search-box",
                template: `
    <div [class]="cx()">
      <form
        [class]="cx('form')"
        novalidate
        (submit)="handleSubmit($event)"
      >
        <input
          [class]="cx('input')"
          autocapitalize="off"
          autocorrect="off"
          placeholder="{{placeholder}}"
          role="textbox"
          spellcheck="false"
          type="text"
          [value]="state.query"
          (input)="handleChange($event.target.value)"
          (focus)="focus.emit($event)"
          (blur)="blur.emit($event)"
        />

        <button
          [class]="cx('submit')"
          type="submit"
          title="{{submitTitle}}"
          (click)="handleSubmit($event)"
        >
          <svg
            [ngClass]="cx('submitIcon')"
            viewBox="0 0 40 40"
            width="40"
            height="40"
          >
            <path d="M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z"></path>
          </svg>
        </button>

        <button
          [class]="cx('reset')"
          type="reset"
          title="{{resetTitle}}"
          (click)="handleReset($event)"
          [hidden]="!state.query || (state.query && !state.query.trim())">
          <svg
            [ngClass]="cx('resetIcon')"
            viewBox="0 0 20 20"
            width="20"
            height="20"
          >
            <path d="M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z"></path>
          </svg>
        </button>
      </form>
    </div>
  `
            },] },
];
/** @nocollapse */
NgAisSearchBox.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisSearchBox.propDecorators = {
    placeholder: [{ type: Input }],
    submitTitle: [{ type: Input }],
    resetTitle: [{ type: Input }],
    searchAsYouType: [{ type: Input }],
    submit: [{ type: Output }],
    reset: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgAisSearchBox.prototype.placeholder;
    /** @type {?} */
    NgAisSearchBox.prototype.submitTitle;
    /** @type {?} */
    NgAisSearchBox.prototype.resetTitle;
    /** @type {?} */
    NgAisSearchBox.prototype.searchAsYouType;
    /** @type {?} */
    NgAisSearchBox.prototype.submit;
    /** @type {?} */
    NgAisSearchBox.prototype.reset;
    /** @type {?} */
    NgAisSearchBox.prototype.change;
    /** @type {?} */
    NgAisSearchBox.prototype.focus;
    /** @type {?} */
    NgAisSearchBox.prototype.blur;
    /** @type {?} */
    NgAisSearchBox.prototype.state;
    /** @type {?} */
    NgAisSearchBox.prototype.instantSearchParent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbInNlYXJjaC1ib3gvc2VhcmNoLWJveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBNERoQyxNQUFNLHFCQUFzQixTQUFRLFVBQVU7Ozs7SUFxQjVDLFlBRVMsbUJBQXdCO1FBRS9CLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUZaLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzsyQkF0QkssUUFBUTsyQkFDUixRQUFROzBCQUNULE9BQU87K0JBQ0QsSUFBSTs7O3NCQUk1QixJQUFJLFlBQVksRUFBRTtxQkFDbkIsSUFBSSxZQUFZLEVBQUU7O3NCQUdqQixJQUFJLFlBQVksRUFBRTtxQkFDbkIsSUFBSSxZQUFZLEVBQUU7b0JBQ25CLElBQUksWUFBWSxFQUFFO3FCQUVwQjtZQUNiLEtBQUssRUFBRSxFQUFFO1lBQ1QsTUFBTSxFQUFFLElBQUk7U0FDYjtRQU9DLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNyQzs7Ozs7SUFFTSxZQUFZLENBQUMsS0FBYTtRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7Ozs7OztJQUdJLFlBQVksQ0FBQyxLQUFpQjs7UUFFbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckM7Ozs7OztJQUdJLFdBQVcsQ0FBQyxLQUFpQjs7UUFFbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7O1FBR3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7O1lBL0d6QixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzRFQ7YUFDRjs7Ozs0Q0F1QkksTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7OzBCQXJCN0MsS0FBSzswQkFDTCxLQUFLO3lCQUNMLEtBQUs7OEJBQ0wsS0FBSztxQkFJTCxNQUFNO29CQUNOLE1BQU07cUJBR04sTUFBTTtvQkFDTixNQUFNO21CQUNOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBmb3J3YXJkUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IGNvbm5lY3RTZWFyY2hCb3ggfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtc2VhcmNoLWJveFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxmb3JtXG4gICAgICAgIFtjbGFzc109XCJjeCgnZm9ybScpXCJcbiAgICAgICAgbm92YWxpZGF0ZVxuICAgICAgICAoc3VibWl0KT1cImhhbmRsZVN1Ym1pdCgkZXZlbnQpXCJcbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdpbnB1dCcpXCJcbiAgICAgICAgICBhdXRvY2FwaXRhbGl6ZT1cIm9mZlwiXG4gICAgICAgICAgYXV0b2NvcnJlY3Q9XCJvZmZcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3twbGFjZWhvbGRlcn19XCJcbiAgICAgICAgICByb2xlPVwidGV4dGJveFwiXG4gICAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgW3ZhbHVlXT1cInN0YXRlLnF1ZXJ5XCJcbiAgICAgICAgICAoaW5wdXQpPVwiaGFuZGxlQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpXCJcbiAgICAgICAgICAoZm9jdXMpPVwiZm9jdXMuZW1pdCgkZXZlbnQpXCJcbiAgICAgICAgICAoYmx1cik9XCJibHVyLmVtaXQoJGV2ZW50KVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIFtjbGFzc109XCJjeCgnc3VibWl0JylcIlxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIHRpdGxlPVwie3tzdWJtaXRUaXRsZX19XCJcbiAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlU3VibWl0KCRldmVudClcIlxuICAgICAgICA+XG4gICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgW25nQ2xhc3NdPVwiY3goJ3N1Ym1pdEljb24nKVwiXG4gICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQwIDQwXCJcbiAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjYuODA0IDI5LjAxYy0yLjgzMiAyLjM0LTYuNDY1IDMuNzQ2LTEwLjQyNiAzLjc0NkM3LjMzMyAzMi43NTYgMCAyNS40MjQgMCAxNi4zNzggMCA3LjMzMyA3LjMzMyAwIDE2LjM3OCAwYzkuMDQ2IDAgMTYuMzc4IDcuMzMzIDE2LjM3OCAxNi4zNzggMCAzLjk2LTEuNDA2IDcuNTk0LTMuNzQ2IDEwLjQyNmwxMC41MzQgMTAuNTM0Yy42MDcuNjA3LjYxIDEuNTktLjAwNCAyLjIwMi0uNjEuNjEtMS41OTcuNjEtMi4yMDIuMDA0TDI2LjgwNCAyOS4wMXptLTEwLjQyNi42MjdjNy4zMjMgMCAxMy4yNi01LjkzNiAxMy4yNi0xMy4yNiAwLTcuMzItNS45MzctMTMuMjU3LTEzLjI2LTEzLjI1N0M5LjA1NiAzLjEyIDMuMTIgOS4wNTYgMy4xMiAxNi4zNzhjMCA3LjMyMyA1LjkzNiAxMy4yNiAxMy4yNTggMTMuMjZ6XCI+PC9wYXRoPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdyZXNldCcpXCJcbiAgICAgICAgICB0eXBlPVwicmVzZXRcIlxuICAgICAgICAgIHRpdGxlPVwie3tyZXNldFRpdGxlfX1cIlxuICAgICAgICAgIChjbGljayk9XCJoYW5kbGVSZXNldCgkZXZlbnQpXCJcbiAgICAgICAgICBbaGlkZGVuXT1cIiFzdGF0ZS5xdWVyeSB8fCAoc3RhdGUucXVlcnkgJiYgIXN0YXRlLnF1ZXJ5LnRyaW0oKSlcIj5cbiAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICBbbmdDbGFzc109XCJjeCgncmVzZXRJY29uJylcIlxuICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyMCAyMFwiXG4gICAgICAgICAgICB3aWR0aD1cIjIwXCJcbiAgICAgICAgICAgIGhlaWdodD1cIjIwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTguMTE0IDEwTC45NDQgMi44MyAwIDEuODg1IDEuODg2IDBsLjk0My45NDNMMTAgOC4xMTNsNy4xNy03LjE3Ljk0NC0uOTQzTDIwIDEuODg2bC0uOTQzLjk0My03LjE3IDcuMTcgNy4xNyA3LjE3Ljk0My45NDRMMTguMTE0IDIwbC0uOTQzLS45NDMtNy4xNy03LjE3LTcuMTcgNy4xNy0uOTQ0Ljk0M0wwIDE4LjExNGwuOTQzLS45NDNMOC4xMTMgMTB6XCI+PC9wYXRoPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1NlYXJjaEJveCBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBASW5wdXQoKSBwdWJsaWMgcGxhY2Vob2xkZXI6IHN0cmluZyA9IFwiU2VhcmNoXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdWJtaXRUaXRsZTogc3RyaW5nID0gXCJTdWJtaXRcIjtcbiAgQElucHV0KCkgcHVibGljIHJlc2V0VGl0bGU6IHN0cmluZyA9IFwiUmVzZXRcIjtcbiAgQElucHV0KCkgcHVibGljIHNlYXJjaEFzWW91VHlwZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgLy8gT3V0cHV0IGV2ZW50c1xuICAvLyBmb3JtXG4gIEBPdXRwdXQoKSBzdWJtaXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSByZXNldCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBpbnB1dFxuICBAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBibHVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHB1YmxpYyBzdGF0ZSA9IHtcbiAgICBxdWVyeTogXCJcIixcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiU2VhcmNoQm94XCIpO1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RTZWFyY2hCb3gpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZShxdWVyeTogc3RyaW5nKSB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdChxdWVyeSk7XG5cbiAgICBpZiAodGhpcy5zZWFyY2hBc1lvdVR5cGUpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVmaW5lKHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlU3VibWl0KGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgLy8gc2VuZCBzdWJtaXQgZXZlbnQgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgIHRoaXMuc3VibWl0LmVtaXQoZXZlbnQpO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghdGhpcy5zZWFyY2hBc1lvdVR5cGUpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVmaW5lKHRoaXMuc3RhdGUucXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVSZXNldChldmVudDogTW91c2VFdmVudCkge1xuICAgIC8vIHNlbmQgcmVzZXQgZXZlbnQgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgIHRoaXMucmVzZXQuZW1pdChldmVudCk7XG5cbiAgICAvLyByZXNldCBzZWFyY2hcbiAgICB0aGlzLnN0YXRlLnJlZmluZShcIlwiKTtcbiAgfVxufVxuIl19