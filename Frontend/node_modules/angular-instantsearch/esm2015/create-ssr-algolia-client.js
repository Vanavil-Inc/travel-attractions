/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from "algoliasearch/index";
import * as encodeProxy from "querystring-es3/encode";
import { VERSION } from "./version";
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
const encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient({ httpClient, HttpHeaders, transferState, makeStateKey }) {
    console.warn("`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.");
    return (_, appId, apiKey) => createSSRSearchClient({
        appId,
        apiKey,
        httpClient,
        HttpHeaders,
        transferState,
        makeStateKey
    });
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient({ appId, apiKey, httpClient, HttpHeaders, transferState, makeStateKey }) {
    /** @type {?} */
    const client = algoliasearch(appId, apiKey, {});
    client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);
    client._request = (rawUrl, opts) => {
        /** @type {?} */
        let headers = new HttpHeaders();
        headers = headers.set("content-type", opts.method === "POST"
            ? "application/x-www-form-urlencoded"
            : "application/json");
        headers = headers.set("accept", "application/json");
        /** @type {?} */
        const url = rawUrl + (rawUrl.includes("?") ? "&" : "?") + encode(opts.headers);
        /** @type {?} */
        const transferStateKey = makeStateKey(`ngais(${opts.body})`);
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            const resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers
            });
        }
        return new Promise((resolve, reject) => {
            httpClient
                .request(opts.method, url, {
                headers,
                body: opts.body,
                observe: "response"
            })
                .subscribe(resp => {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers
                });
            }, resp => reject({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers
            }));
        });
    };
    return client;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBS3BDLE1BQU0sYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQzs7QUFDdkUsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUM7Ozs7O0FBRWxELE1BQU0saUNBQWlDLEVBQ3JDLFVBQVUsRUFDVixXQUFXLEVBQ1gsYUFBYSxFQUNiLFlBQVksRUFDYjtJQUNDLE9BQU8sQ0FBQyxJQUFJLENBQ1YsNkdBQTZHLENBQzlHLENBQUM7SUFFRixPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUMxQixxQkFBcUIsQ0FBQztRQUNwQixLQUFLO1FBQ0wsTUFBTTtRQUNOLFVBQVU7UUFDVixXQUFXO1FBQ1gsYUFBYTtRQUNiLFlBQVk7S0FDYixDQUFDLENBQUM7Q0FDTjs7Ozs7QUFFRCxNQUFNLGdDQUFnQyxFQUNwQyxLQUFLLEVBQ0wsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsYUFBYSxFQUNiLFlBQVksRUFDYjs7SUFDQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsZUFBZSxDQUFDLHlCQUF5QixPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRTNELE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7O1FBQ2pDLElBQUksT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFFaEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQ25CLGNBQWMsRUFDZCxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU07WUFDcEIsQ0FBQyxDQUFDLG1DQUFtQztZQUNyQyxDQUFDLENBQUMsa0JBQWtCLENBQ3ZCLENBQUM7UUFFRixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQzs7UUFFcEQsTUFBTSxHQUFHLEdBQ1AsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztRQUVyRSxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRTdELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFOztZQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsVUFBVTtpQkFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ3pCLE9BQU87Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxVQUFVO2FBQ3BCLENBQUM7aUJBQ0QsU0FBUyxDQUNSLElBQUksQ0FBQyxFQUFFO2dCQUNMLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxPQUFPLENBQUM7b0JBQ04sVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO29CQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2lCQUN0QixDQUFDLENBQUM7YUFDSixFQUNELElBQUksQ0FBQyxFQUFFLENBQ0wsTUFBTSxDQUFDO2dCQUNMLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQ0wsQ0FBQztTQUNMLENBQUMsQ0FBQztLQUNKLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBQztDQUNmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWxnb2xpYXNlYXJjaFByb3h5IGZyb20gXCJhbGdvbGlhc2VhcmNoL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBlbmNvZGVQcm94eSBmcm9tIFwicXVlcnlzdHJpbmctZXMzL2VuY29kZVwiO1xuXG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSBcIi4vdmVyc2lvblwiO1xuXG4vLyBBT1QgKyBSb2xsdXAgd29ya2Fyb3VuZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzEyNjcjaXNzdWVjb21tZW50LTI5NjM5NTczNFxuXG5jb25zdCBhbGdvbGlhc2VhcmNoID0gYWxnb2xpYXNlYXJjaFByb3h5LmRlZmF1bHQgfHwgYWxnb2xpYXNlYXJjaFByb3h5O1xuY29uc3QgZW5jb2RlID0gZW5jb2RlUHJveHkuZGVmYXVsdCB8fCBlbmNvZGVQcm94eTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNTUkFsZ29saWFDbGllbnQoe1xuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5XG59KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICBcImBjcmVhdGVTU1JBbGdvbGlhQ2xpZW50YCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGBjcmVhdGVTU1JTZWFyY2hDbGllbnRgIHRvIGJlIHBsdWdnZWQgdG8gYHNlYXJjaENsaWVudGAuXCJcbiAgKTtcblxuICByZXR1cm4gKF8sIGFwcElkLCBhcGlLZXkpID0+XG4gICAgY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgICAgIGFwcElkLFxuICAgICAgYXBpS2V5LFxuICAgICAgaHR0cENsaWVudCxcbiAgICAgIEh0dHBIZWFkZXJzLFxuICAgICAgdHJhbnNmZXJTdGF0ZSxcbiAgICAgIG1ha2VTdGF0ZUtleVxuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgYXBwSWQsXG4gIGFwaUtleSxcbiAgaHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIHRyYW5zZmVyU3RhdGUsXG4gIG1ha2VTdGF0ZUtleVxufSkge1xuICBjb25zdCBjbGllbnQgPSBhbGdvbGlhc2VhcmNoKGFwcElkLCBhcGlLZXksIHt9KTtcbiAgY2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhci1pbnN0YW50c2VhcmNoICR7VkVSU0lPTn1gKTtcblxuICBjbGllbnQuX3JlcXVlc3QgPSAocmF3VXJsLCBvcHRzKSA9PiB7XG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldChcbiAgICAgIFwiY29udGVudC10eXBlXCIsXG4gICAgICBvcHRzLm1ldGhvZCA9PT0gXCJQT1NUXCJcbiAgICAgICAgPyBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gICAgICAgIDogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICApO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KFwiYWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblxuICAgIGNvbnN0IHVybCA9XG4gICAgICByYXdVcmwgKyAocmF3VXJsLmluY2x1ZGVzKFwiP1wiKSA/IFwiJlwiIDogXCI/XCIpICsgZW5jb2RlKG9wdHMuaGVhZGVycyk7XG5cbiAgICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5ID0gbWFrZVN0YXRlS2V5KGBuZ2Fpcygke29wdHMuYm9keX0pYCk7XG5cbiAgICBpZiAodHJhbnNmZXJTdGF0ZS5oYXNLZXkodHJhbnNmZXJTdGF0ZUtleSkpIHtcbiAgICAgIGNvbnN0IHJlc3AgPSBKU09OLnBhcnNlKHRyYW5zZmVyU3RhdGUuZ2V0KHRyYW5zZmVyU3RhdGVLZXksIHt9KSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaHR0cENsaWVudFxuICAgICAgICAucmVxdWVzdChvcHRzLm1ldGhvZCwgdXJsLCB7XG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBib2R5OiBvcHRzLmJvZHksXG4gICAgICAgICAgb2JzZXJ2ZTogXCJyZXNwb25zZVwiXG4gICAgICAgIH0pXG4gICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgcmVzcCA9PiB7XG4gICAgICAgICAgICB0cmFuc2ZlclN0YXRlLnNldCh0cmFuc2ZlclN0YXRlS2V5LCBKU09OLnN0cmluZ2lmeShyZXNwKSk7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3AgPT5cbiAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVyc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gY2xpZW50O1xufVxuIl19