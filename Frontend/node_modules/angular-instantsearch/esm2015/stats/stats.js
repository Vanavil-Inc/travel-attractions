/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ContentChild, TemplateRef, Inject, forwardRef } from "@angular/core";
import { connectStats } from "instantsearch.js/es/connectors";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
export class NgAisStats extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super("Stats");
        this.instantSearchParent = instantSearchParent;
        this.state = {
            hitPerPage: 0,
            nbHits: 0,
            nbPages: 0,
            page: 0,
            processingTimeMS: 0,
            query: ""
        };
        this.createWidget(connectStats);
    }
    /**
     * @return {?}
     */
    get templateContext() {
        return { state: this.state };
    }
}
NgAisStats.decorators = [
    { type: Component, args: [{
                selector: "ais-stats",
                template: `
    <div [class]="cx()">
      <ng-container *ngTemplateOutlet="template; context: templateContext">
      </ng-container>

      <span *ngIf="!template" [class]="cx('text')">
        {{state.nbHits}} results found in {{state.processingTimeMS}}ms.
      </span>
    </div>
  `
            },] },
];
/** @nocollapse */
NgAisStats.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisStats.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }]
};
if (false) {
    /** @type {?} */
    NgAisStats.prototype.template;
    /** @type {?} */
    NgAisStats.prototype.state;
    /** @type {?} */
    NgAisStats.prototype.instantSearchParent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJzdGF0cy9zdGF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQWVwRSxNQUFNLGlCQUFrQixTQUFRLFVBQVU7Ozs7SUFnQnhDLFlBRVMsbUJBQXdCO1FBRS9CLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUZSLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSztxQkFmbEI7WUFDYixVQUFVLEVBQUUsQ0FBQztZQUNiLE1BQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxFQUFFLENBQUM7WUFDVixJQUFJLEVBQUUsQ0FBQztZQUNQLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsS0FBSyxFQUFFLEVBQUU7U0FDVjtRQVdDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDakM7Ozs7SUFWRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDOUI7OztZQTNCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRTs7Ozs7Ozs7O0dBU1Q7YUFDRjs7Ozs0Q0FrQkksTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7O3VCQWhCN0MsWUFBWSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0U3RhdHMgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5cbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1zdGF0c1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogdGVtcGxhdGVDb250ZXh0XCI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgPHNwYW4gKm5nSWY9XCIhdGVtcGxhdGVcIiBbY2xhc3NdPVwiY3goJ3RleHQnKVwiPlxuICAgICAgICB7e3N0YXRlLm5iSGl0c319IHJlc3VsdHMgZm91bmQgaW4ge3tzdGF0ZS5wcm9jZXNzaW5nVGltZU1TfX1tcy5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1N0YXRzIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpIHB1YmxpYyB0ZW1wbGF0ZTogYW55O1xuXG4gIHB1YmxpYyBzdGF0ZSA9IHtcbiAgICBoaXRQZXJQYWdlOiAwLFxuICAgIG5iSGl0czogMCxcbiAgICBuYlBhZ2VzOiAwLFxuICAgIHBhZ2U6IDAsXG4gICAgcHJvY2Vzc2luZ1RpbWVNUzogMCxcbiAgICBxdWVyeTogXCJcIlxuICB9O1xuXG4gIGdldCB0ZW1wbGF0ZUNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHsgc3RhdGU6IHRoaXMuc3RhdGUgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoXCJTdGF0c1wiKTtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0U3RhdHMpO1xuICB9XG59XG4iXX0=