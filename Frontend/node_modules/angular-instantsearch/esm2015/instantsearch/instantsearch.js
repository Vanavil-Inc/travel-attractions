/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, Inject, PLATFORM_ID } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import * as algoliasearchProxy from "algoliasearch/lite";
import instantsearch from "instantsearch.js/es";
import { VERSION } from "../version";
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @typedef {?} */
var SearchRequest;
export { SearchRequest };
/** @typedef {?} */
var SearchForFacetValuesRequest;
export { SearchForFacetValuesRequest };
/** @typedef {?} */
var SearchParameters;
export { SearchParameters };
/**
 * @record
 */
export function SearchRequestParameters() { }
/** @type {?} */
SearchRequestParameters.prototype.query;
/**
 * @record
 */
export function SearchForFacetValuesRequestParameters() { }
/** @type {?} */
SearchForFacetValuesRequestParameters.prototype.facetQuery;
/** @type {?} */
SearchForFacetValuesRequestParameters.prototype.facetName;
/** @typedef {?} */
var GeoRectangle;
export { GeoRectangle };
/** @typedef {?} */
var GeoPolygon;
export { GeoPolygon };
/** @typedef {?} */
var SearchResponse;
export { SearchResponse };
/** @typedef {?} */
var Hit;
export { Hit };
/** @typedef {?} */
var SearchForFacetValuesResponse;
export { SearchForFacetValuesResponse };
/** @typedef {?} */
var SearchClient;
export { SearchClient };
/** @typedef {?} */
var InstantSearchConfig;
export { InstantSearchConfig };
export class InstantSearchInstance {
}
if (false) {
    /** @type {?} */
    InstantSearchInstance.prototype.start;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.on;
    /** @type {?} */
    InstantSearchInstance.prototype.removeListener;
    /** @type {?} */
    InstantSearchInstance.prototype.helper;
    /** @type {?} */
    InstantSearchInstance.prototype.refresh;
    /** @type {?} */
    InstantSearchInstance.prototype.dispose;
}
export class NgAisInstantSearch {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.instanceName = "default";
        this.change = new EventEmitter();
        this.onRender = () => {
            this.change.emit({
                results: this.instantSearchInstance.helper.lastResults,
                state: this.instantSearchInstance.helper.state
            });
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createInstantSearchInstance(this.config);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.instantSearchInstance.start();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.instantSearchInstance.removeListener("render", this.onRender);
        this.instantSearchInstance.dispose();
    }
    /**
     * @param {?} config
     * @return {?}
     */
    createInstantSearchInstance(config) {
        // add default searchParameters with highlighting config
        if (!config.searchParameters)
            config.searchParameters = {};
        Object.assign(config.searchParameters, {
            highlightPreTag: "__ais-highlight__",
            highlightPostTag: "__/ais-highlight__"
        });
        // remove URLSync widget if on SSR
        if (!isPlatformBrowser(this.platformId)) {
            if (typeof config.urlSync !== "undefined")
                delete config.urlSync;
            if (typeof config.routing !== "undefined")
                delete config.routing;
        }
        // custom algolia client agent
        if (!config.searchClient && !config.createAlgoliaClient) {
            /** @type {?} */
            const client = algoliasearch(config.appId, config.apiKey);
            client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);
            config.searchClient = client;
            config.appId = undefined;
            config.apiKey = undefined;
        }
        this.instantSearchInstance = instantsearch(config);
        this.instantSearchInstance.on("render", this.onRender);
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    addWidget(widget) {
        this.instantSearchInstance.addWidget(widget);
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    removeWidget(widget) {
        this.instantSearchInstance.removeWidget(widget);
    }
    /**
     * @return {?}
     */
    refresh() {
        this.instantSearchInstance.refresh();
    }
}
NgAisInstantSearch.decorators = [
    { type: Component, args: [{
                selector: "ais-instantsearch",
                template: `<ng-content></ng-content>`
            },] },
];
/** @nocollapse */
NgAisInstantSearch.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgAisInstantSearch.propDecorators = {
    config: [{ type: Input }],
    instanceName: [{ type: Input }],
    change: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgAisInstantSearch.prototype.config;
    /** @type {?} */
    NgAisInstantSearch.prototype.instanceName;
    /** @type {?} */
    NgAisInstantSearch.prototype.change;
    /** @type {?} */
    NgAisInstantSearch.prototype.instantSearchInstance;
    /** @type {?} */
    NgAisInstantSearch.prototype.onRender;
    /** @type {?} */
    NgAisInstantSearch.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,