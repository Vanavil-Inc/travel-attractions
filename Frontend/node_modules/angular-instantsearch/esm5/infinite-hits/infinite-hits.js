/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, Input, TemplateRef, Inject, forwardRef } from "@angular/core";
import { connectInfiniteHits } from "instantsearch.js/es/connectors";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
import { noop } from "../utils";
var NgAisInfiniteHits = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisInfiniteHits, _super);
    function NgAisInfiniteHits(instantSearchParent) {
        var _this = _super.call(this, "InfiniteHits") || this;
        _this.instantSearchParent = instantSearchParent;
        // render options
        _this.showMoreLabel = "Show more results";
        _this.state = {
            hits: [],
            isLastPage: false,
            showMore: noop,
            results: {}
        };
        _this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering)
                return;
            _this.state = tslib_1.__assign({}, state, { results: state.results, hits: typeof _this.transformItems === "function"
                    ? _this.transformItems(state.hits)
                    : state.hits });
        };
        _this.createWidget(connectInfiniteHits, { escapeHits: true });
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisInfiniteHits.prototype.showMore = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.showMore();
    };
    NgAisInfiniteHits.decorators = [
        { type: Component, args: [{
                    selector: "ais-infinite-hits",
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [class]=\"cx('showMore')\"\n        (click)=\"showMore($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgAisInfiniteHits.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisInfiniteHits.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        showMoreLabel: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisInfiniteHits;
}(BaseWidget));
export { NgAisInfiniteHits };
if (false) {
    /** @type {?} */
    NgAisInfiniteHits.prototype.template;
    /** @type {?} */
    NgAisInfiniteHits.prototype.showMoreLabel;
    /** @type {?} */
    NgAisInfiniteHits.prototype.transformItems;
    /** @type {?} */
    NgAisInfiniteHits.prototype.state;
    /** @type {?} */
    NgAisInfiniteHits.prototype.updateState;
    /** @type {?} */
    NgAisInfiniteHits.prototype.instantSearchParent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtaGl0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImluZmluaXRlLWhpdHMvaW5maW5pdGUtaGl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQzs7SUFnQ08sNkNBQVU7SUFvQi9DLDJCQUVTLG1CQUF3QjtRQUZqQyxZQUlFLGtCQUFNLGNBQWMsQ0FBQyxTQUV0QjtRQUpRLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzs7OEJBbEJPLG1CQUFtQjtzQkFTdkQ7WUFDRixJQUFJLEVBQUUsRUFBRTtZQUNSLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsT0FBTyxFQUFFLEVBQUU7U0FDWjs0QkFlYSxVQUFDLEtBQUssRUFBRSxnQkFBeUI7WUFDN0MsSUFBSSxnQkFBZ0I7Z0JBQUUsT0FBTztZQUU3QixLQUFJLENBQUMsS0FBSyx3QkFDTCxLQUFLLElBQ1IsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQ3RCLElBQUksRUFDRixPQUFPLEtBQUksQ0FBQyxjQUFjLEtBQUssVUFBVTtvQkFDdkMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDakMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQ2pCLENBQUM7U0FDSDtRQW5CQyxLQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7O0tBQzlEOzs7OztJQUVNLG9DQUFROzs7O2NBQUMsS0FBaUI7UUFDL0IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7OztnQkE1RHpCLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsbXRCQTBCVDtpQkFDRjs7OztnREFzQkksTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLENBQUM7OzsyQkFwQjdDLFlBQVksU0FBQyxXQUFXO2dDQUd4QixLQUFLO2lDQUNMLEtBQUs7OzRCQWpEUjtFQTRDdUMsVUFBVTtTQUFwQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgSW5wdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdEluZmluaXRlSGl0cyB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1pbmZpbml0ZS1oaXRzXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3goKVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlOyBjb250ZXh0OiBzdGF0ZVwiPjwvbmctY29udGFpbmVyPlxuXG4gICAgICA8IS0tIGRlZmF1bHQgcmVuZGVyaW5nIGlmIG5vIHRlbXBsYXRlIHNwZWNpZmllZCAtLT5cbiAgICAgIDxkaXYgKm5nSWY9XCIhdGVtcGxhdGVcIj5cbiAgICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2l0ZW0nKVwiXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaGl0IG9mIHN0YXRlLmhpdHNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxhaXMtaGlnaGxpZ2h0IGF0dHJpYnV0ZT1cIm5hbWVcIiBbaGl0XT1cImhpdFwiPlxuICAgICAgICAgICAgPC9haXMtaGlnaGxpZ2h0PlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ3Nob3dNb3JlJylcIlxuICAgICAgICAoY2xpY2spPVwic2hvd01vcmUoJGV2ZW50KVwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJzdGF0ZS5pc0xhc3RQYWdlXCJcbiAgICAgICAgKm5nSWY9XCIhdGVtcGxhdGVcIlxuICAgICAgPlxuICAgICAgICB7e3Nob3dNb3JlTGFiZWx9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNJbmZpbml0ZUhpdHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgcHVibGljIHRlbXBsYXRlPzogYW55O1xuXG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TW9yZUxhYmVsOiBzdHJpbmcgPSBcIlNob3cgbW9yZSByZXN1bHRzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IEZ1bmN0aW9uO1xuXG4gIC8vIGlubmVyIHdpZGdldCBzdGF0ZSByZXR1cm5lZCBmcm9tIGNvbm5lY3RvclxuICBwdWJsaWMgc3RhdGU6IHtcbiAgICBoaXRzOiB7fVtdO1xuICAgIGlzTGFzdFBhZ2U6IGJvb2xlYW47XG4gICAgc2hvd01vcmU6IEZ1bmN0aW9uO1xuICAgIHJlc3VsdHM6IHt9O1xuICB9ID0ge1xuICAgIGhpdHM6IFtdLFxuICAgIGlzTGFzdFBhZ2U6IGZhbHNlLFxuICAgIHNob3dNb3JlOiBub29wLFxuICAgIHJlc3VsdHM6IHt9XG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIkluZmluaXRlSGl0c1wiKTtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0SW5maW5pdGVIaXRzLCB7IGVzY2FwZUhpdHM6IHRydWUgfSk7XG4gIH1cblxuICBwdWJsaWMgc2hvd01vcmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUuc2hvd01vcmUoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlID0gKHN0YXRlLCBpc0ZpcnN0UmVuZGVyaW5nOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcpIHJldHVybjtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIHJlc3VsdHM6IHN0YXRlLnJlc3VsdHMsXG4gICAgICBoaXRzOlxuICAgICAgICB0eXBlb2YgdGhpcy50cmFuc2Zvcm1JdGVtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0aGlzLnRyYW5zZm9ybUl0ZW1zKHN0YXRlLmhpdHMpXG4gICAgICAgICAgOiBzdGF0ZS5oaXRzXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==