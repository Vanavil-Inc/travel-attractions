/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Input } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import { bem, noop } from "./utils";
var Widget = /** @class */ (function () {
    function Widget() {
    }
    return Widget;
}());
export { Widget };
if (false) {
    /** @type {?} */
    Widget.prototype.init;
    /** @type {?} */
    Widget.prototype.getConfiguration;
    /** @type {?} */
    Widget.prototype.render;
    /** @type {?} */
    Widget.prototype.dispose;
}
/** @typedef {?} */
var Connector;
export { Connector };
var BaseWidget = /** @class */ (function () {
    function BaseWidget(widgetName) {
        var _this = this;
        this.state = {};
        this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering) {
                return Promise.resolve().then(function () {
                    _this.state = state;
                });
            }
            _this.state = state;
        };
        this.cx = bem(widgetName);
    }
    /**
     * @param {?} connector
     * @param {?=} options
     * @return {?}
     */
    BaseWidget.prototype.createWidget = /**
     * @param {?} connector
     * @param {?=} options
     * @return {?}
     */
    function (connector, options) {
        if (options === void 0) { options = {}; }
        this.widget = connector(this.updateState, noop)(options);
    };
    /**
     * @return {?}
     */
    BaseWidget.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // add widget to the InstantSearch Instance
        this.instantSearchParent.addWidget(this.widget);
    };
    /**
     * @return {?}
     */
    BaseWidget.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.instantSearchParent.platformId)) {
            this.instantSearchParent.removeWidget(this.widget);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseWidget.prototype.getItemClass = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var className = this.cx("item");
        if (item.isRefined) {
            className = className + " " + this.cx("item", "selected");
        }
        return className;
    };
    BaseWidget.propDecorators = {
        autoHideContainer: [{ type: Input }]
    };
    return BaseWidget;
}());
export { BaseWidget };
if (false) {
    /** @type {?} */
    BaseWidget.prototype.instantSearchParent;
    /** @type {?} */
    BaseWidget.prototype.autoHideContainer;
    /** @type {?} */
    BaseWidget.prototype.widget;
    /** @type {?} */
    BaseWidget.prototype.state;
    /** @type {?} */
    BaseWidget.prototype.cx;
    /** @type {?} */
    BaseWidget.prototype.updateState;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS13aWRnZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJiYXNlLXdpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMsSUFBQTs7O2lCQUxBO0lBdUJDLENBQUE7QUFsQkQsa0JBa0JDOzs7Ozs7Ozs7Ozs7Ozs7SUFnQkMsb0JBQVksVUFBa0I7UUFBOUIsaUJBRUM7cUJBTHVCLEVBQUU7MkJBc0JMLFVBQ25CLEtBQVMsRUFDVCxnQkFBeUI7WUFFekIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO29CQUM1QixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztpQkFDcEIsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwQjtRQTdCQyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMzQjs7Ozs7O0lBRU0saUNBQVk7Ozs7O2NBQUMsU0FBb0IsRUFBRSxPQUFvQjtRQUFwQix3QkFBQSxFQUFBLFlBQW9CO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7O0lBR3BELDZCQUFROzs7OztRQUViLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7OztJQUczQyxnQ0FBVzs7OztRQUNoQixJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMxRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRDs7Ozs7O0lBaUJJLGlDQUFZOzs7O2NBQUMsSUFBNkI7O1FBQy9DLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLFNBQVMsR0FBTSxTQUFTLFNBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFHLENBQUM7U0FDM0Q7UUFFRCxPQUFPLFNBQVMsQ0FBQzs7O29DQTlDbEIsS0FBSzs7cUJBakNSOztTQThCYSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBiZW0sIG5vb3AgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgV2lkZ2V0IHtcbiAgcHVibGljIGluaXQ6ICgpID0+IHZvaWQ7XG4gIHB1YmxpYyBnZXRDb25maWd1cmF0aW9uOiAoKSA9PiBvYmplY3Q7XG4gIHB1YmxpYyByZW5kZXI6IChcbiAgICBwYXJhbXM6IHtcbiAgICAgIHRlbXBsYXRlc0NvbmZpZzogb2JqZWN0O1xuICAgICAgc3RhdGU6IG9iamVjdDtcbiAgICAgIHJlc3VsdHM6IHt9W107XG4gICAgICBjcmVhdGVVUkw6ICh2YWx1ZTogYW55KSA9PiBzdHJpbmc7XG4gICAgICBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IG9iamVjdDtcbiAgICB9XG4gICkgPT4gdm9pZDtcbiAgcHVibGljIGRpc3Bvc2U6IChcbiAgICBwYXJhbXM6IHtcbiAgICAgIGhlbHBlcjogb2JqZWN0O1xuICAgICAgc3RhdGU6IG9iamVjdDtcbiAgICB9XG4gICkgPT4gb2JqZWN0IHwgdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgQ29ubmVjdG9yID0gKFxuICByZW5kZXJGbjogKHN0YXRlOiBvYmplY3QsIGlzRmlyc3RSZW5kZXJpbmc6IGJvb2xlYW4pID0+IHZvaWQsXG4gIHVubW91bnRGbjogKCkgPT4gdm9pZFxuKSA9PiAod2lkZ2V0T3B0aW9ucz86IG9iamVjdCkgPT4gV2lkZ2V0O1xuXG5leHBvcnQgY2xhc3MgQmFzZVdpZGdldCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueTtcblxuICBASW5wdXQoKSBwdWJsaWMgYXV0b0hpZGVDb250YWluZXI/OiBib29sZWFuO1xuXG4gIHB1YmxpYyB3aWRnZXQ/OiBXaWRnZXQ7XG4gIHB1YmxpYyBzdGF0ZT86IG9iamVjdCA9IHt9O1xuICBwdWJsaWMgY3g6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHdpZGdldE5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY3ggPSBiZW0od2lkZ2V0TmFtZSk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlV2lkZ2V0KGNvbm5lY3RvcjogQ29ubmVjdG9yLCBvcHRpb25zOiBvYmplY3QgPSB7fSkge1xuICAgIHRoaXMud2lkZ2V0ID0gY29ubmVjdG9yKHRoaXMudXBkYXRlU3RhdGUsIG5vb3ApKG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIC8vIGFkZCB3aWRnZXQgdG8gdGhlIEluc3RhbnRTZWFyY2ggSW5zdGFuY2VcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hQYXJlbnQuYWRkV2lkZ2V0KHRoaXMud2lkZ2V0KTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5pbnN0YW50U2VhcmNoUGFyZW50LnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmluc3RhbnRTZWFyY2hQYXJlbnQucmVtb3ZlV2lkZ2V0KHRoaXMud2lkZ2V0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlU3RhdGUgPSAoXG4gICAgc3RhdGU6IHt9LFxuICAgIGlzRmlyc3RSZW5kZXJpbmc6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx2b2lkPiB8IHZvaWQgPT4ge1xuICAgIGlmIChpc0ZpcnN0UmVuZGVyaW5nKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgfTtcblxuICAvLyBoZWxwZXIgbWV0aG9kIGZvciBnZW5lcmluZyBpdGVtIGxpc3QgY2xhc3NOYW1lXG4gIHB1YmxpYyBnZXRJdGVtQ2xhc3MoaXRlbTogeyBpc1JlZmluZWQ/OiBib29sZWFuIH0pIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gdGhpcy5jeChcIml0ZW1cIik7XG5cbiAgICBpZiAoaXRlbS5pc1JlZmluZWQpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gJHt0aGlzLmN4KFwiaXRlbVwiLCBcInNlbGVjdGVkXCIpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuIl19