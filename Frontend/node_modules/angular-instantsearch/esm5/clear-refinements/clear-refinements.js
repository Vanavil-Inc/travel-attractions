/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from "@angular/core";
import { connectClearAll } from "instantsearch.js/es/connectors";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
import { noop } from "../utils";
var NgAisClearRefinements = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisClearRefinements, _super);
    function NgAisClearRefinements(instantSearchParent) {
        var _this = _super.call(this, "ClearRefinements") || this;
        _this.instantSearchParent = instantSearchParent;
        _this.buttonLabel = "Clear refinements";
        _this.clearsQuery = false;
        _this.excludeAttributes = [];
        _this.state = {
            hasRefinements: false,
            refine: noop
        };
        return _this;
    }
    Object.defineProperty(NgAisClearRefinements.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.state.hasRefinements && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisClearRefinements.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // we need to `createWidget` from `ngOnInit` to have `@Input()` intialized
        this.createWidget(connectClearAll, {
            clearsQuery: this.clearsQuery,
            excludeAttributes: this.excludeAttributes
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisClearRefinements.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.state.hasRefinements) {
            this.state.refine();
        }
    };
    NgAisClearRefinements.decorators = [
        { type: Component, args: [{
                    selector: "ais-clear-refinements",
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('button') + (!state.hasRefinements ? (' ' + cx('button', 'disabled')) : '')\"\n        (click)=\"handleClick($event)\"\n        [disabled]=\"!state.hasRefinements\"\n      >\n        {{buttonLabel}}\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgAisClearRefinements.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisClearRefinements.propDecorators = {
        buttonLabel: [{ type: Input }],
        clearsQuery: [{ type: Input }],
        excludeAttributes: [{ type: Input }]
    };
    return NgAisClearRefinements;
}(BaseWidget));
export { NgAisClearRefinements };
if (false) {
    /** @type {?} */
    NgAisClearRefinements.prototype.buttonLabel;
    /** @type {?} */
    NgAisClearRefinements.prototype.clearsQuery;
    /** @type {?} */
    NgAisClearRefinements.prototype.excludeAttributes;
    /** @type {?} */
    NgAisClearRefinements.prototype.state;
    /** @type {?} */
    NgAisClearRefinements.prototype.instantSearchParent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItcmVmaW5lbWVudHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJjbGVhci1yZWZpbmVtZW50cy9jbGVhci1yZWZpbmVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDOztJQW1CVyxpREFBVTtJQWNuRCwrQkFFUyxtQkFBd0I7UUFGakMsWUFJRSxrQkFBTSxrQkFBa0IsQ0FBQyxTQUMxQjtRQUhRLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzs0QkFmSyxtQkFBbUI7NEJBQ2xCLEtBQUs7a0NBQ0UsRUFBRTtzQkFFakM7WUFDYixjQUFjLEVBQUUsS0FBSztZQUNyQixNQUFNLEVBQUUsSUFBSTtTQUNiOztLQVdBO0lBVEQsc0JBQUksMkNBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDN0Q7OztPQUFBOzs7O0lBU00sd0NBQVE7Ozs7O1FBRWIsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUU7WUFDakMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQyxDQUFDO1FBRUgsaUJBQU0sUUFBUSxXQUFFLENBQUM7Ozs7OztJQUdaLDJDQUFXOzs7O2NBQUMsS0FBaUI7UUFDbEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyQjs7O2dCQXJESixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsUUFBUSxFQUFFLG1WQWFUO2lCQUNGOzs7O2dEQWdCSSxNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQzs7OzhCQWQ3QyxLQUFLOzhCQUNMLEtBQUs7b0NBQ0wsS0FBSzs7Z0NBMUJSO0VBdUIyQyxVQUFVO1NBQXhDLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBjb25uZWN0Q2xlYXJBbGwgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtY2xlYXItcmVmaW5lbWVudHNcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ2J1dHRvbicpICsgKCFzdGF0ZS5oYXNSZWZpbmVtZW50cyA/ICgnICcgKyBjeCgnYnV0dG9uJywgJ2Rpc2FibGVkJykpIDogJycpXCJcbiAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiIXN0YXRlLmhhc1JlZmluZW1lbnRzXCJcbiAgICAgID5cbiAgICAgICAge3tidXR0b25MYWJlbH19XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0NsZWFyUmVmaW5lbWVudHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KCkgcHVibGljIGJ1dHRvbkxhYmVsOiBzdHJpbmcgPSBcIkNsZWFyIHJlZmluZW1lbnRzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGVhcnNRdWVyeTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgZXhjbHVkZUF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgcHVibGljIHN0YXRlID0ge1xuICAgIGhhc1JlZmluZW1lbnRzOiBmYWxzZSxcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLmhhc1JlZmluZW1lbnRzICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiQ2xlYXJSZWZpbmVtZW50c1wiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGBjcmVhdGVXaWRnZXRgIGZyb20gYG5nT25Jbml0YCB0byBoYXZlIGBASW5wdXQoKWAgaW50aWFsaXplZFxuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RDbGVhckFsbCwge1xuICAgICAgY2xlYXJzUXVlcnk6IHRoaXMuY2xlYXJzUXVlcnksXG4gICAgICBleGNsdWRlQXR0cmlidXRlczogdGhpcy5leGNsdWRlQXR0cmlidXRlc1xuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5oYXNSZWZpbmVtZW50cykge1xuICAgICAgdGhpcy5zdGF0ZS5yZWZpbmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==