/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from "algoliasearch/index";
import * as encodeProxy from "querystring-es3/encode";
import { VERSION } from "./version";
/** @type {?} */
var algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
var encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient(_a) {
    var httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
    console.warn("`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.");
    return function (_, appId, apiKey) {
        return createSSRSearchClient({
            appId: appId,
            apiKey: apiKey,
            httpClient: httpClient,
            HttpHeaders: HttpHeaders,
            transferState: transferState,
            makeStateKey: makeStateKey
        });
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient(_a) {
    var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
    /** @type {?} */
    var client = algoliasearch(appId, apiKey, {});
    client.addAlgoliaAgent("angular-instantsearch " + VERSION);
    client._request = function (rawUrl, opts) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers = headers.set("content-type", opts.method === "POST"
            ? "application/x-www-form-urlencoded"
            : "application/json");
        headers = headers.set("accept", "application/json");
        /** @type {?} */
        var url = rawUrl + (rawUrl.includes("?") ? "&" : "?") + encode(opts.headers);
        /** @type {?} */
        var transferStateKey = makeStateKey("ngais(" + opts.body + ")");
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            var resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers
            });
        }
        return new Promise(function (resolve, reject) {
            httpClient
                .request(opts.method, url, {
                headers: headers,
                body: opts.body,
                observe: "response"
            })
                .subscribe(function (resp) {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers
                });
            }, function (resp) {
                return reject({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers
                });
            });
        });
    };
    return client;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBS3BDLElBQU0sYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQzs7QUFDdkUsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUM7Ozs7O0FBRWxELE1BQU0saUNBQWlDLEVBS3RDO1FBSkMsMEJBQVUsRUFDViw0QkFBVyxFQUNYLGdDQUFhLEVBQ2IsOEJBQVk7SUFFWixPQUFPLENBQUMsSUFBSSxDQUNWLDZHQUE2RyxDQUM5RyxDQUFDO0lBRUYsT0FBTyxVQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTTtRQUN0QixPQUFBLHFCQUFxQixDQUFDO1lBQ3BCLEtBQUssT0FBQTtZQUNMLE1BQU0sUUFBQTtZQUNOLFVBQVUsWUFBQTtZQUNWLFdBQVcsYUFBQTtZQUNYLGFBQWEsZUFBQTtZQUNiLFlBQVksY0FBQTtTQUNiLENBQUM7SUFQRixDQU9FLENBQUM7Q0FDTjs7Ozs7QUFFRCxNQUFNLGdDQUFnQyxFQU9yQztRQU5DLGdCQUFLLEVBQ0wsa0JBQU0sRUFDTiwwQkFBVSxFQUNWLDRCQUFXLEVBQ1gsZ0NBQWEsRUFDYiw4QkFBWTs7SUFFWixJQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsZUFBZSxDQUFDLDJCQUF5QixPQUFTLENBQUMsQ0FBQztJQUUzRCxNQUFNLENBQUMsUUFBUSxHQUFHLFVBQUMsTUFBTSxFQUFFLElBQUk7O1FBQzdCLElBQUksT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFFaEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQ25CLGNBQWMsRUFDZCxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU07WUFDcEIsQ0FBQyxDQUFDLG1DQUFtQztZQUNyQyxDQUFDLENBQUMsa0JBQWtCLENBQ3ZCLENBQUM7UUFFRixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQzs7UUFFcEQsSUFBTSxHQUFHLEdBQ1AsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztRQUVyRSxJQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxXQUFTLElBQUksQ0FBQyxJQUFJLE1BQUcsQ0FBQyxDQUFDO1FBRTdELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFOztZQUMxQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxVQUFVO2lCQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDekIsT0FBTyxTQUFBO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixPQUFPLEVBQUUsVUFBVTthQUNwQixDQUFDO2lCQUNELFNBQVMsQ0FDUixVQUFBLElBQUk7Z0JBQ0YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzFELE9BQU8sQ0FBQztvQkFDTixVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87aUJBQ3RCLENBQUMsQ0FBQzthQUNKLEVBQ0QsVUFBQSxJQUFJO2dCQUNGLE9BQUEsTUFBTSxDQUFDO29CQUNMLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtvQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDdEIsQ0FBQztZQUpGLENBSUUsQ0FDTCxDQUFDO1NBQ0wsQ0FBQyxDQUFDO0tBQ0osQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0NBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhbGdvbGlhc2VhcmNoUHJveHkgZnJvbSBcImFsZ29saWFzZWFyY2gvaW5kZXhcIjtcbmltcG9ydCAqIGFzIGVuY29kZVByb3h5IGZyb20gXCJxdWVyeXN0cmluZy1lczMvZW5jb2RlXCI7XG5cbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi92ZXJzaW9uXCI7XG5cbi8vIEFPVCArIFJvbGx1cCB3b3JrYXJvdW5kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTI2NyNpc3N1ZWNvbW1lbnQtMjk2Mzk1NzM0XG5cbmNvbnN0IGFsZ29saWFzZWFyY2ggPSBhbGdvbGlhc2VhcmNoUHJveHkuZGVmYXVsdCB8fCBhbGdvbGlhc2VhcmNoUHJveHk7XG5jb25zdCBlbmNvZGUgPSBlbmNvZGVQcm94eS5kZWZhdWx0IHx8IGVuY29kZVByb3h5O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSQWxnb2xpYUNsaWVudCh7XG4gIGh0dHBDbGllbnQsXG4gIEh0dHBIZWFkZXJzLFxuICB0cmFuc2ZlclN0YXRlLFxuICBtYWtlU3RhdGVLZXlcbn0pIHtcbiAgY29uc29sZS53YXJuKFxuICAgIFwiYGNyZWF0ZVNTUkFsZ29saWFDbGllbnRgIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYGNyZWF0ZVNTUlNlYXJjaENsaWVudGAgdG8gYmUgcGx1Z2dlZCB0byBgc2VhcmNoQ2xpZW50YC5cIlxuICApO1xuXG4gIHJldHVybiAoXywgYXBwSWQsIGFwaUtleSkgPT5cbiAgICBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICAgICAgYXBwSWQsXG4gICAgICBhcGlLZXksXG4gICAgICBodHRwQ2xpZW50LFxuICAgICAgSHR0cEhlYWRlcnMsXG4gICAgICB0cmFuc2ZlclN0YXRlLFxuICAgICAgbWFrZVN0YXRlS2V5XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICBhcHBJZCxcbiAgYXBpS2V5LFxuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5XG59KSB7XG4gIGNvbnN0IGNsaWVudCA9IGFsZ29saWFzZWFyY2goYXBwSWQsIGFwaUtleSwge30pO1xuICBjbGllbnQuYWRkQWxnb2xpYUFnZW50KGBhbmd1bGFyLWluc3RhbnRzZWFyY2ggJHtWRVJTSU9OfWApO1xuXG4gIGNsaWVudC5fcmVxdWVzdCA9IChyYXdVcmwsIG9wdHMpID0+IHtcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KFxuICAgICAgXCJjb250ZW50LXR5cGVcIixcbiAgICAgIG9wdHMubWV0aG9kID09PSBcIlBPU1RcIlxuICAgICAgICA/IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcbiAgICAgICAgOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gICAgY29uc3QgdXJsID1cbiAgICAgIHJhd1VybCArIChyYXdVcmwuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIikgKyBlbmNvZGUob3B0cy5oZWFkZXJzKTtcblxuICAgIGNvbnN0IHRyYW5zZmVyU3RhdGVLZXkgPSBtYWtlU3RhdGVLZXkoYG5nYWlzKCR7b3B0cy5ib2R5fSlgKTtcblxuICAgIGlmICh0cmFuc2ZlclN0YXRlLmhhc0tleSh0cmFuc2ZlclN0YXRlS2V5KSkge1xuICAgICAgY29uc3QgcmVzcCA9IEpTT04ucGFyc2UodHJhbnNmZXJTdGF0ZS5nZXQodHJhbnNmZXJTdGF0ZUtleSwge30pKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBodHRwQ2xpZW50XG4gICAgICAgIC5yZXF1ZXN0KG9wdHMubWV0aG9kLCB1cmwsIHtcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IG9wdHMuYm9keSxcbiAgICAgICAgICBvYnNlcnZlOiBcInJlc3BvbnNlXCJcbiAgICAgICAgfSlcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICByZXNwID0+IHtcbiAgICAgICAgICAgIHRyYW5zZmVyU3RhdGUuc2V0KHRyYW5zZmVyU3RhdGVLZXksIEpTT04uc3RyaW5naWZ5KHJlc3ApKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcCA9PlxuICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBjbGllbnQ7XG59XG4iXX0=