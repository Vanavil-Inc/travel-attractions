/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from "@angular/core";
import { connectCurrentRefinedValues } from "instantsearch.js/es/connectors";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
import { noop, capitalize } from "../utils";
/** @typedef {?} */
var CurrentRefinementsState;
export { CurrentRefinementsState };
var NgAisCurrentRefinements = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisCurrentRefinements, _super);
    function NgAisCurrentRefinements(instantSearchParent) {
        var _this = _super.call(this, "CurrentRefinements") || this;
        _this.instantSearchParent = instantSearchParent;
        // render options
        _this.clearRefinements = "after";
        _this.clearRefinementsLabel = "Clear refinements";
        // connector options
        _this.onlyListedAttributes = false;
        _this.clearsQuery = false;
        _this.attributes = [];
        _this.state = {
            attributes: {},
            clearAllClick: noop,
            clearAllURL: noop,
            createURL: noop,
            refine: noop,
            refinements: []
        };
        return _this;
    }
    Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.refinements.length === 0 && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisCurrentRefinements.prototype, "refinements", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var items = typeof this.transformItems === "function"
                ? this.transformItems(this.state.refinements)
                : this.state.refinements;
            // group refinements by category? (attributeName && type)
            return items.reduce(function (res, _a) {
                var type = _a.type, attributeName = _a.attributeName, refinement = tslib_1.__rest(_a, ["type", "attributeName"]);
                /** @type {?} */
                var match = res.find(function (r) { return r.attributeName === attributeName && r.type === type; });
                if (match) {
                    match.items.push(tslib_1.__assign({ type: type, attributeName: attributeName }, refinement));
                }
                else {
                    res.push({
                        type: type,
                        attributeName: attributeName,
                        label: capitalize(attributeName),
                        items: [tslib_1.__assign({ type: type, attributeName: attributeName }, refinement)]
                    });
                }
                return res;
            }, []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisCurrentRefinements.prototype, "json", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.stringify(this.refinements, null, 4);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectCurrentRefinedValues, {
            attributes: this.attributes,
            clearsQuery: this.clearsQuery,
            onlyListedAttributes: this.onlyListedAttributes
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.handleClick = /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    function (event, refinement) {
        event.preventDefault();
        this.state.refine(refinement);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.handleClearAllClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.clearAllClick();
    };
    NgAisCurrentRefinements.decorators = [
        { type: Component, args: [{
                    selector: "ais-current-refinements",
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'before' || clearRefinements === true\">\n        {{clearRefinementsLabel}}\n      </button>\n\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let refinement of refinements\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{refinement.label}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let item of refinement.items\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{item.name}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, item)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'after'\">\n        {{clearRefinementsLabel}}\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgAisCurrentRefinements.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisCurrentRefinements.propDecorators = {
        clearRefinements: [{ type: Input }],
        clearRefinementsLabel: [{ type: Input }],
        transformItems: [{ type: Input }],
        onlyListedAttributes: [{ type: Input }],
        clearsQuery: [{ type: Input }],
        attributes: [{ type: Input }]
    };
    return NgAisCurrentRefinements;
}(BaseWidget));
export { NgAisCurrentRefinements };
if (false) {
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinements;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinementsLabel;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.transformItems;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.onlyListedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearsQuery;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.attributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.state;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.instantSearchParent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC1yZWZpbmVtZW50cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImN1cnJlbnQtcmVmaW5lbWVudHMvY3VycmVudC1yZWZpbmVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7OztJQW1EQyxtREFBVTtJQXlEckQsaUNBRVMsbUJBQXdCO1FBRmpDLFlBSUUsa0JBQU0sb0JBQW9CLENBQUMsU0FDNUI7UUFIUSx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQUs7O2lDQXpEZ0MsT0FBTztzQ0FDeEIsbUJBQW1COztxQ0FJbkIsS0FBSzs0QkFDZCxLQUFLOzJCQUt0QyxFQUFFO3NCQUVnQztZQUN0QyxVQUFVLEVBQUUsRUFBRTtZQUNkLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUk7WUFDWixXQUFXLEVBQUUsRUFBRTtTQUNoQjs7S0F3Q0E7SUF0Q0Qsc0JBQUksNkNBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDdEU7OztPQUFBO0lBRUQsc0JBQUksZ0RBQVc7Ozs7UUFBZjs7WUFDRSxJQUFNLEtBQUssR0FDVCxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVTtnQkFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7Z0JBQzdDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7WUFHN0IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEVBQXNDO2dCQUFwQyxJQUFBLGNBQUksRUFBRSxnQ0FBYSxFQUFFLDBEQUFhOztnQkFDNUQsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FDcEIsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsYUFBYSxLQUFLLGFBQWEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBcEQsQ0FBb0QsQ0FDMUQsQ0FBQztnQkFDRixJQUFJLEtBQUssRUFBRTtvQkFDVCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksb0JBQUcsSUFBSSxNQUFBLEVBQUUsYUFBYSxlQUFBLElBQUssVUFBVSxFQUFHLENBQUM7aUJBQzFEO3FCQUFNO29CQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUM7d0JBQ1AsSUFBSSxNQUFBO3dCQUNKLGFBQWEsZUFBQTt3QkFDYixLQUFLLEVBQUUsVUFBVSxDQUFDLGFBQWEsQ0FBQzt3QkFDaEMsS0FBSyxFQUFFLG9CQUFHLElBQUksTUFBQSxFQUFFLGFBQWEsZUFBQSxJQUFLLFVBQVUsRUFBRztxQkFDaEQsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELE9BQU8sR0FBRyxDQUFDO2FBQ1osRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNSOzs7T0FBQTtJQUVELHNCQUFJLHlDQUFJOzs7O1FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7OztPQUFBOzs7O0lBU00sMENBQVE7Ozs7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLDJCQUEyQixFQUFFO1lBQzdDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0Isb0JBQW9CLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtTQUNoRCxDQUFDLENBQUM7UUFDSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQzs7Ozs7OztJQUdaLDZDQUFXOzs7OztjQUFDLEtBQWlCLEVBQUUsVUFBYztRQUNsRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7OztJQUd6QixxREFBbUI7Ozs7Y0FBQyxLQUFpQjtRQUMxQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQzs7O2dCQXhIOUIsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRSw2aUNBb0NUO2lCQUNGOzs7O2dEQTJESSxNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQzs7O21DQXhEN0MsS0FBSzt3Q0FDTCxLQUFLO2lDQUNMLEtBQUs7dUNBR0wsS0FBSzs4QkFDTCxLQUFLOzZCQUNMLEtBQUs7O2tDQWpFUjtFQXdENkMsVUFBVTtTQUExQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0Q3VycmVudFJlZmluZWRWYWx1ZXMgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wLCBjYXBpdGFsaXplIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCB0eXBlIEN1cnJlbnRSZWZpbmVtZW50c1N0YXRlID0ge1xuICBhdHRyaWJ1dGVzOiB7fTtcbiAgY2xlYXJBbGxDbGljazogRnVuY3Rpb247XG4gIGNsZWFyQWxsVVJMOiBGdW5jdGlvbjtcbiAgY3JlYXRlVVJMOiBGdW5jdGlvbjtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbiAgcmVmaW5lbWVudHM6IHt9W107XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYWlzLWN1cnJlbnQtcmVmaW5lbWVudHNcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ3Jlc2V0JylcIlxuICAgICAgICAoY2xpY2spPVwiaGFuZGxlQ2xlYXJBbGxDbGljaygkZXZlbnQpXCJcbiAgICAgICAgKm5nSWY9XCJjbGVhclJlZmluZW1lbnRzID09PSAnYmVmb3JlJyB8fCBjbGVhclJlZmluZW1lbnRzID09PSB0cnVlXCI+XG4gICAgICAgIHt7Y2xlYXJSZWZpbmVtZW50c0xhYmVsfX1cbiAgICAgIDwvYnV0dG9uPlxuXG4gICAgICA8dWxcbiAgICAgICAgW2NsYXNzXT1cImN4KCdsaXN0JylcIlxuICAgICAgICAqbmdGb3I9XCJsZXQgcmVmaW5lbWVudCBvZiByZWZpbmVtZW50c1wiXG4gICAgICA+XG4gICAgICAgIDxsaSBbY2xhc3NdPVwiY3goJ2l0ZW0nKVwiPlxuICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPnt7cmVmaW5lbWVudC5sYWJlbH19Ojwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2NhdGVnb3J5JylcIlxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgcmVmaW5lbWVudC5pdGVtc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdjYXRlZ29yeUxhYmVsJylcIj57e2l0ZW0ubmFtZX19PC9zcGFuPlxuICAgICAgICAgICAgPGJ1dHRvbiBbY2xhc3NdPVwiY3goJ2RlbGV0ZScpXCIgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgaXRlbSlcIj7inJU8L2J1dHRvbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgICA8YnV0dG9uXG4gICAgICAgIFtjbGFzc109XCJjeCgncmVzZXQnKVwiXG4gICAgICAgIChjbGljayk9XCJoYW5kbGVDbGVhckFsbENsaWNrKCRldmVudClcIlxuICAgICAgICAqbmdJZj1cImNsZWFyUmVmaW5lbWVudHMgPT09ICdhZnRlcidcIj5cbiAgICAgICAge3tjbGVhclJlZmluZW1lbnRzTGFiZWx9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNDdXJyZW50UmVmaW5lbWVudHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgLy8gcmVuZGVyIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGNsZWFyUmVmaW5lbWVudHM6IFwiYmVmb3JlXCIgfCBcImFmdGVyXCIgfCBib29sZWFuID0gXCJhZnRlclwiO1xuICBASW5wdXQoKSBwdWJsaWMgY2xlYXJSZWZpbmVtZW50c0xhYmVsOiBzdHJpbmcgPSBcIkNsZWFyIHJlZmluZW1lbnRzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IEZ1bmN0aW9uO1xuXG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBvbmx5TGlzdGVkQXR0cmlidXRlczogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgY2xlYXJzUXVlcnk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KClcbiAgcHVibGljIGF0dHJpYnV0ZXM6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgfVtdID0gW107XG5cbiAgcHVibGljIHN0YXRlOiBDdXJyZW50UmVmaW5lbWVudHNTdGF0ZSA9IHtcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBjbGVhckFsbENsaWNrOiBub29wLFxuICAgIGNsZWFyQWxsVVJMOiBub29wLFxuICAgIGNyZWF0ZVVSTDogbm9vcCxcbiAgICByZWZpbmU6IG5vb3AsXG4gICAgcmVmaW5lbWVudHM6IFtdXG4gIH07XG5cbiAgZ2V0IGlzSGlkZGVuKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnJlZmluZW1lbnRzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmF1dG9IaWRlQ29udGFpbmVyO1xuICB9XG5cbiAgZ2V0IHJlZmluZW1lbnRzKCkge1xuICAgIGNvbnN0IGl0ZW1zID1cbiAgICAgIHR5cGVvZiB0aGlzLnRyYW5zZm9ybUl0ZW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyB0aGlzLnRyYW5zZm9ybUl0ZW1zKHRoaXMuc3RhdGUucmVmaW5lbWVudHMpXG4gICAgICAgIDogdGhpcy5zdGF0ZS5yZWZpbmVtZW50cztcblxuICAgIC8vIGdyb3VwIHJlZmluZW1lbnRzIGJ5IGNhdGVnb3J5PyAoYXR0cmlidXRlTmFtZSAmJiB0eXBlKVxuICAgIHJldHVybiBpdGVtcy5yZWR1Y2UoKHJlcywgeyB0eXBlLCBhdHRyaWJ1dGVOYW1lLCAuLi5yZWZpbmVtZW50IH0pID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoID0gcmVzLmZpbmQoXG4gICAgICAgIHIgPT4gci5hdHRyaWJ1dGVOYW1lID09PSBhdHRyaWJ1dGVOYW1lICYmIHIudHlwZSA9PT0gdHlwZVxuICAgICAgKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pdGVtcy5wdXNoKHsgdHlwZSwgYXR0cmlidXRlTmFtZSwgLi4ucmVmaW5lbWVudCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgbGFiZWw6IGNhcGl0YWxpemUoYXR0cmlidXRlTmFtZSksXG4gICAgICAgICAgaXRlbXM6IFt7IHR5cGUsIGF0dHJpYnV0ZU5hbWUsIC4uLnJlZmluZW1lbnQgfV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnJlZmluZW1lbnRzLCBudWxsLCA0KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoXCJDdXJyZW50UmVmaW5lbWVudHNcIik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEN1cnJlbnRSZWZpbmVkVmFsdWVzLCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICBjbGVhcnNRdWVyeTogdGhpcy5jbGVhcnNRdWVyeSxcbiAgICAgIG9ubHlMaXN0ZWRBdHRyaWJ1dGVzOiB0aGlzLm9ubHlMaXN0ZWRBdHRyaWJ1dGVzXG4gICAgfSk7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCwgcmVmaW5lbWVudDoge30pIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUucmVmaW5lKHJlZmluZW1lbnQpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNsZWFyQWxsQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUuY2xlYXJBbGxDbGljaygpO1xuICB9XG59XG4iXX0=