(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('algoliasearch/lite'), require('instantsearch.js/es'), require('instantsearch.js/es/connectors'), require('@angular/common/http'), require('nouislider'), require('algoliasearch/index'), require('querystring-es3/encode'), require('algoliasearch-helper')) :
    typeof define === 'function' && define.amd ? define('angular-instantsearch', ['exports', '@angular/core', '@angular/common', 'algoliasearch/lite', 'instantsearch.js/es', 'instantsearch.js/es/connectors', '@angular/common/http', 'nouislider', 'algoliasearch/index', 'querystring-es3/encode', 'algoliasearch-helper'], factory) :
    (factory((global['angular-instantsearch'] = {}),global.ng.core,global.ng.common,null,global.instantsearch,global.instantsearch.connectors,global.ng.common.http,global.noUiSlider,global.algoliasearch,global.qs.encode,global.algoliasearchHelper));
}(this, (function (exports,core,common,algoliasearchProxy,instantsearch,connectors,http,noUiSlider,algoliasearchProxy$1,encodeProxy,algoliasearchHelper) { 'use strict';

    var algoliasearchProxy__default = 'default' in algoliasearchProxy ? algoliasearchProxy['default'] : algoliasearchProxy;
    instantsearch = instantsearch && instantsearch.hasOwnProperty('default') ? instantsearch['default'] : instantsearch;
    var algoliasearchProxy$1__default = 'default' in algoliasearchProxy$1 ? algoliasearchProxy$1['default'] : algoliasearchProxy$1;
    var encodeProxy__default = 'default' in encodeProxy ? encodeProxy['default'] : encodeProxy;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
        return t;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} widgetName
     * @return {?}
     */
    function bem(widgetName) {
        /** @type {?} */
        var cx = function (element, subElement) {
            if (element) {
                /** @type {?} */
                var scoppedWidgetName = "ais-" + widgetName + "-" + element;
                // output `ais-Widget-Header|Body|Footer ais-Header|Body|Footer`
                if (element === "header" || element === "body" || element === "footer") {
                    /** @type {?} */
                    var nonScoppedWidgetName = "ais-" + element;
                    return scoppedWidgetName + " " + nonScoppedWidgetName;
                }
                // output `ais-Widget-Xyz--abc`
                if (subElement) {
                    return scoppedWidgetName + "--" + subElement;
                }
                // output `ais-Widget-Xyz`
                return scoppedWidgetName;
            }
            // output `ais-Widget`
            return "ais-" + widgetName;
        };
        return cx;
    }
    /**
     * @param {?=} input
     * @return {?}
     */
    function parseNumberInput(input) {
        return typeof input === "string" ? parseInt(input, 10) : input;
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    function noop() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    function capitalize(s) {
        return s.charAt(0).toUpperCase() + s.slice(1);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BaseWidget = /** @class */ (function () {
        function BaseWidget(widgetName) {
            var _this = this;
            this.state = {};
            this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering) {
                    return Promise.resolve().then(function () {
                        _this.state = state;
                    });
                }
                _this.state = state;
            };
            this.cx = bem(widgetName);
        }
        /**
         * @param {?} connector
         * @param {?=} options
         * @return {?}
         */
        BaseWidget.prototype.createWidget = /**
         * @param {?} connector
         * @param {?=} options
         * @return {?}
         */
            function (connector, options) {
                if (options === void 0) {
                    options = {};
                }
                this.widget = connector(this.updateState, noop)(options);
            };
        /**
         * @return {?}
         */
        BaseWidget.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // add widget to the InstantSearch Instance
                this.instantSearchParent.addWidget(this.widget);
            };
        /**
         * @return {?}
         */
        BaseWidget.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.instantSearchParent.platformId)) {
                    this.instantSearchParent.removeWidget(this.widget);
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        BaseWidget.prototype.getItemClass = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var className = this.cx("item");
                if (item.isRefined) {
                    className = className + " " + this.cx("item", "selected");
                }
                return className;
            };
        BaseWidget.propDecorators = {
            autoHideContainer: [{ type: core.Input }]
        };
        return BaseWidget;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VERSION = "2.0.3";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var algoliasearch = algoliasearchProxy__default || algoliasearchProxy;
    var NgAisInstantSearch = /** @class */ (function () {
        function NgAisInstantSearch(platformId) {
            var _this = this;
            this.platformId = platformId;
            this.instanceName = "default";
            this.change = new core.EventEmitter();
            this.onRender = function () {
                _this.change.emit({
                    results: _this.instantSearchInstance.helper.lastResults,
                    state: _this.instantSearchInstance.helper.state
                });
            };
        }
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createInstantSearchInstance(this.config);
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.start();
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.removeListener("render", this.onRender);
                this.instantSearchInstance.dispose();
            };
        /**
         * @param {?} config
         * @return {?}
         */
        NgAisInstantSearch.prototype.createInstantSearchInstance = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                // add default searchParameters with highlighting config
                if (!config.searchParameters)
                    config.searchParameters = {};
                Object.assign(config.searchParameters, {
                    highlightPreTag: "__ais-highlight__",
                    highlightPostTag: "__/ais-highlight__"
                });
                // remove URLSync widget if on SSR
                if (!common.isPlatformBrowser(this.platformId)) {
                    if (typeof config.urlSync !== "undefined")
                        delete config.urlSync;
                    if (typeof config.routing !== "undefined")
                        delete config.routing;
                }
                // custom algolia client agent
                if (!config.searchClient && !config.createAlgoliaClient) {
                    /** @type {?} */
                    var client = algoliasearch(config.appId, config.apiKey);
                    client.addAlgoliaAgent("angular-instantsearch " + VERSION);
                    config.searchClient = client;
                    config.appId = undefined;
                    config.apiKey = undefined;
                }
                this.instantSearchInstance = instantsearch(config);
                this.instantSearchInstance.on("render", this.onRender);
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        NgAisInstantSearch.prototype.addWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.instantSearchInstance.addWidget(widget);
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        NgAisInstantSearch.prototype.removeWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.instantSearchInstance.removeWidget(widget);
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.refresh = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.refresh();
            };
        NgAisInstantSearch.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-instantsearch",
                        template: "<ng-content></ng-content>"
                    },] },
        ];
        /** @nocollapse */
        NgAisInstantSearch.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        NgAisInstantSearch.propDecorators = {
            config: [{ type: core.Input }],
            instanceName: [{ type: core.Input }],
            change: [{ type: core.Output }]
        };
        return NgAisInstantSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisBreadcrumb = /** @class */ (function (_super) {
        __extends(NgAisBreadcrumb, _super);
        function NgAisBreadcrumb(instantSearchParent) {
            var _this = _super.call(this, "Breadcrumb") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: noop,
                items: [],
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisBreadcrumb.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisBreadcrumb.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this.state.items.map(function (item, idx) { return (__assign({}, item, { separator: idx !== 0, isLast: idx === _this.state.items.length - 1 })); });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisBreadcrumb.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectBreadcrumb, {
                    attributes: this.attributes,
                    rootPath: this.rootPath
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisBreadcrumb.prototype.handleClick = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                if (item.value) {
                    this.state.refine(item.value);
                }
            };
        NgAisBreadcrumb.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-breadcrumb",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of items\"\n          [class]=\"cx('item', item.isLast ? 'selected' : undefined)\"\n          (click)=\"handleClick($event, item)\"\n        >\n          <span\n            *ngIf=\"item.separator\"\n            [class]=\"cx('separator')\"\n            aria-hidden=\"true\"\n          >\n            >\n          </span>\n          <a\n            [class]=\"cx('link')\"\n            href=\"{{state.createURL(item.value)}}\"\n            *ngIf=\"!item.isLast\"\n            (click)=\"handleClick($event, item)\"\n          >\n            {{item.name}}\n          </a>\n\n          <span *ngIf=\"item.isLast\">\n            {{item.name}}\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisBreadcrumb.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisBreadcrumb.propDecorators = {
            attributes: [{ type: core.Input }],
            rootPath: [{ type: core.Input }]
        };
        return NgAisBreadcrumb;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisBreadcrumbModule = /** @class */ (function () {
        function NgAisBreadcrumbModule() {
        }
        NgAisBreadcrumbModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisBreadcrumb],
                        entryComponents: [NgAisBreadcrumb],
                        exports: [NgAisBreadcrumb],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisBreadcrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisClearRefinements = /** @class */ (function (_super) {
        __extends(NgAisClearRefinements, _super);
        function NgAisClearRefinements(instantSearchParent) {
            var _this = _super.call(this, "ClearRefinements") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.buttonLabel = "Clear refinements";
            _this.clearsQuery = false;
            _this.excludeAttributes = [];
            _this.state = {
                hasRefinements: false,
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisClearRefinements.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return !this.state.hasRefinements && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisClearRefinements.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // we need to `createWidget` from `ngOnInit` to have `@Input()` intialized
                this.createWidget(connectors.connectClearAll, {
                    clearsQuery: this.clearsQuery,
                    excludeAttributes: this.excludeAttributes
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisClearRefinements.prototype.handleClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                if (this.state.hasRefinements) {
                    this.state.refine();
                }
            };
        NgAisClearRefinements.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-clear-refinements",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('button') + (!state.hasRefinements ? (' ' + cx('button', 'disabled')) : '')\"\n        (click)=\"handleClick($event)\"\n        [disabled]=\"!state.hasRefinements\"\n      >\n        {{buttonLabel}}\n      </button>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisClearRefinements.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisClearRefinements.propDecorators = {
            buttonLabel: [{ type: core.Input }],
            clearsQuery: [{ type: core.Input }],
            excludeAttributes: [{ type: core.Input }]
        };
        return NgAisClearRefinements;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisClearRefinementsModule = /** @class */ (function () {
        function NgAisClearRefinementsModule() {
        }
        NgAisClearRefinementsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisClearRefinements],
                        entryComponents: [NgAisClearRefinements],
                        exports: [NgAisClearRefinements],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisClearRefinementsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisCurrentRefinements = /** @class */ (function (_super) {
        __extends(NgAisCurrentRefinements, _super);
        function NgAisCurrentRefinements(instantSearchParent) {
            var _this = _super.call(this, "CurrentRefinements") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.clearRefinements = "after";
            _this.clearRefinementsLabel = "Clear refinements";
            // connector options
            _this.onlyListedAttributes = false;
            _this.clearsQuery = false;
            _this.attributes = [];
            _this.state = {
                attributes: {},
                clearAllClick: noop,
                clearAllURL: noop,
                createURL: noop,
                refine: noop,
                refinements: []
            };
            return _this;
        }
        Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.refinements.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisCurrentRefinements.prototype, "refinements", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var items = typeof this.transformItems === "function"
                    ? this.transformItems(this.state.refinements)
                    : this.state.refinements;
                // group refinements by category? (attributeName && type)
                return items.reduce(function (res, _a) {
                    var type = _a.type, attributeName = _a.attributeName, refinement = __rest(_a, ["type", "attributeName"]);
                    /** @type {?} */
                    var match = res.find(function (r) { return r.attributeName === attributeName && r.type === type; });
                    if (match) {
                        match.items.push(__assign({ type: type, attributeName: attributeName }, refinement));
                    }
                    else {
                        res.push({
                            type: type,
                            attributeName: attributeName,
                            label: capitalize(attributeName),
                            items: [__assign({ type: type, attributeName: attributeName }, refinement)]
                        });
                    }
                    return res;
                }, []);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisCurrentRefinements.prototype, "json", {
            get: /**
             * @return {?}
             */ function () {
                return JSON.stringify(this.refinements, null, 4);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisCurrentRefinements.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectCurrentRefinedValues, {
                    attributes: this.attributes,
                    clearsQuery: this.clearsQuery,
                    onlyListedAttributes: this.onlyListedAttributes
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} refinement
         * @return {?}
         */
        NgAisCurrentRefinements.prototype.handleClick = /**
         * @param {?} event
         * @param {?} refinement
         * @return {?}
         */
            function (event, refinement) {
                event.preventDefault();
                this.state.refine(refinement);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisCurrentRefinements.prototype.handleClearAllClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.clearAllClick();
            };
        NgAisCurrentRefinements.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-current-refinements",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'before' || clearRefinements === true\">\n        {{clearRefinementsLabel}}\n      </button>\n\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let refinement of refinements\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{refinement.label}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let item of refinement.items\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{item.name}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, item)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'after'\">\n        {{clearRefinementsLabel}}\n      </button>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisCurrentRefinements.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisCurrentRefinements.propDecorators = {
            clearRefinements: [{ type: core.Input }],
            clearRefinementsLabel: [{ type: core.Input }],
            transformItems: [{ type: core.Input }],
            onlyListedAttributes: [{ type: core.Input }],
            clearsQuery: [{ type: core.Input }],
            attributes: [{ type: core.Input }]
        };
        return NgAisCurrentRefinements;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisCurrentRefinementsModule = /** @class */ (function () {
        function NgAisCurrentRefinementsModule() {
        }
        NgAisCurrentRefinementsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisCurrentRefinements],
                        entryComponents: [NgAisCurrentRefinements],
                        exports: [NgAisCurrentRefinements],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisCurrentRefinementsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenu = /** @class */ (function (_super) {
        __extends(NgAisHierarchicalMenu, _super);
        function NgAisHierarchicalMenu(instantSearchParent) {
            var _this = _super.call(this, "HierarchicalMenu") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.separator = " > ";
            _this.limit = 10;
            _this.state = {
                createURL: noop,
                items: [],
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisHierarchicalMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisHierarchicalMenu.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return typeof this.transformItems === "function"
                    ? this.transformItems(this.state.items)
                    : this.state.items;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisHierarchicalMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectHierarchicalMenu, {
                    limit: parseNumberInput(this.limit),
                    attributes: this.attributes,
                    rootPath: this.rootPath,
                    separator: this.separator,
                    showParentLevel: this.showParentLevel,
                    sortBy: this.sortBy
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisHierarchicalMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-hierarchical-menu",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list') + ' ' + cx('list', 'lvl0')\">\n        <ais-hierarchical-menu-item\n          *ngFor=\"let item of items\"\n          [item]=\"item\"\n          [createURL]=\"state.createURL\"\n          [refine]=\"state.refine\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisHierarchicalMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisHierarchicalMenu.propDecorators = {
            transformItems: [{ type: core.Input }],
            attributes: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            rootPath: [{ type: core.Input }],
            showParentLevel: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }]
        };
        return NgAisHierarchicalMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenuItem = /** @class */ (function () {
        function NgAisHierarchicalMenuItem() {
            this.lvl = 1;
            this.cx = bem("HierarchicalMenu");
        }
        /**
         * @param {?} item
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.getItemClass = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var className = this.cx("item");
                if (item.isRefined) {
                    className = className + " " + this.cx("item", "selected");
                }
                if (this.isArray(item.data) && item.data.length > 0) {
                    className = className + " " + this.cx("item", "parent");
                }
                return className;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.getListClass = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.cx("list") + " " + this.cx("list", "child") + " " + this.cx("list", "lvl" + this.lvl);
            };
        /**
         * @param {?} potentialArray
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.isArray = /**
         * @param {?} potentialArray
         * @return {?}
         */
            function (potentialArray) {
                return Array.isArray(potentialArray);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.handleClick = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                this.refine(item.value);
            };
        NgAisHierarchicalMenuItem.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-hierarchical-menu-item",
                        template: "\n    <li\n      [class]=\"getItemClass(item)\"\n      (click)=\"handleClick($event, item)\"\n    >\n      <a\n        [class]=\"cx('link')\"\n        href=\"{{createURL(item.value)}}\"\n        (click)=\"handleClick($event, item)\"\n      >\n        <span [class]=\"cx('label')\">{{item.label}}</span>\n        <span [class]=\"cx('count')\">{{item.count}}</span>\n      </a>\n\n      <ul\n        [class]=\"getListClass(item)\"\n        *ngIf=\"item.isRefined && isArray(item.data) && item.data.length > 0\"\n      >\n        <ais-hierarchical-menu-item\n          *ngFor=\"let child of item.data\"\n          [item]=\"child\"\n          [createURL]=\"createURL\"\n          [refine]=\"refine\"\n          [lvl]=\"lvl + 1\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </li>\n  "
                    },] },
        ];
        NgAisHierarchicalMenuItem.propDecorators = {
            lvl: [{ type: core.Input }],
            refine: [{ type: core.Input }],
            createURL: [{ type: core.Input }],
            item: [{ type: core.Input }]
        };
        return NgAisHierarchicalMenuItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenuModule = /** @class */ (function () {
        function NgAisHierarchicalMenuModule() {
        }
        NgAisHierarchicalMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHierarchicalMenu, NgAisHierarchicalMenuItem],
                        entryComponents: [NgAisHierarchicalMenu],
                        exports: [NgAisHierarchicalMenu],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisHierarchicalMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHitsPerPage = /** @class */ (function (_super) {
        __extends(NgAisHitsPerPage, _super);
        function NgAisHitsPerPage(instantSearchParent) {
            var _this = _super.call(this, "HitsPerPage") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                items: [],
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisHitsPerPage.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisHitsPerPage.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectHitsPerPage, { items: this.items });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisHitsPerPage.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-hits-per-page",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.items\"\n          [value]=\"item.value\"\n          [selected]=\"item.isRefined\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisHitsPerPage.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisHitsPerPage.propDecorators = {
            items: [{ type: core.Input }]
        };
        return NgAisHitsPerPage;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHitsPerPageModule = /** @class */ (function () {
        function NgAisHitsPerPageModule() {
        }
        NgAisHitsPerPageModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHitsPerPage],
                        entryComponents: [NgAisHitsPerPage],
                        exports: [NgAisHitsPerPage],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisHitsPerPageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var get = require("lodash/get");
    var NgAisHighlight = /** @class */ (function () {
        function NgAisHighlight() {
            this.tagName = "em";
            this.cx = bem("Highlight");
        }
        Object.defineProperty(NgAisHighlight.prototype, "content", {
            get: /**
             * @return {?}
             */ function () {
                if (this.attribute === "highlighted") {
                    return this.hit.highlighted
                        ? this.replaceWithTagName(this.hit.highlighted)
                        : this.hit.label;
                }
                if (this.hit.hasOwnProperty("_highlightResult")) {
                    /** @type {?} */
                    var attributeHighlighted = get(this.hit._highlightResult, this.attribute);
                    // check that the attributeHighlighted is a string
                    if (attributeHighlighted !== undefined &&
                        typeof attributeHighlighted.value === "string") {
                        return this.replaceWithTagName(attributeHighlighted.value);
                    }
                }
                /** @type {?} */
                var fallback = get(this.hit, this.attribute);
                if (!fallback) {
                    console.warn("Could not find attribute [" + this.attribute + "] into hit object, will display an empty string.");
                    return "";
                }
                return fallback;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NgAisHighlight.prototype.replaceWithTagName = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value
                    .replace(new RegExp("<em>", "g"), "<" + this.tagName + " class=\"" + this.cx("highlighted") + "\">")
                    .replace(new RegExp("</em>", "g"), "</" + this.tagName + ">");
            };
        NgAisHighlight.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-highlight",
                        template: "<span [class]=\"cx()\" [innerHtml]=\"content\"></span>"
                    },] },
        ];
        NgAisHighlight.propDecorators = {
            attribute: [{ type: core.Input }],
            hit: [{ type: core.Input }],
            tagName: [{ type: core.Input }]
        };
        return NgAisHighlight;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHighlightModule = /** @class */ (function () {
        function NgAisHighlightModule() {
        }
        NgAisHighlightModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHighlight],
                        entryComponents: [NgAisHighlight],
                        exports: [NgAisHighlight],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisHighlightModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHits = /** @class */ (function (_super) {
        __extends(NgAisHits, _super);
        function NgAisHits(instantSearchParent) {
            var _this = _super.call(this, "Hits") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = { hits: [], results: {} };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = __assign({}, state, { results: state.results, hits: typeof _this.transformItems === "function"
                        ? _this.transformItems(state.hits)
                        : state.hits });
            };
            _this.createWidget(connectors.connectHits, { escapeHits: true });
            return _this;
        }
        NgAisHits.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-hits",
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisHits.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisHits.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisHits;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisHitsModule = /** @class */ (function () {
        function NgAisHitsModule() {
        }
        NgAisHitsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHits],
                        entryComponents: [NgAisHits],
                        exports: [NgAisHits],
                        imports: [common.CommonModule, NgAisHighlightModule]
                    },] },
        ];
        return NgAisHitsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisInfiniteHits = /** @class */ (function (_super) {
        __extends(NgAisInfiniteHits, _super);
        function NgAisInfiniteHits(instantSearchParent) {
            var _this = _super.call(this, "InfiniteHits") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.showMoreLabel = "Show more results";
            _this.state = {
                hits: [],
                isLastPage: false,
                showMore: noop,
                results: {}
            };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = __assign({}, state, { results: state.results, hits: typeof _this.transformItems === "function"
                        ? _this.transformItems(state.hits)
                        : state.hits });
            };
            _this.createWidget(connectors.connectInfiniteHits, { escapeHits: true });
            return _this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisInfiniteHits.prototype.showMore = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.showMore();
            };
        NgAisInfiniteHits.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-infinite-hits",
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [class]=\"cx('showMore')\"\n        (click)=\"showMore($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisInfiniteHits.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisInfiniteHits.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            showMoreLabel: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisInfiniteHits;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisInfiniteHitsModule = /** @class */ (function () {
        function NgAisInfiniteHitsModule() {
        }
        NgAisInfiniteHitsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisInfiniteHits],
                        entryComponents: [NgAisInfiniteHits],
                        exports: [NgAisInfiniteHits],
                        imports: [common.CommonModule, NgAisHighlightModule]
                    },] },
        ];
        return NgAisInfiniteHitsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisInstantSearchModule = /** @class */ (function () {
        function NgAisInstantSearchModule() {
        }
        /**
         * @return {?}
         */
        NgAisInstantSearchModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgAisInstantSearchModule,
                    providers: []
                };
            };
        NgAisInstantSearchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisInstantSearch],
                        entryComponents: [NgAisInstantSearch],
                        exports: [NgAisInstantSearch],
                        imports: [common.CommonModule, http.HttpClientModule]
                    },] },
        ];
        return NgAisInstantSearchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisMenu = /** @class */ (function (_super) {
        __extends(NgAisMenu, _super);
        function NgAisMenu(instantSearchParent) {
            var _this = _super.call(this, "Menu") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.showMoreLabel = "Show more";
            _this.showLessLabel = "Show less";
            _this.limit = 10;
            _this.state = {
                canRefine: false,
                canToggleShowMore: false,
                createURL: noop,
                isShowingMore: false,
                items: [],
                refine: noop,
                toggleShowMore: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisMenu.prototype, "showMoreClass", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var className = this.cx("showMore");
                if (!this.state.canToggleShowMore) {
                    className = className + " " + this.cx("showMore", "disabled");
                }
                return className;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisMenu.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return typeof this.transformItems === "function"
                    ? this.transformItems(this.state.items)
                    : this.state.items;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectMenu, {
                    limit: parseNumberInput(this.limit),
                    showMoreLimit: parseNumberInput(this.showMoreLimit),
                    attributeName: this.attribute,
                    sortBy: this.sortBy
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        NgAisMenu.prototype.handleClick = /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
            function (event, value) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(value);
            };
        NgAisMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-menu",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of items\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <span [class]=\"cx('label')\">{{item.label}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n\n      <button\n        *ngIf=\"showMoreLimit && state.canToggleShowMore\"\n        (click)=\"state.toggleShowMore()\"\n        [class]=\"showMoreClass\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisMenu.propDecorators = {
            showMoreLabel: [{ type: core.Input }],
            showLessLabel: [{ type: core.Input }],
            transformItems: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            showMoreLimit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }]
        };
        return NgAisMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisMenuModule = /** @class */ (function () {
        function NgAisMenuModule() {
        }
        NgAisMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisMenu],
                        entryComponents: [NgAisMenu],
                        exports: [NgAisMenu],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisNumericMenu = /** @class */ (function (_super) {
        __extends(NgAisNumericMenu, _super);
        function NgAisNumericMenu(instantSearchParent) {
            var _this = _super.call(this, "NumericMenu") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: noop,
                items: [],
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisNumericMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisNumericMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectNumericRefinementList, {
                    attributeName: this.attribute,
                    options: this.items
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisNumericMenu.prototype.refine = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(item.value);
            };
        NgAisNumericMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-numeric-menu",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"refine($event, item)\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('radio')\"\n              type=\"radio\"\n              name=\"NumericMenu\"\n              [checked]=\"item.isRefined\"\n            />\n            <span [class]=\"cx('labelText')\">{{item.label}}</span>\n          </label>\n        </li>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisNumericMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisNumericMenu.propDecorators = {
            attribute: [{ type: core.Input }],
            items: [{ type: core.Input }]
        };
        return NgAisNumericMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisNumericMenuModule = /** @class */ (function () {
        function NgAisNumericMenuModule() {
        }
        NgAisNumericMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisNumericMenu],
                        entryComponents: [NgAisNumericMenu],
                        exports: [NgAisNumericMenu],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisNumericMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisNumericSelector = /** @class */ (function (_super) {
        __extends(NgAisNumericSelector, _super);
        function NgAisNumericSelector(instantSearchParent) {
            var _this = _super.call(this, "NumericSelector") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.operator = "=";
            _this.state = {
                currentRefinement: null,
                options: [],
                refine: noop
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisNumericSelector.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectNumericSelector, {
                    attributeName: this.attribute,
                    operator: this.operator,
                    options: this.items
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisNumericSelector.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-numeric-selector",
                        template: "\n    <div [class]=\"cx('')\">\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.options\"\n          [value]=\"item.value\"\n          [selected]=\"item.value === state.currentRefinement\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisNumericSelector.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisNumericSelector.propDecorators = {
            attribute: [{ type: core.Input }],
            operator: [{ type: core.Input }],
            items: [{ type: core.Input }]
        };
        return NgAisNumericSelector;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisNumericSelectorModule = /** @class */ (function () {
        function NgAisNumericSelectorModule() {
        }
        NgAisNumericSelectorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisNumericSelector],
                        entryComponents: [NgAisNumericSelector],
                        exports: [NgAisNumericSelector],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisNumericSelectorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var range = require("lodash/range");
    var NgAisPagination = /** @class */ (function (_super) {
        __extends(NgAisPagination, _super);
        function NgAisPagination(instantSearchParent) {
            var _this = _super.call(this, "Pagination") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.showFirst = true;
            _this.showLast = false;
            _this.showPrevious = true;
            _this.showNext = true;
            _this.padding = 3;
            _this.state = {
                createURL: noop,
                currentRefinement: 0,
                nbHits: 0,
                nbPages: 0,
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisPagination.prototype, "pages", {
            get: /**
             * @return {?}
             */ function () {
                var _a = this.state, nbPages = _a.nbPages, currentRefinement = _a.currentRefinement;
                /** @type {?} */
                var pagesArray = Array.apply(null, { length: nbPages }).map(Number.call, Number);
                /** @type {?} */
                var pagesPadding = typeof this.padding === "string"
                    ? parseInt(this.padding, 10)
                    : this.padding;
                if (pagesPadding && pagesPadding > 0) {
                    // should not display pages that does not exists
                    if (nbPages < pagesPadding * 2 + 1) {
                        return pagesArray;
                    }
                    /** @type {?} */
                    var minDelta = currentRefinement - pagesPadding - 1;
                    /** @type {?} */
                    var maxDelta = currentRefinement + pagesPadding + 1;
                    if (minDelta < 0) {
                        return range(0, currentRefinement + pagesPadding + Math.abs(minDelta));
                    }
                    if (maxDelta > nbPages) {
                        return range(currentRefinement - pagesPadding - (maxDelta - nbPages), nbPages);
                    }
                    return range(currentRefinement - pagesPadding, currentRefinement + pagesPadding + 1);
                }
                return pagesArray;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisPagination.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectPagination, {
                    maxPages: parseNumberInput(this.totalPages)
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} page
         * @return {?}
         */
        NgAisPagination.prototype.refine = /**
         * @param {?} event
         * @param {?} page
         * @return {?}
         */
            function (event, page) {
                event.stopPropagation();
                event.preventDefault();
                if (page < 0 ||
                    page === this.state.currentRefinement ||
                    page >= this.state.nbPages) {
                    return;
                }
                this.state.refine(page);
            };
        NgAisPagination.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-pagination",
                        template: "\n    <div [class]=\"cx()\">\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngIf=\"showFirst\"\n          (click)=\"refine($event, 0)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'firstPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(0)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\u2039\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showPrevious\"\n          (click)=\"refine($event, state.currentRefinement - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'previousPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\n          </a>\n        </li>\n\n        <li\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'page') +\n            (state.currentRefinement === page ? ' ' + cx('item', 'selected') : '')\n          \"\n          *ngFor=\"let page of pages\"\n          (click)=\"refine($event, page)\"\n        >\n          <a\n            [class]=\"cx('link')\"\n            [href]=\"state.createURL(page)\"\n          >\n            {{page + 1}}\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showNext\"\n          (click)=\"refine($event, state.currentRefinement + 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'nextPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement + 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showLast\"\n          (click)=\"refine($event, state.nbPages - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'lastPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.nbPages - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\u203A\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisPagination.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisPagination.propDecorators = {
            showFirst: [{ type: core.Input }],
            showLast: [{ type: core.Input }],
            showPrevious: [{ type: core.Input }],
            showNext: [{ type: core.Input }],
            padding: [{ type: core.Input }],
            totalPages: [{ type: core.Input }]
        };
        return NgAisPagination;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisPaginationModule = /** @class */ (function () {
        function NgAisPaginationModule() {
        }
        NgAisPaginationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisPagination],
                        entryComponents: [NgAisPagination],
                        exports: [NgAisPagination],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisPaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRangeSlider = /** @class */ (function (_super) {
        __extends(NgAisRangeSlider, _super);
        function NgAisRangeSlider(instantSearchParent) {
            var _this = _super.call(this, "RangeSlider") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.pips = true;
            _this.tooltips = true;
            _this.precision = 2;
            _this.state = {
                range: { min: 0, max: 1 },
                refine: noop,
                start: [0, 1]
            };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering) {
                    /** @type {?} */
                    var config = {
                        animate: false,
                        behaviour: "snap",
                        connect: true,
                        range: { min: 0, max: 1 },
                        start: [0, 1],
                        step: _this.step,
                        tooltips: _this.tooltips && [
                            { to: _this.formatTooltip },
                            { to: _this.formatTooltip }
                        ]
                    };
                    if (_this.pips === true || typeof _this.pips === "undefined") {
                        Object.assign(config, {
                            pips: {
                                density: 3,
                                mode: "positions",
                                stepped: true,
                                values: [0, 50, 100]
                            }
                        });
                    }
                    else if (_this.pips !== undefined) {
                        Object.assign(config, { pips: _this.pips });
                    }
                    _this.slider = noUiSlider.create(_this.sliderContainer.nativeElement, config);
                    // register listen events
                    // register listen events
                    _this.sliderContainer.nativeElement.noUiSlider.on("change", _this.handleChange);
                }
                // update component inner state
                // update component inner state
                _this.state = state;
                var _a = state.range, min = _a.min, max = _a.max, start = state.start;
                /** @type {?} */
                var disabled = min === max;
                /** @type {?} */
                var range = disabled ? { min: min, max: max + 0.0001 } : { min: min, max: max };
                _this.slider.updateOptions({ disabled: disabled, range: range, start: start });
            };
            _this.handleChange = function (values) {
                _this.state.refine(values);
            };
            _this.formatTooltip = function (value) {
                return value.toFixed(parseNumberInput(_this.precision));
            };
            return _this;
        }
        Object.defineProperty(NgAisRangeSlider.prototype, "step", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var precision = parseNumberInput(this.precision) || 2;
                return 1 / Math.pow(10, precision);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRangeSlider.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRange, {
                    attributeName: this.attribute,
                    max: parseNumberInput(this.max),
                    min: parseNumberInput(this.min),
                    precision: parseNumberInput(this.precision)
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisRangeSlider.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-range-slider",
                        template: "\n    <div [class]=\"cx()\">\n      <div [class]=\"cx('body')\">\n        <div #sliderContainer></div>\n      </div>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisRangeSlider.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisRangeSlider.propDecorators = {
            sliderContainer: [{ type: core.ViewChild, args: ["sliderContainer",] }],
            pips: [{ type: core.Input }],
            tooltips: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            precision: [{ type: core.Input }]
        };
        return NgAisRangeSlider;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRangeSliderModule = /** @class */ (function () {
        function NgAisRangeSliderModule() {
        }
        NgAisRangeSliderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRangeSlider],
                        entryComponents: [NgAisRangeSlider],
                        exports: [NgAisRangeSlider],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisRangeSliderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRefinementList = /** @class */ (function (_super) {
        __extends(NgAisRefinementList, _super);
        function NgAisRefinementList(instantSearchParent) {
            var _this = _super.call(this, "RefinementList") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.showMoreLabel = "Show more";
            _this.showLessLabel = "Show less";
            _this.searchPlaceholder = "Search here...";
            _this.operator = "or";
            _this.limit = 10;
            _this.state = {
                canRefine: false,
                canToggleShowMore: false,
                createURL: noop,
                isShowingMore: false,
                items: [],
                refine: noop,
                toggleShowMore: noop,
                searchForItems: noop,
                isFormSearch: false
            };
            return _this;
        }
        Object.defineProperty(NgAisRefinementList.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisRefinementList.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return typeof this.transformItems === "function"
                    ? this.transformItems(this.state.items)
                    : this.state.items;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRefinementList.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRefinementList, {
                    limit: parseNumberInput(this.limit),
                    showMoreLimit: parseNumberInput(this.showMoreLimit),
                    attributeName: this.attribute,
                    sortBy: this.sortBy,
                    escapeFacetValues: true
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisRefinementList.prototype.refine = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                if (this.state.canRefine) {
                    // update UI directly, it will update the checkbox state
                    item.isRefined = !item.isRefined;
                    // refine through Algolia API
                    this.state.refine(item.value);
                }
            };
        NgAisRefinementList.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-refinement-list",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <div\n        *ngIf=\"searchable\"\n        [class]=\"cx('searchBox')\"\n      >\n        <ais-facets-search\n          [search]=\"state.searchForItems\"\n          [searchPlaceholder]=\"searchPlaceholder\"\n        >\n        </ais-facets-search>\n      </div>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of items\"\n          (click)=\"refine($event, item)\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('checkbox')\"\n              type=\"checkbox\"\n              value=\"{{item.value}}\"\n              [checked]=\"item.isRefined\"\n            />\n            <span [class]=\"cx('labelText')\">\n              <ais-highlight attribute=\"highlighted\" [hit]=\"item\"></ais-highlight>\n            </span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </label>\n        </li>\n      </ul>\n\n      <button\n        *ngIf=\"showMoreLimit && state.canToggleShowMore\"\n        (click)=\"state.toggleShowMore()\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisRefinementList.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisRefinementList.propDecorators = {
            showMoreLabel: [{ type: core.Input }],
            showLessLabel: [{ type: core.Input }],
            transformItems: [{ type: core.Input }],
            searchable: [{ type: core.Input }],
            searchPlaceholder: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            operator: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            showMoreLimit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }]
        };
        return NgAisRefinementList;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisFacetsSearch = /** @class */ (function () {
        function NgAisFacetsSearch() {
            this.cx = bem("SearchBox");
            this.searchQuery = "";
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NgAisFacetsSearch.prototype.handleChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.searchQuery = value;
                this.search(value);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisFacetsSearch.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.search(this.searchQuery);
            };
        NgAisFacetsSearch.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-facets-search",
                        template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{searchPlaceholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"searchQuery\"\n          (input)=\"handleChange($event.target.value)\"\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          title=\"Submit the search query.\"\n          type=\"submit\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"Clear the search query.\"\n          hidden\n        >\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n      </form>\n    </div>\n  "
                    },] },
        ];
        NgAisFacetsSearch.propDecorators = {
            searchPlaceholder: [{ type: core.Input }],
            search: [{ type: core.Input }]
        };
        return NgAisFacetsSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRefinementListModule = /** @class */ (function () {
        function NgAisRefinementListModule() {
        }
        NgAisRefinementListModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRefinementList, NgAisFacetsSearch],
                        entryComponents: [NgAisRefinementList],
                        exports: [NgAisRefinementList],
                        imports: [common.CommonModule, NgAisHighlightModule]
                    },] },
        ];
        return NgAisRefinementListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisSearchBox = /** @class */ (function (_super) {
        __extends(NgAisSearchBox, _super);
        function NgAisSearchBox(instantSearchParent) {
            var _this = _super.call(this, "SearchBox") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.placeholder = "Search";
            _this.submitTitle = "Submit";
            _this.resetTitle = "Reset";
            _this.searchAsYouType = true;
            // Output events
            // form
            _this.submit = new core.EventEmitter();
            _this.reset = new core.EventEmitter();
            // input
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            _this.blur = new core.EventEmitter();
            _this.state = {
                query: "",
                refine: noop
            };
            _this.createWidget(connectors.connectSearchBox);
            return _this;
        }
        /**
         * @param {?} query
         * @return {?}
         */
        NgAisSearchBox.prototype.handleChange = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                this.change.emit(query);
                if (this.searchAsYouType) {
                    this.state.refine(query);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisSearchBox.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // send submit event to parent component
                this.submit.emit(event);
                event.preventDefault();
                if (!this.searchAsYouType) {
                    this.state.refine(this.state.query);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisSearchBox.prototype.handleReset = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // send reset event to parent component
                this.reset.emit(event);
                // reset search
                this.state.refine("");
            };
        NgAisSearchBox.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-search-box",
                        template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        novalidate\n        (submit)=\"handleSubmit($event)\"\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{placeholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"state.query\"\n          (input)=\"handleChange($event.target.value)\"\n          (focus)=\"focus.emit($event)\"\n          (blur)=\"blur.emit($event)\"\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          type=\"submit\"\n          title=\"{{submitTitle}}\"\n          (click)=\"handleSubmit($event)\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"40\"\n            height=\"40\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"{{resetTitle}}\"\n          (click)=\"handleReset($event)\"\n          [hidden]=\"!state.query || (state.query && !state.query.trim())\">\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"20\"\n            height=\"20\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n      </form>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisSearchBox.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisSearchBox.propDecorators = {
            placeholder: [{ type: core.Input }],
            submitTitle: [{ type: core.Input }],
            resetTitle: [{ type: core.Input }],
            searchAsYouType: [{ type: core.Input }],
            submit: [{ type: core.Output }],
            reset: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            blur: [{ type: core.Output }]
        };
        return NgAisSearchBox;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisSearchBoxModule = /** @class */ (function () {
        function NgAisSearchBoxModule() {
        }
        NgAisSearchBoxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisSearchBox],
                        entryComponents: [NgAisSearchBox],
                        exports: [NgAisSearchBox],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisSearchBoxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisSortBy = /** @class */ (function (_super) {
        __extends(NgAisSortBy, _super);
        function NgAisSortBy(instantSearchParent) {
            var _this = _super.call(this, "SortBy") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                currentRefinement: null,
                options: [],
                refine: noop
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisSortBy.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectSortBySelector, { indices: this.items });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisSortBy.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-sort-by",
                        template: "\n    <div [class]=\"cx()\">\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.options\"\n          [value]=\"item.value\"\n          [selected]=\"item.value === state.currentRefinement\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisSortBy.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisSortBy.propDecorators = {
            items: [{ type: core.Input }]
        };
        return NgAisSortBy;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisSortByModule = /** @class */ (function () {
        function NgAisSortByModule() {
        }
        NgAisSortByModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisSortBy],
                        entryComponents: [NgAisSortBy],
                        exports: [NgAisSortBy],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisSortByModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRatingMenu = /** @class */ (function (_super) {
        __extends(NgAisRatingMenu, _super);
        function NgAisRatingMenu(instantSearchParent) {
            var _this = _super.call(this, "RatingMenu") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.andUpLabel = "& Up";
            _this.max = 5;
            _this.state = {
                createURL: noop,
                hasNoResults: false,
                items: [],
                refine: noop
            };
            return _this;
        }
        Object.defineProperty(NgAisRatingMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRatingMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectStarRating, {
                    attributeName: this.attribute,
                    max: this.max
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        NgAisRatingMenu.prototype.handleClick = /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
            function (event, value) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(value);
            };
        NgAisRatingMenu.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-rating-menu",
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <svg style=\"display:none;\">\n        <symbol\n          id=\"ais-StarRating-starSymbol\"\n          viewBox=\"0 0 24 24\"\n          width=\"24\"\n          height=\"24\"\n        >\n          <path d=\"M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z\"/>\n        </symbol>\n        <symbol\n          id=\"ais-StarRating-starEmptySymbol\"\n          viewBox=\"0 0 24 24\"\n          width=\"24\"\n          height=\"24\"\n        >\n          <path d=\"M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z\"/>\n        </symbol>\n      </svg>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of state.items\"\n          [class]=\"getItemClass(item)\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <svg\n              *ngFor=\"let star of item.stars\"\n              [ngClass]=\"cx('starIcon')\"\n              aria-hidden=\"true\"\n            >\n              <use\n                *ngIf=\"star\"\n                xlink:href=\"#ais-StarRating-starSymbol\"\n              >\n              </use>\n\n              <use\n                *ngIf=\"!star\"\n                xlink:href=\"#ais-StarRating-starEmptySymbol\"\n              >\n              </use>\n            </svg>\n\n            <span [class]=\"cx('label')\" aria-hidden=\"true\">{{andUpLabel}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisRatingMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisRatingMenu.propDecorators = {
            andUpLabel: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            max: [{ type: core.Input }]
        };
        return NgAisRatingMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRatingMenuModule = /** @class */ (function () {
        function NgAisRatingMenuModule() {
        }
        NgAisRatingMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRatingMenu],
                        entryComponents: [NgAisRatingMenu],
                        exports: [NgAisRatingMenu],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisRatingMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisStats = /** @class */ (function (_super) {
        __extends(NgAisStats, _super);
        function NgAisStats(instantSearchParent) {
            var _this = _super.call(this, "Stats") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                hitPerPage: 0,
                nbHits: 0,
                nbPages: 0,
                page: 0,
                processingTimeMS: 0,
                query: ""
            };
            _this.createWidget(connectors.connectStats);
            return _this;
        }
        Object.defineProperty(NgAisStats.prototype, "templateContext", {
            get: /**
             * @return {?}
             */ function () {
                return { state: this.state };
            },
            enumerable: true,
            configurable: true
        });
        NgAisStats.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-stats",
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: templateContext\">\n      </ng-container>\n\n      <span *ngIf=\"!template\" [class]=\"cx('text')\">\n        {{state.nbHits}} results found in {{state.processingTimeMS}}ms.\n      </span>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisStats.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisStats.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return NgAisStats;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisStatsModule = /** @class */ (function () {
        function NgAisStatsModule() {
        }
        NgAisStatsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisStats],
                        entryComponents: [NgAisStats],
                        exports: [NgAisStats],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisStatsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisToggle = /** @class */ (function (_super) {
        __extends(NgAisToggle, _super);
        function NgAisToggle(instantSearchParent) {
            var _this = _super.call(this, "ToggleRefinement") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.values = { on: true, off: undefined };
            _this.state = {
                createURL: noop,
                refine: noop,
                value: {}
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisToggle.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectToggle, {
                    attributeName: this.attribute,
                    label: this.label,
                    values: this.values
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisToggle.prototype.handleClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(this.state.value);
            };
        NgAisToggle.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-toggle",
                        template: "\n    <div [class]=\"cx()\">\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"cx('item')\"\n          (click)=\"handleClick($event)\">\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('checkbox')\"\n              type=\"checkbox\"\n              value=\"{{state.value.name}}\"\n              [checked]=\"state.value.isRefined\"\n            />\n\n            <span [class]=\"cx('labelText')\">\n              {{label || state.value.name}}\n            </span>\n\n            <span [class]=\"cx('count')\">{{state.value.count}}</span>\n          </label>\n        </li>\n      </ul>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisToggle.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisToggle.propDecorators = {
            attribute: [{ type: core.Input }],
            label: [{ type: core.Input }],
            values: [{ type: core.Input }]
        };
        return NgAisToggle;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisToggleModule = /** @class */ (function () {
        function NgAisToggleModule() {
        }
        NgAisToggleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisToggle],
                        entryComponents: [NgAisToggle],
                        exports: [NgAisToggle],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisToggleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRangeInput = /** @class */ (function (_super) {
        __extends(NgAisRangeInput, _super);
        function NgAisRangeInput(instantSearchParent) {
            var _this = _super.call(this, "RangeInput") || this;
            _this.instantSearchParent = instantSearchParent;
            // render options
            _this.currency = "$";
            _this.separator = "to";
            _this.submitLabel = "Go";
            _this.precision = 2;
            _this.minInputValue = "";
            _this.maxInputValue = "";
            _this.state = {
                range: { min: undefined, max: undefined },
                refine: noop,
                start: [0, 0]
            };
            return _this;
        }
        Object.defineProperty(NgAisRangeInput.prototype, "step", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var precision = parseNumberInput(this.precision) || 2;
                return 1 / Math.pow(10, precision);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRangeInput.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRange, {
                    attributeName: this.attribute,
                    max: parseNumberInput(this.max),
                    min: parseNumberInput(this.min),
                    precision: parseNumberInput(this.precision)
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} type
         * @return {?}
         */
        NgAisRangeInput.prototype.handleChange = /**
         * @param {?} event
         * @param {?} type
         * @return {?}
         */
            function (event, type) {
                /** @type {?} */
                var value = parseNumberInput(event.target.value);
                if (type === "min") {
                    this.minInputValue = value;
                }
                else {
                    this.maxInputValue = value;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisRangeInput.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.refine([this.minInputValue, this.maxInputValue]);
            };
        NgAisRangeInput.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-range-input",
                        template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [class]=\"cx('input', 'min')\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.min\"\n            [value]=\"minInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'min')\"\n          />\n        </label>\n\n        <span [class]=\"cx('separator')\">{{separator}}</span>\n\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [class]=\"cx('input', 'max')\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.max\"\n            [value]=\"maxInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'max')\"\n          />\n        </label>\n\n        <button\n          [class]=\"cx('submit')\"\n          (click)=\"handleSubmit($event)\"\n        >\n          {{submitLabel}}\n        </button>\n      </form>\n    </div>\n  "
                    },] },
        ];
        /** @nocollapse */
        NgAisRangeInput.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisRangeInput.propDecorators = {
            currency: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            submitLabel: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            precision: [{ type: core.Input }]
        };
        return NgAisRangeInput;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisRangeInputModule = /** @class */ (function () {
        function NgAisRangeInputModule() {
        }
        NgAisRangeInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRangeInput],
                        entryComponents: [NgAisRangeInput],
                        exports: [NgAisRangeInput],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisRangeInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisPanel = /** @class */ (function () {
        function NgAisPanel() {
        }
        NgAisPanel.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-panel",
                        template: "\n    <div class=\"ais-Panel\">\n      <div *ngIf=\"header\" class=\"ais-Panel-header\">\n        {{header}}\n      </div>\n\n      <div class=\"ais-Panel-body\">\n        <ng-content></ng-content>\n      </div>\n\n      <div *ngIf=\"footer\" class=\"ais-Panel-footer\">\n        {{footer}}\n      </div>\n    </div>\n  "
                    },] },
        ];
        NgAisPanel.propDecorators = {
            header: [{ type: core.Input }],
            footer: [{ type: core.Input }]
        };
        return NgAisPanel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisPanelModule = /** @class */ (function () {
        function NgAisPanelModule() {
        }
        NgAisPanelModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisPanel],
                        entryComponents: [NgAisPanel],
                        exports: [NgAisPanel],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisPanelModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisConfigure = /** @class */ (function (_super) {
        __extends(NgAisConfigure, _super);
        function NgAisConfigure(instantSearchParent) {
            var _this = _super.call(this, "Configure") || this;
            _this.instantSearchParent = instantSearchParent;
            _this.searchParameters = {};
            _this.state = {
                refine: noop
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisConfigure.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectConfigure, {
                    searchParameters: this.searchParameters
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgAisConfigure.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!changes["searchParameters"].isFirstChange) {
                    this.state.refine(changes["searchParameters"].currentValue);
                }
            };
        NgAisConfigure.decorators = [
            { type: core.Component, args: [{
                        selector: "ais-configure",
                        template: ""
                    },] },
        ];
        /** @nocollapse */
        NgAisConfigure.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
            ];
        };
        NgAisConfigure.propDecorators = {
            searchParameters: [{ type: core.Input }]
        };
        return NgAisConfigure;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAisConfigureModule = /** @class */ (function () {
        function NgAisConfigureModule() {
        }
        NgAisConfigureModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisConfigure],
                        entryComponents: [NgAisConfigure],
                        exports: [NgAisConfigure],
                        imports: [common.CommonModule]
                    },] },
        ];
        return NgAisConfigureModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var algoliasearch$1 = algoliasearchProxy$1__default || algoliasearchProxy$1;
    /** @type {?} */
    var encode = encodeProxy__default || encodeProxy;
    /**
     * @param {?} __0
     * @return {?}
     */
    function createSSRAlgoliaClient(_a) {
        var httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
        console.warn("`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.");
        return function (_, appId, apiKey) {
            return createSSRSearchClient({
                appId: appId,
                apiKey: apiKey,
                httpClient: httpClient,
                HttpHeaders: HttpHeaders,
                transferState: transferState,
                makeStateKey: makeStateKey
            });
        };
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    function createSSRSearchClient(_a) {
        var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;
        /** @type {?} */
        var client = algoliasearch$1(appId, apiKey, {});
        client.addAlgoliaAgent("angular-instantsearch " + VERSION);
        client._request = function (rawUrl, opts) {
            /** @type {?} */
            var headers = new HttpHeaders();
            headers = headers.set("content-type", opts.method === "POST"
                ? "application/x-www-form-urlencoded"
                : "application/json");
            headers = headers.set("accept", "application/json");
            /** @type {?} */
            var url = rawUrl + (rawUrl.includes("?") ? "&" : "?") + encode(opts.headers);
            /** @type {?} */
            var transferStateKey = makeStateKey("ngais(" + opts.body + ")");
            if (transferState.hasKey(transferStateKey)) {
                /** @type {?} */
                var resp = JSON.parse(transferState.get(transferStateKey, {}));
                return Promise.resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers
                });
            }
            return new Promise(function (resolve, reject) {
                httpClient
                    .request(opts.method, url, {
                    headers: headers,
                    body: opts.body,
                    observe: "response"
                })
                    .subscribe(function (resp) {
                    transferState.set(transferStateKey, JSON.stringify(resp));
                    resolve({
                        statusCode: resp.status,
                        body: resp.body,
                        headers: resp.headers
                    });
                }, function (resp) {
                    return reject({
                        statusCode: resp.status,
                        body: resp.body,
                        headers: resp.headers
                    });
                });
            });
        };
        return client;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} req
     * @return {?}
     */
    function parseServerRequest(req) {
        if (req && req.url && req.url.includes("?")) {
            /** @type {?} */
            var query = req.url.split("?")[1];
            return algoliasearchHelper.AlgoliaSearchHelper.getConfigurationFromQueryString(query);
        }
        return {};
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGIS_MODULES = [
        NgAisInstantSearchModule,
        NgAisHitsModule,
        NgAisSearchBoxModule,
        NgAisClearRefinementsModule,
        NgAisMenuModule,
        NgAisPaginationModule,
        NgAisRefinementListModule,
        NgAisHitsPerPageModule,
        NgAisSortByModule,
        NgAisNumericSelectorModule,
        NgAisNumericMenuModule,
        NgAisStatsModule,
        NgAisToggleModule,
        NgAisInfiniteHitsModule,
        NgAisCurrentRefinementsModule,
        NgAisHierarchicalMenuModule,
        NgAisRatingMenuModule,
        NgAisRangeSliderModule,
        NgAisBreadcrumbModule,
        NgAisHighlightModule,
        NgAisRangeInputModule,
        NgAisPanelModule,
        NgAisConfigureModule
    ];
    var NgAisRootModule = /** @class */ (function () {
        function NgAisRootModule() {
        }
        NgAisRootModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: NGIS_MODULES,
                        imports: [NgAisInstantSearchModule.forRoot()]
                    },] },
        ];
        return NgAisRootModule;
    }());
    var NgAisModule = /** @class */ (function () {
        function NgAisModule() {
        }
        /**
         * @return {?}
         */
        NgAisModule.forRoot = /**
         * @return {?}
         */
            function () {
                return { ngModule: NgAisRootModule };
            };
        NgAisModule.decorators = [
            { type: core.NgModule, args: [{ imports: NGIS_MODULES, exports: NGIS_MODULES },] },
        ];
        return NgAisModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.createSSRAlgoliaClient = createSSRAlgoliaClient;
    exports.createSSRSearchClient = createSSRSearchClient;
    exports.parseServerRequest = parseServerRequest;
    exports.BaseWidget = BaseWidget;
    exports.NgAisInstantSearch = NgAisInstantSearch;
    exports.NgAisRootModule = NgAisRootModule;
    exports.NgAisModule = NgAisModule;
    exports.ɵbo = NgAisBreadcrumb;
    exports.ɵbn = NgAisBreadcrumbModule;
    exports.ɵi = NgAisClearRefinements;
    exports.ɵh = NgAisClearRefinementsModule;
    exports.ɵbu = NgAisConfigure;
    exports.ɵbt = NgAisConfigureModule;
    exports.ɵbf = NgAisCurrentRefinements;
    exports.ɵbe = NgAisCurrentRefinementsModule;
    exports.ɵbh = NgAisHierarchicalMenu;
    exports.ɵbi = NgAisHierarchicalMenuItem;
    exports.ɵbg = NgAisHierarchicalMenuModule;
    exports.ɵe = NgAisHighlight;
    exports.ɵd = NgAisHighlightModule;
    exports.ɵr = NgAisHitsPerPage;
    exports.ɵq = NgAisHitsPerPageModule;
    exports.ɵc = NgAisHits;
    exports.ɵb = NgAisHitsModule;
    exports.ɵbd = NgAisInfiniteHits;
    exports.ɵbc = NgAisInfiniteHitsModule;
    exports.ɵa = NgAisInstantSearchModule;
    exports.ɵk = NgAisMenu;
    exports.ɵj = NgAisMenuModule;
    exports.ɵx = NgAisNumericMenu;
    exports.ɵw = NgAisNumericMenuModule;
    exports.ɵv = NgAisNumericSelector;
    exports.ɵu = NgAisNumericSelectorModule;
    exports.ɵm = NgAisPagination;
    exports.ɵl = NgAisPaginationModule;
    exports.ɵbs = NgAisPanel;
    exports.ɵbr = NgAisPanelModule;
    exports.ɵbq = NgAisRangeInput;
    exports.ɵbp = NgAisRangeInputModule;
    exports.ɵbm = NgAisRangeSlider;
    exports.ɵbl = NgAisRangeSliderModule;
    exports.ɵbk = NgAisRatingMenu;
    exports.ɵbj = NgAisRatingMenuModule;
    exports.ɵp = NgAisFacetsSearch;
    exports.ɵo = NgAisRefinementList;
    exports.ɵn = NgAisRefinementListModule;
    exports.ɵg = NgAisSearchBox;
    exports.ɵf = NgAisSearchBoxModule;
    exports.ɵt = NgAisSortBy;
    exports.ɵs = NgAisSortByModule;
    exports.ɵz = NgAisStats;
    exports.ɵy = NgAisStatsModule;
    exports.ɵbb = NgAisToggle;
    exports.ɵba = NgAisToggleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1pbnN0YW50c2VhcmNoLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbbnVsbCwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvdXRpbHMudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9iYXNlLXdpZGdldC50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3ZlcnNpb24udHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9icmVhZGNydW1iL2JyZWFkY3J1bWIudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9icmVhZGNydW1iL2JyZWFkY3J1bWIubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvY2xlYXItcmVmaW5lbWVudHMvY2xlYXItcmVmaW5lbWVudHMudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9jbGVhci1yZWZpbmVtZW50cy9jbGVhci1yZWZpbmVtZW50cy5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9jdXJyZW50LXJlZmluZW1lbnRzL2N1cnJlbnQtcmVmaW5lbWVudHMudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9jdXJyZW50LXJlZmluZW1lbnRzL2N1cnJlbnQtcmVmaW5lbWVudHMubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvaGllcmFyY2hpY2FsLW1lbnUvaGllcmFyY2hpY2FsLW1lbnUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9oaWVyYXJjaGljYWwtbWVudS9oaWVyYXJjaGljYWwtbWVudS1pdGVtLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvaGllcmFyY2hpY2FsLW1lbnUvaGllcmFyY2hpY2FsLW1lbnUubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvaGl0cy1wZXItcGFnZS9oaXRzLXBlci1wYWdlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvaGl0cy1wZXItcGFnZS9oaXRzLXBlci1wYWdlLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2hpZ2hsaWdodC9oaWdobGlnaHQudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9oaWdobGlnaHQvaGlnaGxpZ2h0Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2hpdHMvaGl0cy50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2hpdHMvaGl0cy5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9pbmZpbml0ZS1oaXRzL2luZmluaXRlLWhpdHMudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9pbmZpbml0ZS1oaXRzL2luZmluaXRlLWhpdHMubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL21lbnUvbWVudS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL21lbnUvbWVudS5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9udW1lcmljLW1lbnUvbnVtZXJpYy1tZW51LnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvbnVtZXJpYy1tZW51L251bWVyaWMtbWVudS5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9udW1lcmljLXNlbGVjdG9yL251bWVyaWMtc2VsZWN0b3IudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9udW1lcmljLXNlbGVjdG9yL251bWVyaWMtc2VsZWN0b3IubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3JhbmdlLXNsaWRlci9yYW5nZS1zbGlkZXIudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3JlZmluZW1lbnQtbGlzdC9yZWZpbmVtZW50LWxpc3QudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9yZWZpbmVtZW50LWxpc3QvZmFjZXRzLXNlYXJjaC50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3JlZmluZW1lbnQtbGlzdC9yZWZpbmVtZW50LWxpc3QubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvc2VhcmNoLWJveC9zZWFyY2gtYm94LnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvc2VhcmNoLWJveC9zZWFyY2gtYm94Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3NvcnQtYnkvc29ydC1ieS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3NvcnQtYnkvc29ydC1ieS5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9yYXRpbmctbWVudS9yYXRpbmctbWVudS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3JhdGluZy1tZW51L3JhdGluZy1tZW51Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3N0YXRzL3N0YXRzLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvc3RhdHMvc3RhdHMubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvdG9nZ2xlL3RvZ2dsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3RvZ2dsZS90b2dnbGUubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvcmFuZ2UtaW5wdXQvcmFuZ2UtaW5wdXQudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9yYW5nZS1pbnB1dC9yYW5nZS1pbnB1dC5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9wYW5lbC9wYW5lbC50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL3BhbmVsL3BhbmVsLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2NvbmZpZ3VyZS9jb25maWd1cmUudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9jb25maWd1cmUvY29uZmlndXJlLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2NyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiLCJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9wYXJzZS1zZXJ2ZXItcmVxdWVzdC50cyIsIm5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJlbSh3aWRnZXROYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgY3ggPSBmdW5jdGlvbihlbGVtZW50Pzogc3RyaW5nLCBzdWJFbGVtZW50Pzogc3RyaW5nKSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHNjb3BwZWRXaWRnZXROYW1lID0gYGFpcy0ke3dpZGdldE5hbWV9LSR7ZWxlbWVudH1gO1xuXG4gICAgICAvLyBvdXRwdXQgYGFpcy1XaWRnZXQtSGVhZGVyfEJvZHl8Rm9vdGVyIGFpcy1IZWFkZXJ8Qm9keXxGb290ZXJgXG4gICAgICBpZiAoZWxlbWVudCA9PT0gXCJoZWFkZXJcIiB8fCBlbGVtZW50ID09PSBcImJvZHlcIiB8fCBlbGVtZW50ID09PSBcImZvb3RlclwiKSB7XG4gICAgICAgIGNvbnN0IG5vblNjb3BwZWRXaWRnZXROYW1lID0gYGFpcy0ke2VsZW1lbnR9YDtcbiAgICAgICAgcmV0dXJuIGAke3Njb3BwZWRXaWRnZXROYW1lfSAke25vblNjb3BwZWRXaWRnZXROYW1lfWA7XG4gICAgICB9XG5cbiAgICAgIC8vIG91dHB1dCBgYWlzLVdpZGdldC1YeXotLWFiY2BcbiAgICAgIGlmIChzdWJFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBgJHtzY29wcGVkV2lkZ2V0TmFtZX0tLSR7c3ViRWxlbWVudH1gO1xuICAgICAgfVxuXG4gICAgICAvLyBvdXRwdXQgYGFpcy1XaWRnZXQtWHl6YFxuICAgICAgcmV0dXJuIHNjb3BwZWRXaWRnZXROYW1lO1xuICAgIH1cblxuICAgIC8vIG91dHB1dCBgYWlzLVdpZGdldGBcbiAgICByZXR1cm4gYGFpcy0ke3dpZGdldE5hbWV9YDtcbiAgfTtcbiAgcmV0dXJuIGN4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOdW1iZXJJbnB1dChpbnB1dD86IG51bWJlciB8IHN0cmluZykge1xuICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gcGFyc2VJbnQoaW5wdXQsIDEwKSA6IGlucHV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCguLi5hcmdzOiBhbnlbXSk6IHZvaWQge31cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG59XG4iLCJpbXBvcnQgeyBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IGJlbSwgbm9vcCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBXaWRnZXQge1xuICBwdWJsaWMgaW5pdDogKCkgPT4gdm9pZDtcbiAgcHVibGljIGdldENvbmZpZ3VyYXRpb246ICgpID0+IG9iamVjdDtcbiAgcHVibGljIHJlbmRlcjogKFxuICAgIHBhcmFtczoge1xuICAgICAgdGVtcGxhdGVzQ29uZmlnOiBvYmplY3Q7XG4gICAgICBzdGF0ZTogb2JqZWN0O1xuICAgICAgcmVzdWx0czoge31bXTtcbiAgICAgIGNyZWF0ZVVSTDogKHZhbHVlOiBhbnkpID0+IHN0cmluZztcbiAgICAgIGluc3RhbnRTZWFyY2hJbnN0YW5jZTogb2JqZWN0O1xuICAgIH1cbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgZGlzcG9zZTogKFxuICAgIHBhcmFtczoge1xuICAgICAgaGVscGVyOiBvYmplY3Q7XG4gICAgICBzdGF0ZTogb2JqZWN0O1xuICAgIH1cbiAgKSA9PiBvYmplY3QgfCB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBDb25uZWN0b3IgPSAoXG4gIHJlbmRlckZuOiAoc3RhdGU6IG9iamVjdCwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4gdm9pZCxcbiAgdW5tb3VudEZuOiAoKSA9PiB2b2lkXG4pID0+ICh3aWRnZXRPcHRpb25zPzogb2JqZWN0KSA9PiBXaWRnZXQ7XG5cbmV4cG9ydCBjbGFzcyBCYXNlV2lkZ2V0IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBhdXRvSGlkZUNvbnRhaW5lcj86IGJvb2xlYW47XG5cbiAgcHVibGljIHdpZGdldD86IFdpZGdldDtcbiAgcHVibGljIHN0YXRlPzogb2JqZWN0ID0ge307XG4gIHB1YmxpYyBjeDogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3Iod2lkZ2V0TmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jeCA9IGJlbSh3aWRnZXROYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVXaWRnZXQoY29ubmVjdG9yOiBDb25uZWN0b3IsIG9wdGlvbnM6IG9iamVjdCA9IHt9KSB7XG4gICAgdGhpcy53aWRnZXQgPSBjb25uZWN0b3IodGhpcy51cGRhdGVTdGF0ZSwgbm9vcCkob3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgLy8gYWRkIHdpZGdldCB0byB0aGUgSW5zdGFudFNlYXJjaCBJbnN0YW5jZVxuICAgIHRoaXMuaW5zdGFudFNlYXJjaFBhcmVudC5hZGRXaWRnZXQodGhpcy53aWRnZXQpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLmluc3RhbnRTZWFyY2hQYXJlbnQucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuaW5zdGFudFNlYXJjaFBhcmVudC5yZW1vdmVXaWRnZXQodGhpcy53aWRnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTdGF0ZSA9IChcbiAgICBzdGF0ZToge30sXG4gICAgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhblxuICApOiBQcm9taXNlPHZvaWQ+IHwgdm9pZCA9PiB7XG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICB9O1xuXG4gIC8vIGhlbHBlciBtZXRob2QgZm9yIGdlbmVyaW5nIGl0ZW0gbGlzdCBjbGFzc05hbWVcbiAgcHVibGljIGdldEl0ZW1DbGFzcyhpdGVtOiB7IGlzUmVmaW5lZD86IGJvb2xlYW4gfSkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmN4KFwiaXRlbVwiKTtcblxuICAgIGlmIChpdGVtLmlzUmVmaW5lZCkge1xuICAgICAgY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSAke3RoaXMuY3goXCJpdGVtXCIsIFwic2VsZWN0ZWRcIil9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMi4wLjNcIjtcbiIsImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5cbmltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tIFwiYWxnb2xpYXNlYXJjaC9saXRlXCI7XG5pbXBvcnQgaW5zdGFudHNlYXJjaCBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lc1wiO1xuXG5pbXBvcnQgeyBXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi4vdmVyc2lvblwiO1xuXG5jb25zdCBhbGdvbGlhc2VhcmNoID0gYWxnb2xpYXNlYXJjaFByb3h5LmRlZmF1bHQgfHwgYWxnb2xpYXNlYXJjaFByb3h5O1xuXG5leHBvcnQgdHlwZSBTZWFyY2hSZXF1ZXN0ID0ge1xuICBpbmRleE5hbWU6IHN0cmluZztcbiAgcGFyYW1zOiBTZWFyY2hSZXF1ZXN0UGFyYW1ldGVycztcbn07XG5cbmV4cG9ydCB0eXBlIFNlYXJjaEZvckZhY2V0VmFsdWVzUmVxdWVzdCA9IHtcbiAgaW5kZXhOYW1lOiBzdHJpbmc7XG4gIHBhcmFtczogU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0UGFyYW1ldGVycztcbn07XG5cbi8vIERvY3VtZW50YXRpb246IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9hcGktcmVmZXJlbmNlL3NlYXJjaC1hcGktcGFyYW1ldGVycy9cbmV4cG9ydCB0eXBlIFNlYXJjaFBhcmFtZXRlcnMgPSB7XG4gIC8vIEF0dHJpYnV0ZXNcbiAgYXR0cmlidXRlc1RvUmV0cmlldmU/OiBzdHJpbmdbXTtcbiAgcmVzdHJpY3RTZWFyY2hhYmxlQXR0cmlidXRlcz86IHN0cmluZ1tdO1xuXG4gIC8vIEZpbHRlcmluZ1xuICBmaWx0ZXJzPzogc3RyaW5nO1xuICBmYWNldEZpbHRlcnM/OiBzdHJpbmdbXTtcbiAgb3B0aW9uYWxGaWx0ZXJzPzogc3RyaW5nW107XG4gIG51bWVyaWNGaWx0ZXJzPzogc3RyaW5nW107XG4gIHN1bU9yRmlsdGVyc1Njb3Jlcz86IGJvb2xlYW47XG5cbiAgLy8gRmFjZXRpbmdcbiAgZmFjZXRzPzogc3RyaW5nW107XG4gIG1heFZhbHVlc1BlckZhY2V0PzogbnVtYmVyO1xuICBmYWNldGluZ0FmdGVyRGlzdGluY3Q/OiBib29sZWFuO1xuICBzb3J0RmFjZXRWYWx1ZXNCeT86IHN0cmluZztcblxuICAvLyBIaWdobGlnaHRpbmcgLyBTbmlwcGV0aW5nXG4gIGF0dHJpYnV0ZXNUb0hpZ2hsaWdodD86IHN0cmluZ1tdO1xuICBhdHRyaWJ1dGVzVG9TbmlwcGV0Pzogc3RyaW5nW107XG4gIGhpZ2hsaWdodFByZVRhZz86IHN0cmluZztcbiAgaGlnaGxpZ2h0UG9zdFRhZz86IHN0cmluZztcbiAgc25pcHBldEVsbGlwc2lzVGV4dD86IHN0cmluZztcbiAgcmVzdHJpY3RIaWdobGlnaHRBbmRTbmlwcGV0QXJyYXlzPzogYm9vbGVhbjtcblxuICAvLyBQYWdpbmF0aW9uXG4gIHBhZ2U/OiBudW1iZXI7XG4gIGhpdHNQZXJQYWdlPzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG4gIGxlbmd0aD86IG51bWJlcjtcblxuICAvLyBUeXBvc1xuICBtaW5Xb3JkU2l6ZWZvcjFUeXBvPzogbnVtYmVyO1xuICBtaW5Xb3JkU2l6ZWZvcjJUeXBvcz86IG51bWJlcjtcbiAgdHlwb1RvbGVyYW5jZT86IHN0cmluZyB8IGJvb2xlYW47XG4gIGFsbG93VHlwb3NPbk51bWVyaWNUb2tlbnM/OiBib29sZWFuO1xuICBpZ25vcmVQbHVyYWxzPzogYm9vbGVhbiB8IHN0cmluZ1tdO1xuICBkaXNhYmxlVHlwb1RvbGVyYW5jZU9uQXR0cmlidXRlcz86IHN0cmluZ1tdO1xuXG4gIC8vIEdlby1TZWFyY2hcbiAgYXJvdW5kTGF0TG5nPzogc3RyaW5nO1xuICBhcm91bmRMYXRMbmdWaWFJUD86IGJvb2xlYW47XG4gIGFyb3VuZFJhZGl1cz86IG51bWJlciB8IFwiYWxsXCI7XG4gIGFyb3VuZFByZWNpc2lvbj86IG51bWJlcjtcbiAgbWluaW11bUFyb3VuZFJhZGl1cz86IG51bWJlcjtcbiAgaW5zaWRlQm91bmRpbmdCb3g/OiBHZW9SZWN0YW5nbGUgfCBHZW9SZWN0YW5nbGVbXTtcbiAgaW5zaWRlUG9seWdvbj86IEdlb1BvbHlnb24gfCBHZW9Qb2x5Z29uW107XG5cbiAgLy8gUXVlcnkgU3RyYXRlZ3lcbiAgcXVlcnlUeXBlPzogc3RyaW5nO1xuICByZW1vdmVXb3Jkc0lmTm9SZXN1bHRzPzogc3RyaW5nO1xuICBhZHZhbmNlZFN5bnRheD86IGJvb2xlYW47XG4gIG9wdGlvbmFsV29yZHM/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgcmVtb3ZlU3RvcFdvcmRzPzogYm9vbGVhbiB8IHN0cmluZ1tdO1xuICBkaXNhYmxlRXhhY3RPbkF0dHJpYnV0ZXM/OiBzdHJpbmdbXTtcbiAgZXhhY3RPblNpbmdsZVdvcmRRdWVyeT86IHN0cmluZztcbiAgYWx0ZXJuYXRpdmVzQXNFeGFjdD86IHN0cmluZ1tdO1xuXG4gIC8vIFF1ZXJ5IFJ1bGVzXG4gIGVuYWJsZVJ1bGVzPzogYm9vbGVhbjtcbiAgcnVsZUNvbnRleHRzPzogc3RyaW5nW107XG5cbiAgLy8gQWR2YW5jZWRcbiAgbWluUHJveGltaXR5PzogbnVtYmVyO1xuICByZXNwb25zZUZpZWxkcz86IHN0cmluZ1tdO1xuICBtYXhGYWNldEhpdHM/OiBudW1iZXI7XG4gIHBlcmNlbnRpbGVDb21wdXRhdGlvbj86IGJvb2xlYW47XG4gIGRpc3RpbmN0PzogbnVtYmVyIHwgYm9vbGVhbjtcbiAgZ2V0UmFua2luZ0luZm8/OiBib29sZWFuO1xuICBjbGlja0FuYWx5dGljcz86IGJvb2xlYW47XG4gIGFuYWx5dGljcz86IGJvb2xlYW47XG4gIGFuYWx5dGljc1RhZ3M/OiBzdHJpbmdbXTtcbiAgc3lub255bXM/OiBib29sZWFuO1xuICByZXBsYWNlU3lub255bXNJbkhpZ2hsaWdodD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaFJlcXVlc3RQYXJhbWV0ZXJzIGV4dGVuZHMgU2VhcmNoUGFyYW1ldGVycyB7XG4gIHF1ZXJ5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0UGFyYW1ldGVyc1xuICBleHRlbmRzIFNlYXJjaFBhcmFtZXRlcnMge1xuICBmYWNldFF1ZXJ5OiBzdHJpbmc7XG4gIGZhY2V0TmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBHZW9SZWN0YW5nbGUgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbmV4cG9ydCB0eXBlIEdlb1BvbHlnb24gPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5cbi8vIERvY3VtZW50YXRpb246IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9yZXN0LWFwaS9zZWFyY2gvP2xhbmd1YWdlPWphdmFzY3JpcHQjc2VhcmNoLW11bHRpcGxlLWluZGV4ZXNcbmV4cG9ydCB0eXBlIFNlYXJjaFJlc3BvbnNlID0ge1xuICBoaXRzOiBIaXRbXTtcbiAgcGFnZT86IG51bWJlcjtcbiAgbmJIaXRzPzogbnVtYmVyO1xuICBuYlBhZ2VzPzogbnVtYmVyO1xuICBoaXRzUGVyUGFnZT86IG51bWJlcjtcbiAgcHJvY2Vzc2luZ1RpbWVNUz86IG51bWJlcjtcbiAgcXVlcnk/OiBzdHJpbmc7XG4gIHBhcmFtcz86IHN0cmluZztcbiAgaW5kZXg/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBIaXQgPSB7XG4gIF9oaWdobGlnaHRSZXN1bHQ/OiBvYmplY3Q7XG59O1xuXG4vLyBEb2N1bWVudGF0aW9uOiBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvcmVzdC1hcGkvc2VhcmNoLz9sYW5ndWFnZT1qYXZhc2NyaXB0I3NlYXJjaC1mb3ItZmFjZXQtdmFsdWVzXG5leHBvcnQgdHlwZSBTZWFyY2hGb3JGYWNldFZhbHVlc1Jlc3BvbnNlID0ge1xuICB2YWx1ZTogc3RyaW5nO1xuICBoaWdobGlnaHRlZD86IHN0cmluZztcbiAgY291bnQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBTZWFyY2hDbGllbnQgPSB7XG4gIHNlYXJjaDogKHJlcXVlc3RzOiBTZWFyY2hSZXF1ZXN0W10pID0+IFByb21pc2U8eyByZXN1bHRzOiBTZWFyY2hSZXNwb25zZVtdIH0+O1xuICBzZWFyY2hGb3JGYWNldFZhbHVlcz86IChcbiAgICByZXF1ZXN0czogU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0W11cbiAgKSA9PiBQcm9taXNlPHsgZmFjZXRIaXRzOiBTZWFyY2hGb3JGYWNldFZhbHVlc1Jlc3BvbnNlW10gfT47XG59O1xuXG5leHBvcnQgdHlwZSBJbnN0YW50U2VhcmNoQ29uZmlnID0ge1xuICBhcHBJZD86IHN0cmluZztcbiAgYXBpS2V5Pzogc3RyaW5nO1xuICBpbmRleE5hbWU6IHN0cmluZztcblxuICBudW1iZXJMb2NhbGU/OiBzdHJpbmc7XG4gIHNlYXJjaEZ1bmN0aW9uPzogKCkgPT4gdm9pZDtcbiAgY3JlYXRlQWxnb2xpYUNsaWVudD86IChcbiAgICBhbGdvbGlhc2VhcmNoOiBGdW5jdGlvbixcbiAgICBhcHBJZDogc3RyaW5nLFxuICAgIGFwaUtleTogc3RyaW5nXG4gICkgPT4gb2JqZWN0O1xuICBzZWFyY2hDbGllbnQ/OiBTZWFyY2hDbGllbnQ7XG4gIHNlYXJjaFBhcmFtZXRlcnM/OiBTZWFyY2hQYXJhbWV0ZXJzIHwgdm9pZDtcbiAgdXJsU3luYz86XG4gICAgfCBib29sZWFuXG4gICAgfCB7XG4gICAgICAgIG1hcHBpbmc/OiBvYmplY3Q7XG4gICAgICAgIHRocmVzaG9sZD86IG51bWJlcjtcbiAgICAgICAgdHJhY2tlZFBhcmFtZXRlcnM/OiBzdHJpbmdbXTtcbiAgICAgICAgdXNlSGFzaD86IGJvb2xlYW47XG4gICAgICAgIGdldEhpc3RvcnlTdGF0ZT86ICgpID0+IG9iamVjdDtcbiAgICAgIH07XG4gIHJvdXRpbmc/OlxuICAgIHwgYm9vbGVhblxuICAgIHwge1xuICAgICAgICBzdGF0ZU1hcHBpbmc/OiB7XG4gICAgICAgICAgc3RhdGVUb1JvdXRlKG9iamVjdCk6IG9iamVjdDtcbiAgICAgICAgICByb3V0ZVRvU3RhdGUob2JqZWN0KTogb2JqZWN0O1xuICAgICAgICB9O1xuICAgICAgfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBJbnN0YW50U2VhcmNoSW5zdGFuY2Uge1xuICBwdWJsaWMgc3RhcnQ6ICgpID0+IHZvaWQ7XG5cbiAgcHVibGljIGFkZFdpZGdldDogKHdpZGdldDogV2lkZ2V0KSA9PiB2b2lkO1xuICBwdWJsaWMgYWRkV2lkZ2V0czogKHdpZGdldHM6IFdpZGdldFtdKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyByZW1vdmVXaWRnZXQ6ICh3aWRnZXQ6IFdpZGdldCkgPT4gdm9pZDtcbiAgcHVibGljIHJlbW92ZVdpZGdldHM6ICh3aWRnZXRzOiBXaWRnZXRbXSkgPT4gdm9pZDtcblxuICAvLyBFdmVudEVtbWl0ZXJcbiAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcblxuICBwdWJsaWMgaGVscGVyOiB7XG4gICAgbGFzdFJlc3VsdHM6IE9iamVjdDtcbiAgICBzdGF0ZTogT2JqZWN0O1xuICB9O1xuXG4gIHB1YmxpYyByZWZyZXNoOiAoKSA9PiB2b2lkO1xuICBwdWJsaWMgZGlzcG9zZTogKCkgPT4gdm9pZDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1pbnN0YW50c2VhcmNoXCIsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNJbnN0YW50U2VhcmNoIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBwdWJsaWMgY29uZmlnOiBJbnN0YW50U2VhcmNoQ29uZmlnO1xuICBASW5wdXQoKSBwdWJsaWMgaW5zdGFuY2VOYW1lOiBzdHJpbmcgPSBcImRlZmF1bHRcIjtcblxuICBAT3V0cHV0KClcbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8eyByZXN1bHRzOiB7fTsgc3RhdGU6IHt9IH0+ID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gICAgcmVzdWx0czoge307XG4gICAgc3RhdGU6IHt9O1xuICB9PigpO1xuXG4gIHB1YmxpYyBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IEluc3RhbnRTZWFyY2hJbnN0YW5jZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCkge31cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVJbnN0YW50U2VhcmNoSW5zdGFuY2UodGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5zdGFydCgpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnJlbW92ZUxpc3RlbmVyKFwicmVuZGVyXCIsIHRoaXMub25SZW5kZXIpO1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVJbnN0YW50U2VhcmNoSW5zdGFuY2UoY29uZmlnOiBJbnN0YW50U2VhcmNoQ29uZmlnKSB7XG4gICAgLy8gYWRkIGRlZmF1bHQgc2VhcmNoUGFyYW1ldGVycyB3aXRoIGhpZ2hsaWdodGluZyBjb25maWdcbiAgICBpZiAoIWNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzKSBjb25maWcuc2VhcmNoUGFyYW1ldGVycyA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLnNlYXJjaFBhcmFtZXRlcnMsIHtcbiAgICAgIGhpZ2hsaWdodFByZVRhZzogXCJfX2Fpcy1oaWdobGlnaHRfX1wiLFxuICAgICAgaGlnaGxpZ2h0UG9zdFRhZzogXCJfXy9haXMtaGlnaGxpZ2h0X19cIlxuICAgIH0pO1xuXG4gICAgLy8gcmVtb3ZlIFVSTFN5bmMgd2lkZ2V0IGlmIG9uIFNTUlxuICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgaWYgKHR5cGVvZiBjb25maWcudXJsU3luYyAhPT0gXCJ1bmRlZmluZWRcIikgZGVsZXRlIGNvbmZpZy51cmxTeW5jO1xuICAgICAgaWYgKHR5cGVvZiBjb25maWcucm91dGluZyAhPT0gXCJ1bmRlZmluZWRcIikgZGVsZXRlIGNvbmZpZy5yb3V0aW5nO1xuICAgIH1cblxuICAgIC8vIGN1c3RvbSBhbGdvbGlhIGNsaWVudCBhZ2VudFxuICAgIGlmICghY29uZmlnLnNlYXJjaENsaWVudCAmJiAhY29uZmlnLmNyZWF0ZUFsZ29saWFDbGllbnQpIHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGFsZ29saWFzZWFyY2goY29uZmlnLmFwcElkLCBjb25maWcuYXBpS2V5KTtcbiAgICAgIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAke1ZFUlNJT059YCk7XG5cbiAgICAgIGNvbmZpZy5zZWFyY2hDbGllbnQgPSBjbGllbnQ7XG4gICAgICBjb25maWcuYXBwSWQgPSB1bmRlZmluZWQ7XG4gICAgICBjb25maWcuYXBpS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlID0gaW5zdGFudHNlYXJjaChjb25maWcpO1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLm9uKFwicmVuZGVyXCIsIHRoaXMub25SZW5kZXIpO1xuICB9XG5cbiAgcHVibGljIGFkZFdpZGdldCh3aWRnZXQ6IFdpZGdldCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLmFkZFdpZGdldCh3aWRnZXQpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZVdpZGdldCh3aWRnZXQ6IFdpZGdldCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnJlbW92ZVdpZGdldCh3aWRnZXQpO1xuICB9XG5cbiAgcHVibGljIHJlZnJlc2goKSB7XG4gICAgdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UucmVmcmVzaCgpO1xuICB9XG5cbiAgb25SZW5kZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh7XG4gICAgICByZXN1bHRzOiB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5oZWxwZXIubGFzdFJlc3VsdHMsXG4gICAgICBzdGF0ZTogdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UuaGVscGVyLnN0YXRlXG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgY29ubmVjdEJyZWFkY3J1bWIgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCB0eXBlIEJyZWFkY3J1bWJTdGF0ZSA9IHtcbiAgY3JlYXRlVVJMOiBGdW5jdGlvbjtcbiAgaXRlbXM6IEJyZWFkY3J1bWJJdGVtW107XG4gIHJlZmluZTogRnVuY3Rpb247XG59O1xuXG5leHBvcnQgdHlwZSBCcmVhZGNydW1iSXRlbSA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1icmVhZGNydW1iXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICA8bGlcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdpdGVtJywgaXRlbS5pc0xhc3QgPyAnc2VsZWN0ZWQnIDogdW5kZWZpbmVkKVwiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgaXRlbSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICpuZ0lmPVwiaXRlbS5zZXBhcmF0b3JcIlxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdzZXBhcmF0b3InKVwiXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgID5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnbGluaycpXCJcbiAgICAgICAgICAgIGhyZWY9XCJ7e3N0YXRlLmNyZWF0ZVVSTChpdGVtLnZhbHVlKX19XCJcbiAgICAgICAgICAgICpuZ0lmPVwiIWl0ZW0uaXNMYXN0XCJcbiAgICAgICAgICAgIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIGl0ZW0pXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7e2l0ZW0ubmFtZX19XG4gICAgICAgICAgPC9hPlxuXG4gICAgICAgICAgPHNwYW4gKm5nSWY9XCJpdGVtLmlzTGFzdFwiPlxuICAgICAgICAgICAge3tpdGVtLm5hbWV9fVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNCcmVhZGNydW1iIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGVzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcHVibGljIHJvb3RQYXRoPzogc3RyaW5nO1xuXG4gIGdldCBpc0hpZGRlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5tYXAoKGl0ZW0sIGlkeCkgPT4gKHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICBzZXBhcmF0b3I6IGlkeCAhPT0gMCxcbiAgICAgIGlzTGFzdDogaWR4ID09PSB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCAtIDFcbiAgICB9KSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGU6IEJyZWFkY3J1bWJTdGF0ZSA9IHtcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgaXRlbXM6IFtdLFxuICAgIHJlZmluZTogbm9vcFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoXCJCcmVhZGNydW1iXCIpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RCcmVhZGNydW1iLCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICByb290UGF0aDogdGhpcy5yb290UGF0aFxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCwgaXRlbTogQnJlYWRjcnVtYkl0ZW0pIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKGl0ZW0udmFsdWUpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVmaW5lKGl0ZW0udmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc0JyZWFkY3J1bWIgfSBmcm9tIFwiLi9icmVhZGNydW1iXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nQWlzQnJlYWRjcnVtYl0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzQnJlYWRjcnVtYl0sXG4gIGV4cG9ydHM6IFtOZ0Fpc0JyZWFkY3J1bWJdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0JyZWFkY3J1bWJNb2R1bGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBjb25uZWN0Q2xlYXJBbGwgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtY2xlYXItcmVmaW5lbWVudHNcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ2J1dHRvbicpICsgKCFzdGF0ZS5oYXNSZWZpbmVtZW50cyA/ICgnICcgKyBjeCgnYnV0dG9uJywgJ2Rpc2FibGVkJykpIDogJycpXCJcbiAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiIXN0YXRlLmhhc1JlZmluZW1lbnRzXCJcbiAgICAgID5cbiAgICAgICAge3tidXR0b25MYWJlbH19XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0NsZWFyUmVmaW5lbWVudHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KCkgcHVibGljIGJ1dHRvbkxhYmVsOiBzdHJpbmcgPSBcIkNsZWFyIHJlZmluZW1lbnRzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGVhcnNRdWVyeTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgZXhjbHVkZUF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgcHVibGljIHN0YXRlID0ge1xuICAgIGhhc1JlZmluZW1lbnRzOiBmYWxzZSxcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLmhhc1JlZmluZW1lbnRzICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiQ2xlYXJSZWZpbmVtZW50c1wiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGBjcmVhdGVXaWRnZXRgIGZyb20gYG5nT25Jbml0YCB0byBoYXZlIGBASW5wdXQoKWAgaW50aWFsaXplZFxuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RDbGVhckFsbCwge1xuICAgICAgY2xlYXJzUXVlcnk6IHRoaXMuY2xlYXJzUXVlcnksXG4gICAgICBleGNsdWRlQXR0cmlidXRlczogdGhpcy5leGNsdWRlQXR0cmlidXRlc1xuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5oYXNSZWZpbmVtZW50cykge1xuICAgICAgdGhpcy5zdGF0ZS5yZWZpbmUoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNDbGVhclJlZmluZW1lbnRzIH0gZnJvbSBcIi4vY2xlYXItcmVmaW5lbWVudHNcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNDbGVhclJlZmluZW1lbnRzXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNDbGVhclJlZmluZW1lbnRzXSxcbiAgZXhwb3J0czogW05nQWlzQ2xlYXJSZWZpbmVtZW50c10sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzQ2xlYXJSZWZpbmVtZW50c01vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdEN1cnJlbnRSZWZpbmVkVmFsdWVzIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgbm9vcCwgY2FwaXRhbGl6ZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBDdXJyZW50UmVmaW5lbWVudHNTdGF0ZSA9IHtcbiAgYXR0cmlidXRlczoge307XG4gIGNsZWFyQWxsQ2xpY2s6IEZ1bmN0aW9uO1xuICBjbGVhckFsbFVSTDogRnVuY3Rpb247XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIHJlZmluZTogRnVuY3Rpb247XG4gIHJlZmluZW1lbnRzOiB7fVtdO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1jdXJyZW50LXJlZmluZW1lbnRzXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgW2NsYXNzXT1cImN4KCdyZXNldCcpXCJcbiAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsZWFyQWxsQ2xpY2soJGV2ZW50KVwiXG4gICAgICAgICpuZ0lmPVwiY2xlYXJSZWZpbmVtZW50cyA9PT0gJ2JlZm9yZScgfHwgY2xlYXJSZWZpbmVtZW50cyA9PT0gdHJ1ZVwiPlxuICAgICAgICB7e2NsZWFyUmVmaW5lbWVudHNMYWJlbH19XG4gICAgICA8L2J1dHRvbj5cblxuICAgICAgPHVsXG4gICAgICAgIFtjbGFzc109XCJjeCgnbGlzdCcpXCJcbiAgICAgICAgKm5nRm9yPVwibGV0IHJlZmluZW1lbnQgb2YgcmVmaW5lbWVudHNcIlxuICAgICAgPlxuICAgICAgICA8bGkgW2NsYXNzXT1cImN4KCdpdGVtJylcIj5cbiAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj57e3JlZmluZW1lbnQubGFiZWx9fTo8L3NwYW4+XG5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdjYXRlZ29yeScpXCJcbiAgICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHJlZmluZW1lbnQuaXRlbXNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY2F0ZWdvcnlMYWJlbCcpXCI+e3tpdGVtLm5hbWV9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxidXR0b24gW2NsYXNzXT1cImN4KCdkZWxldGUnKVwiIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIGl0ZW0pXCI+w6LCnMKVPC9idXR0b24+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ3Jlc2V0JylcIlxuICAgICAgICAoY2xpY2spPVwiaGFuZGxlQ2xlYXJBbGxDbGljaygkZXZlbnQpXCJcbiAgICAgICAgKm5nSWY9XCJjbGVhclJlZmluZW1lbnRzID09PSAnYWZ0ZXInXCI+XG4gICAgICAgIHt7Y2xlYXJSZWZpbmVtZW50c0xhYmVsfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzQ3VycmVudFJlZmluZW1lbnRzIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBjbGVhclJlZmluZW1lbnRzOiBcImJlZm9yZVwiIHwgXCJhZnRlclwiIHwgYm9vbGVhbiA9IFwiYWZ0ZXJcIjtcbiAgQElucHV0KCkgcHVibGljIGNsZWFyUmVmaW5lbWVudHNMYWJlbDogc3RyaW5nID0gXCJDbGVhciByZWZpbmVtZW50c1wiO1xuICBASW5wdXQoKSBwdWJsaWMgdHJhbnNmb3JtSXRlbXM/OiBGdW5jdGlvbjtcblxuICAvLyBjb25uZWN0b3Igb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgb25seUxpc3RlZEF0dHJpYnV0ZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIGNsZWFyc1F1ZXJ5OiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBhdHRyaWJ1dGVzOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gIH1bXSA9IFtdO1xuXG4gIHB1YmxpYyBzdGF0ZTogQ3VycmVudFJlZmluZW1lbnRzU3RhdGUgPSB7XG4gICAgYXR0cmlidXRlczoge30sXG4gICAgY2xlYXJBbGxDbGljazogbm9vcCxcbiAgICBjbGVhckFsbFVSTDogbm9vcCxcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHJlZmluZW1lbnRzOiBbXVxuICB9O1xuXG4gIGdldCBpc0hpZGRlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5yZWZpbmVtZW50cy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldCByZWZpbmVtZW50cygpIHtcbiAgICBjb25zdCBpdGVtcyA9XG4gICAgICB0eXBlb2YgdGhpcy50cmFuc2Zvcm1JdGVtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gdGhpcy50cmFuc2Zvcm1JdGVtcyh0aGlzLnN0YXRlLnJlZmluZW1lbnRzKVxuICAgICAgICA6IHRoaXMuc3RhdGUucmVmaW5lbWVudHM7XG5cbiAgICAvLyBncm91cCByZWZpbmVtZW50cyBieSBjYXRlZ29yeT8gKGF0dHJpYnV0ZU5hbWUgJiYgdHlwZSlcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKChyZXMsIHsgdHlwZSwgYXR0cmlidXRlTmFtZSwgLi4ucmVmaW5lbWVudCB9KSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IHJlcy5maW5kKFxuICAgICAgICByID0+IHIuYXR0cmlidXRlTmFtZSA9PT0gYXR0cmlidXRlTmFtZSAmJiByLnR5cGUgPT09IHR5cGVcbiAgICAgICk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaXRlbXMucHVzaCh7IHR5cGUsIGF0dHJpYnV0ZU5hbWUsIC4uLnJlZmluZW1lbnQgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIGxhYmVsOiBjYXBpdGFsaXplKGF0dHJpYnV0ZU5hbWUpLFxuICAgICAgICAgIGl0ZW1zOiBbeyB0eXBlLCBhdHRyaWJ1dGVOYW1lLCAuLi5yZWZpbmVtZW50IH1dXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCBbXSk7XG4gIH1cblxuICBnZXQganNvbigpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yZWZpbmVtZW50cywgbnVsbCwgNCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiQ3VycmVudFJlZmluZW1lbnRzXCIpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RDdXJyZW50UmVmaW5lZFZhbHVlcywge1xuICAgICAgYXR0cmlidXRlczogdGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgY2xlYXJzUXVlcnk6IHRoaXMuY2xlYXJzUXVlcnksXG4gICAgICBvbmx5TGlzdGVkQXR0cmlidXRlczogdGhpcy5vbmx5TGlzdGVkQXR0cmlidXRlc1xuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIHJlZmluZW1lbnQ6IHt9KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLnJlZmluZShyZWZpbmVtZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGVhckFsbENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLmNsZWFyQWxsQ2xpY2soKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc0N1cnJlbnRSZWZpbmVtZW50cyB9IGZyb20gXCIuL2N1cnJlbnQtcmVmaW5lbWVudHNcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNDdXJyZW50UmVmaW5lbWVudHNdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtOZ0Fpc0N1cnJlbnRSZWZpbmVtZW50c10sXG4gIGV4cG9ydHM6IFtOZ0Fpc0N1cnJlbnRSZWZpbmVtZW50c10sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzQ3VycmVudFJlZmluZW1lbnRzTW9kdWxlIHt9XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0SGllcmFyY2hpY2FsTWVudSB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IHBhcnNlTnVtYmVySW5wdXQsIG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsTWVudVN0YXRlID0ge1xuICBjcmVhdGVVUkw6IEZ1bmN0aW9uO1xuICBpdGVtczoge31bXTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtaGllcmFyY2hpY2FsLW1lbnVcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpICsgJyAnICsgY3goJ2xpc3QnLCAnbHZsMCcpXCI+XG4gICAgICAgIDxhaXMtaGllcmFyY2hpY2FsLW1lbnUtaXRlbVxuICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCJcbiAgICAgICAgICBbaXRlbV09XCJpdGVtXCJcbiAgICAgICAgICBbY3JlYXRlVVJMXT1cInN0YXRlLmNyZWF0ZVVSTFwiXG4gICAgICAgICAgW3JlZmluZV09XCJzdGF0ZS5yZWZpbmVcIlxuICAgICAgICA+XG4gICAgICAgIDwvYWlzLWhpZXJhcmNoaWNhbC1tZW51LWl0ZW0+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGllcmFyY2hpY2FsTWVudSBleHRlbmRzIEJhc2VXaWRnZXQge1xuICAvLyByZW5kZXIgb3B0aW9uXG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IEZ1bmN0aW9uO1xuXG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGVzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcHVibGljIHNlcGFyYXRvcj86IHN0cmluZyA9IFwiID4gXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyByb290UGF0aD86IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNob3dQYXJlbnRMZXZlbD86IGJvb2xlYW47XG4gIEBJbnB1dCgpIHB1YmxpYyBsaW1pdD86IG51bWJlciB8IHN0cmluZyA9IDEwO1xuICBASW5wdXQoKSBwdWJsaWMgc29ydEJ5Pzogc3RyaW5nW10gfCAoKGl0ZW06IG9iamVjdCkgPT4gbnVtYmVyKTtcblxuICBwdWJsaWMgc3RhdGU6IEhpZXJhcmNoaWNhbE1lbnVTdGF0ZSA9IHtcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgaXRlbXM6IFtdLFxuICAgIHJlZmluZTogbm9vcFxuICB9O1xuXG4gIGdldCBpc0hpZGRlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMudHJhbnNmb3JtSXRlbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0aGlzLnRyYW5zZm9ybUl0ZW1zKHRoaXMuc3RhdGUuaXRlbXMpXG4gICAgICA6IHRoaXMuc3RhdGUuaXRlbXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiSGllcmFyY2hpY2FsTWVudVwiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0SGllcmFyY2hpY2FsTWVudSwge1xuICAgICAgbGltaXQ6IHBhcnNlTnVtYmVySW5wdXQodGhpcy5saW1pdCksXG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICByb290UGF0aDogdGhpcy5yb290UGF0aCxcbiAgICAgIHNlcGFyYXRvcjogdGhpcy5zZXBhcmF0b3IsXG4gICAgICBzaG93UGFyZW50TGV2ZWw6IHRoaXMuc2hvd1BhcmVudExldmVsLFxuICAgICAgc29ydEJ5OiB0aGlzLnNvcnRCeVxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBiZW0gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsTWVudUl0ZW0gPSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGNvdW50OiBudW1iZXI7XG4gIGlzUmVmaW5lZDogYm9vbGVhbjtcbiAgZGF0YTogSGllcmFyY2hpY2FsTWVudUl0ZW1bXTtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtaGllcmFyY2hpY2FsLW1lbnUtaXRlbVwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxsaVxuICAgICAgW2NsYXNzXT1cImdldEl0ZW1DbGFzcyhpdGVtKVwiXG4gICAgICAoY2xpY2spPVwiaGFuZGxlQ2xpY2soJGV2ZW50LCBpdGVtKVwiXG4gICAgPlxuICAgICAgPGFcbiAgICAgICAgW2NsYXNzXT1cImN4KCdsaW5rJylcIlxuICAgICAgICBocmVmPVwie3tjcmVhdGVVUkwoaXRlbS52YWx1ZSl9fVwiXG4gICAgICAgIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIGl0ZW0pXCJcbiAgICAgID5cbiAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdsYWJlbCcpXCI+e3tpdGVtLmxhYmVsfX08L3NwYW4+XG4gICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY291bnQnKVwiPnt7aXRlbS5jb3VudH19PC9zcGFuPlxuICAgICAgPC9hPlxuXG4gICAgICA8dWxcbiAgICAgICAgW2NsYXNzXT1cImdldExpc3RDbGFzcyhpdGVtKVwiXG4gICAgICAgICpuZ0lmPVwiaXRlbS5pc1JlZmluZWQgJiYgaXNBcnJheShpdGVtLmRhdGEpICYmIGl0ZW0uZGF0YS5sZW5ndGggPiAwXCJcbiAgICAgID5cbiAgICAgICAgPGFpcy1oaWVyYXJjaGljYWwtbWVudS1pdGVtXG4gICAgICAgICAgKm5nRm9yPVwibGV0IGNoaWxkIG9mIGl0ZW0uZGF0YVwiXG4gICAgICAgICAgW2l0ZW1dPVwiY2hpbGRcIlxuICAgICAgICAgIFtjcmVhdGVVUkxdPVwiY3JlYXRlVVJMXCJcbiAgICAgICAgICBbcmVmaW5lXT1cInJlZmluZVwiXG4gICAgICAgICAgW2x2bF09XCJsdmwgKyAxXCJcbiAgICAgICAgPlxuICAgICAgICA8L2Fpcy1oaWVyYXJjaGljYWwtbWVudS1pdGVtPlxuICAgICAgPC91bD5cbiAgICA8L2xpPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGllcmFyY2hpY2FsTWVudUl0ZW0ge1xuICBASW5wdXQoKSBwdWJsaWMgbHZsOiBudW1iZXIgPSAxO1xuICBASW5wdXQoKSBwdWJsaWMgcmVmaW5lOiAoc3RyaW5nKSA9PiB2b2lkO1xuICBASW5wdXQoKSBwdWJsaWMgY3JlYXRlVVJMOiAoc3RyaW5nKSA9PiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpdGVtOiBIaWVyYXJjaGljYWxNZW51SXRlbTtcblxuICBwdWJsaWMgY3ggPSBiZW0oXCJIaWVyYXJjaGljYWxNZW51XCIpO1xuXG4gIHB1YmxpYyBnZXRJdGVtQ2xhc3MoaXRlbSkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmN4KFwiaXRlbVwiKTtcblxuICAgIGlmIChpdGVtLmlzUmVmaW5lZCkge1xuICAgICAgY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSAke3RoaXMuY3goXCJpdGVtXCIsIFwic2VsZWN0ZWRcIil9YDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0FycmF5KGl0ZW0uZGF0YSkgJiYgaXRlbS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gJHt0aGlzLmN4KFwiaXRlbVwiLCBcInBhcmVudFwiKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGlzdENsYXNzKGl0ZW0pIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jeChcImxpc3RcIil9ICR7dGhpcy5jeChcImxpc3RcIiwgXCJjaGlsZFwiKX0gJHt0aGlzLmN4KFxuICAgICAgXCJsaXN0XCIsXG4gICAgICBcImx2bFwiICsgdGhpcy5sdmxcbiAgICApfWA7XG4gIH1cblxuICBwdWJsaWMgaXNBcnJheShwb3RlbnRpYWxBcnJheTogYW55KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocG90ZW50aWFsQXJyYXkpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCBpdGVtOiBIaWVyYXJjaGljYWxNZW51SXRlbSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnJlZmluZShpdGVtLnZhbHVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc0hpZXJhcmNoaWNhbE1lbnUgfSBmcm9tIFwiLi9oaWVyYXJjaGljYWwtbWVudVwiO1xuaW1wb3J0IHsgTmdBaXNIaWVyYXJjaGljYWxNZW51SXRlbSB9IGZyb20gXCIuL2hpZXJhcmNoaWNhbC1tZW51LWl0ZW1cIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNIaWVyYXJjaGljYWxNZW51LCBOZ0Fpc0hpZXJhcmNoaWNhbE1lbnVJdGVtXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNIaWVyYXJjaGljYWxNZW51XSxcbiAgZXhwb3J0czogW05nQWlzSGllcmFyY2hpY2FsTWVudV0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGllcmFyY2hpY2FsTWVudU1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdEhpdHNQZXJQYWdlIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBSZXN1bHRzUGVyUGFnZVN0YXRlID0ge1xuICBpdGVtczoge31bXTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtaGl0cy1wZXItcGFnZVwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXZcbiAgICAgIFtjbGFzc109XCJjeCgpXCJcbiAgICAgICpuZ0lmPVwiIWlzSGlkZGVuXCJcbiAgICA+XG4gICAgICA8c2VsZWN0XG4gICAgICAgIFtjbGFzc109XCJjeCgnc2VsZWN0JylcIlxuICAgICAgICAoY2hhbmdlKT1cInN0YXRlLnJlZmluZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICA+XG4gICAgICAgIDxvcHRpb25cbiAgICAgICAgICBbY2xhc3NdPVwiY3goJ29wdGlvbicpXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtc1wiXG4gICAgICAgICAgW3ZhbHVlXT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgIFtzZWxlY3RlZF09XCJpdGVtLmlzUmVmaW5lZFwiXG4gICAgICAgID5cbiAgICAgICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgICAgICA8L29wdGlvbj5cbiAgICAgIDwvc2VsZWN0PlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGl0c1BlclBhZ2UgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KClcbiAgcHVibGljIGl0ZW1zOiB7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGRlZmF1bHQ/OiBib29sZWFuO1xuICB9W107XG5cbiAgcHVibGljIHN0YXRlOiBSZXN1bHRzUGVyUGFnZVN0YXRlID0ge1xuICAgIGl0ZW1zOiBbXSxcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiSGl0c1BlclBhZ2VcIik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEhpdHNQZXJQYWdlLCB7IGl0ZW1zOiB0aGlzLml0ZW1zIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNIaXRzUGVyUGFnZSB9IGZyb20gXCIuL2hpdHMtcGVyLXBhZ2VcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNIaXRzUGVyUGFnZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzSGl0c1BlclBhZ2VdLFxuICBleHBvcnRzOiBbTmdBaXNIaXRzUGVyUGFnZV0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGl0c1BlclBhZ2VNb2R1bGUge31cbiIsImNvbnN0IGdldCA9IHJlcXVpcmUoXCJsb2Rhc2gvZ2V0XCIpO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBiZW0gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1oaWdobGlnaHRcIixcbiAgdGVtcGxhdGU6IGA8c3BhbiBbY2xhc3NdPVwiY3goKVwiIFtpbm5lckh0bWxdPVwiY29udGVudFwiPjwvc3Bhbj5gXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGlnaGxpZ2h0IHtcbiAgQElucHV0KCkgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhpdDogeyBfaGlnaGxpZ2h0UmVzdWx0Pzoge307IGxhYmVsPzogc3RyaW5nOyBoaWdobGlnaHRlZD86IHN0cmluZyB9O1xuICBASW5wdXQoKSB0YWdOYW1lOiBzdHJpbmcgPSBcImVtXCI7XG5cbiAgY3ggPSBiZW0oXCJIaWdobGlnaHRcIik7XG5cbiAgZ2V0IGNvbnRlbnQoKSB7XG4gICAgaWYgKHRoaXMuYXR0cmlidXRlID09PSBcImhpZ2hsaWdodGVkXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLmhpdC5oaWdobGlnaHRlZFxuICAgICAgICA/IHRoaXMucmVwbGFjZVdpdGhUYWdOYW1lKHRoaXMuaGl0LmhpZ2hsaWdodGVkKVxuICAgICAgICA6IHRoaXMuaGl0LmxhYmVsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhpdC5oYXNPd25Qcm9wZXJ0eShcIl9oaWdobGlnaHRSZXN1bHRcIikpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUhpZ2hsaWdodGVkID0gZ2V0KFxuICAgICAgICB0aGlzLmhpdC5faGlnaGxpZ2h0UmVzdWx0LFxuICAgICAgICB0aGlzLmF0dHJpYnV0ZVxuICAgICAgKTtcblxuICAgICAgLy8gY2hlY2sgdGhhdCB0aGUgYXR0cmlidXRlSGlnaGxpZ2h0ZWQgaXMgYSBzdHJpbmdcbiAgICAgIGlmIChcbiAgICAgICAgYXR0cmlidXRlSGlnaGxpZ2h0ZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0eXBlb2YgYXR0cmlidXRlSGlnaGxpZ2h0ZWQudmFsdWUgPT09IFwic3RyaW5nXCJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlV2l0aFRhZ05hbWUoYXR0cmlidXRlSGlnaGxpZ2h0ZWQudmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGZhbGxiYWNrID0gZ2V0KHRoaXMuaGl0LCB0aGlzLmF0dHJpYnV0ZSk7XG4gICAgaWYgKCFmYWxsYmFjaykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgQ291bGQgbm90IGZpbmQgYXR0cmlidXRlIFske1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlXG4gICAgICAgIH1dIGludG8gaGl0IG9iamVjdCwgd2lsbCBkaXNwbGF5IGFuIGVtcHR5IHN0cmluZy5gXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cblxuICByZXBsYWNlV2l0aFRhZ05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnJlcGxhY2UoXG4gICAgICAgIG5ldyBSZWdFeHAoXCI8ZW0+XCIsIFwiZ1wiKSxcbiAgICAgICAgYDwke3RoaXMudGFnTmFtZX0gY2xhc3M9XCIke3RoaXMuY3goXCJoaWdobGlnaHRlZFwiKX1cIj5gXG4gICAgICApXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKFwiPC9lbT5cIiwgXCJnXCIpLCBgPC8ke3RoaXMudGFnTmFtZX0+YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNIaWdobGlnaHQgfSBmcm9tIFwiLi9oaWdobGlnaHRcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNIaWdobGlnaHRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtOZ0Fpc0hpZ2hsaWdodF0sXG4gIGV4cG9ydHM6IFtOZ0Fpc0hpZ2hsaWdodF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGlnaGxpZ2h0TW9kdWxlIHt9XG4iLCJpbXBvcnQge1xuICBJbmplY3QsXG4gIElucHV0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdEhpdHMgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtaGl0c1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogc3RhdGVcIj48L25nLWNvbnRhaW5lcj5cblxuICAgICAgPCEtLSBkZWZhdWx0IHJlbmRlcmluZyBpZiBubyB0ZW1wbGF0ZSBzcGVjaWZpZWQgLS0+XG4gICAgICA8ZGl2ICpuZ0lmPVwiIXRlbXBsYXRlXCI+XG4gICAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdpdGVtJylcIlxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGhpdCBvZiBzdGF0ZS5oaXRzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8YWlzLWhpZ2hsaWdodCBhdHRyaWJ1dGU9XCJuYW1lXCIgW2hpdF09XCJoaXRcIj5cbiAgICAgICAgICAgIDwvYWlzLWhpZ2hsaWdodD5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNIaXRzIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpIHB1YmxpYyB0ZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgLy8gcmVuZGVyIG9wdGlvbnNcbiAgQElucHV0KCkgdHJhbnNmb3JtSXRlbXM/OiBGdW5jdGlvbjtcblxuICAvLyBpbm5lciB3aWRnZXQgc3RhdGUgcmV0dXJuZWQgZnJvbSBjb25uZWN0b3JcbiAgcHVibGljIHN0YXRlOiB7IGhpdHM6IHt9W107IHJlc3VsdHM6IHt9IH0gPSB7IGhpdHM6IFtdLCByZXN1bHRzOiB7fSB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoXCJIaXRzXCIpO1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RIaXRzLCB7IGVzY2FwZUhpdHM6IHRydWUgfSk7XG4gIH1cblxuICB1cGRhdGVTdGF0ZSA9IChzdGF0ZSwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0ZpcnN0UmVuZGVyaW5nKSByZXR1cm47XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICByZXN1bHRzOiBzdGF0ZS5yZXN1bHRzLFxuICAgICAgaGl0czpcbiAgICAgICAgdHlwZW9mIHRoaXMudHJhbnNmb3JtSXRlbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGhpcy50cmFuc2Zvcm1JdGVtcyhzdGF0ZS5oaXRzKVxuICAgICAgICAgIDogc3RhdGUuaGl0c1xuICAgIH07XG4gIH07XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzSGlnaGxpZ2h0TW9kdWxlIH0gZnJvbSBcIi4uL2hpZ2hsaWdodC9oaWdobGlnaHQubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc0hpdHMgfSBmcm9tIFwiLi9oaXRzXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nQWlzSGl0c10sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzSGl0c10sXG4gIGV4cG9ydHM6IFtOZ0Fpc0hpdHNdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBOZ0Fpc0hpZ2hsaWdodE1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNIaXRzTW9kdWxlIHt9XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgSW5wdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdEluZmluaXRlSGl0cyB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1pbmZpbml0ZS1oaXRzXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3goKVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlOyBjb250ZXh0OiBzdGF0ZVwiPjwvbmctY29udGFpbmVyPlxuXG4gICAgICA8IS0tIGRlZmF1bHQgcmVuZGVyaW5nIGlmIG5vIHRlbXBsYXRlIHNwZWNpZmllZCAtLT5cbiAgICAgIDxkaXYgKm5nSWY9XCIhdGVtcGxhdGVcIj5cbiAgICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2l0ZW0nKVwiXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaGl0IG9mIHN0YXRlLmhpdHNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxhaXMtaGlnaGxpZ2h0IGF0dHJpYnV0ZT1cIm5hbWVcIiBbaGl0XT1cImhpdFwiPlxuICAgICAgICAgICAgPC9haXMtaGlnaGxpZ2h0PlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ3Nob3dNb3JlJylcIlxuICAgICAgICAoY2xpY2spPVwic2hvd01vcmUoJGV2ZW50KVwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJzdGF0ZS5pc0xhc3RQYWdlXCJcbiAgICAgICAgKm5nSWY9XCIhdGVtcGxhdGVcIlxuICAgICAgPlxuICAgICAgICB7e3Nob3dNb3JlTGFiZWx9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNJbmZpbml0ZUhpdHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgcHVibGljIHRlbXBsYXRlPzogYW55O1xuXG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TW9yZUxhYmVsOiBzdHJpbmcgPSBcIlNob3cgbW9yZSByZXN1bHRzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IEZ1bmN0aW9uO1xuXG4gIC8vIGlubmVyIHdpZGdldCBzdGF0ZSByZXR1cm5lZCBmcm9tIGNvbm5lY3RvclxuICBwdWJsaWMgc3RhdGU6IHtcbiAgICBoaXRzOiB7fVtdO1xuICAgIGlzTGFzdFBhZ2U6IGJvb2xlYW47XG4gICAgc2hvd01vcmU6IEZ1bmN0aW9uO1xuICAgIHJlc3VsdHM6IHt9O1xuICB9ID0ge1xuICAgIGhpdHM6IFtdLFxuICAgIGlzTGFzdFBhZ2U6IGZhbHNlLFxuICAgIHNob3dNb3JlOiBub29wLFxuICAgIHJlc3VsdHM6IHt9XG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIkluZmluaXRlSGl0c1wiKTtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0SW5maW5pdGVIaXRzLCB7IGVzY2FwZUhpdHM6IHRydWUgfSk7XG4gIH1cblxuICBwdWJsaWMgc2hvd01vcmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUuc2hvd01vcmUoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlID0gKHN0YXRlLCBpc0ZpcnN0UmVuZGVyaW5nOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcpIHJldHVybjtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIHJlc3VsdHM6IHN0YXRlLnJlc3VsdHMsXG4gICAgICBoaXRzOlxuICAgICAgICB0eXBlb2YgdGhpcy50cmFuc2Zvcm1JdGVtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0aGlzLnRyYW5zZm9ybUl0ZW1zKHN0YXRlLmhpdHMpXG4gICAgICAgICAgOiBzdGF0ZS5oaXRzXG4gICAgfTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNIaWdobGlnaHRNb2R1bGUgfSBmcm9tIFwiLi4vaGlnaGxpZ2h0L2hpZ2hsaWdodC5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzSW5maW5pdGVIaXRzIH0gZnJvbSBcIi4vaW5maW5pdGUtaGl0c1wiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ0Fpc0luZmluaXRlSGl0c10sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzSW5maW5pdGVIaXRzXSxcbiAgZXhwb3J0czogW05nQWlzSW5maW5pdGVIaXRzXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgTmdBaXNIaWdobGlnaHRNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSW5maW5pdGVIaXRzTW9kdWxlIHt9XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5cbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuL2luc3RhbnRzZWFyY2hcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNJbnN0YW50U2VhcmNoXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNJbnN0YW50U2VhcmNoXSxcbiAgZXhwb3J0czogW05nQWlzSW5zdGFudFNlYXJjaF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEh0dHBDbGllbnRNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSW5zdGFudFNlYXJjaE1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQWlzSW5zdGFudFNlYXJjaE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW11cbiAgICB9O1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0TWVudSB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IHBhcnNlTnVtYmVySW5wdXQsIG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgTWVudVN0YXRlID0ge1xuICBjYW5SZWZpbmU6IGJvb2xlYW47XG4gIGNhblRvZ2dsZVNob3dNb3JlOiBib29sZWFuO1xuICBjcmVhdGVVUkw6IEZ1bmN0aW9uO1xuICBpc1Nob3dpbmdNb3JlOiBib29sZWFuO1xuICBpdGVtczoge31bXTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbiAgdG9nZ2xlU2hvd01vcmU6IEZ1bmN0aW9uO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1tZW51XCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICA8bGlcbiAgICAgICAgICBbY2xhc3NdPVwiZ2V0SXRlbUNsYXNzKGl0ZW0pXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgaXRlbS52YWx1ZSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9XCJ7e3N0YXRlLmNyZWF0ZVVSTChpdGVtLnZhbHVlKX19XCJcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnbGluaycpXCJcbiAgICAgICAgICAgIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIGl0ZW0udmFsdWUpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY291bnQnKVwiPnt7aXRlbS5jb3VudH19PC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgKm5nSWY9XCJzaG93TW9yZUxpbWl0ICYmIHN0YXRlLmNhblRvZ2dsZVNob3dNb3JlXCJcbiAgICAgICAgKGNsaWNrKT1cInN0YXRlLnRvZ2dsZVNob3dNb3JlKClcIlxuICAgICAgICBbY2xhc3NdPVwic2hvd01vcmVDbGFzc1wiXG4gICAgICA+XG4gICAgICAgIHt7c3RhdGUuaXNTaG93aW5nTW9yZSA/IHNob3dMZXNzTGFiZWwgOiBzaG93TW9yZUxhYmVsfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzTWVudSBleHRlbmRzIEJhc2VXaWRnZXQge1xuICAvLyByZW5kZXIgb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd01vcmVMYWJlbDogc3RyaW5nID0gXCJTaG93IG1vcmVcIjtcbiAgQElucHV0KCkgcHVibGljIHNob3dMZXNzTGFiZWw6IHN0cmluZyA9IFwiU2hvdyBsZXNzXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IEZ1bmN0aW9uO1xuXG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGU6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGxpbWl0PzogbnVtYmVyIHwgc3RyaW5nID0gMTA7XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TW9yZUxpbWl0PzogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgc29ydEJ5Pzogc3RyaW5nW10gfCAoKGl0ZW06IG9iamVjdCkgPT4gbnVtYmVyKTtcblxuICBwdWJsaWMgc3RhdGU6IE1lbnVTdGF0ZSA9IHtcbiAgICBjYW5SZWZpbmU6IGZhbHNlLFxuICAgIGNhblRvZ2dsZVNob3dNb3JlOiBmYWxzZSxcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgaXNTaG93aW5nTW9yZTogZmFsc2UsXG4gICAgaXRlbXM6IFtdLFxuICAgIHJlZmluZTogbm9vcCxcbiAgICB0b2dnbGVTaG93TW9yZTogbm9vcFxuICB9O1xuXG4gIGdldCBpc0hpZGRlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldCBzaG93TW9yZUNsYXNzKCkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmN4KFwic2hvd01vcmVcIik7XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuY2FuVG9nZ2xlU2hvd01vcmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gJHt0aGlzLmN4KFwic2hvd01vcmVcIiwgXCJkaXNhYmxlZFwiKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnRyYW5zZm9ybUl0ZW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGhpcy50cmFuc2Zvcm1JdGVtcyh0aGlzLnN0YXRlLml0ZW1zKVxuICAgICAgOiB0aGlzLnN0YXRlLml0ZW1zO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIk1lbnVcIik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdE1lbnUsIHtcbiAgICAgIGxpbWl0OiBwYXJzZU51bWJlcklucHV0KHRoaXMubGltaXQpLFxuICAgICAgc2hvd01vcmVMaW1pdDogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLnNob3dNb3JlTGltaXQpLFxuICAgICAgYXR0cmlidXRlTmFtZTogdGhpcy5hdHRyaWJ1dGUsXG4gICAgICBzb3J0Qnk6IHRoaXMuc29ydEJ5XG4gICAgfSk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy5zdGF0ZS5yZWZpbmUodmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzTWVudSB9IGZyb20gXCIuL21lbnVcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNNZW51XSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNNZW51XSxcbiAgZXhwb3J0czogW05nQWlzTWVudV0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzTWVudU1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdE51bWVyaWNSZWZpbmVtZW50TGlzdCB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgTnVtZXJpY1JlZmluZW1lbnRMaXN0U3RhdGUgPSB7XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIGl0ZW1zOiB7fVtdO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1udW1lcmljLW1lbnVcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgIDxsaVxuICAgICAgICAgIFtjbGFzc109XCJnZXRJdGVtQ2xhc3MoaXRlbSlcIlxuICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zXCJcbiAgICAgICAgICAoY2xpY2spPVwicmVmaW5lKCRldmVudCwgaXRlbSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPGxhYmVsIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIFtjbGFzc109XCJjeCgncmFkaW8nKVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgIG5hbWU9XCJOdW1lcmljTWVudVwiXG4gICAgICAgICAgICAgIFtjaGVja2VkXT1cIml0ZW0uaXNSZWZpbmVkXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2xhYmVsVGV4dCcpXCI+e3tpdGVtLmxhYmVsfX08L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNOdW1lcmljTWVudSBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBASW5wdXQoKSBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBpdGVtczoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGFydD86IG51bWJlcjtcbiAgICBlbmQ/OiBudW1iZXI7XG4gIH1bXTtcblxuICBwdWJsaWMgc3RhdGU6IE51bWVyaWNSZWZpbmVtZW50TGlzdFN0YXRlID0ge1xuICAgIGNyZWF0ZVVSTDogbm9vcCxcbiAgICBpdGVtczogW10sXG4gICAgcmVmaW5lOiBub29wXG4gIH07XG5cbiAgZ2V0IGlzSGlkZGVuKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmF1dG9IaWRlQ29udGFpbmVyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIk51bWVyaWNNZW51XCIpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3ROdW1lcmljUmVmaW5lbWVudExpc3QsIHtcbiAgICAgIGF0dHJpYnV0ZU5hbWU6IHRoaXMuYXR0cmlidXRlLFxuICAgICAgb3B0aW9uczogdGhpcy5pdGVtc1xuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgcmVmaW5lKGV2ZW50OiBNb3VzZUV2ZW50LCBpdGVtOiB7IHZhbHVlOiBzdHJpbmcgfSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zdGF0ZS5yZWZpbmUoaXRlbS52YWx1ZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNOdW1lcmljTWVudSB9IGZyb20gXCIuL251bWVyaWMtbWVudVwiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ0Fpc051bWVyaWNNZW51XSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNOdW1lcmljTWVudV0sXG4gIGV4cG9ydHM6IFtOZ0Fpc051bWVyaWNNZW51XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNOdW1lcmljTWVudU1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdE51bWVyaWNTZWxlY3RvciB9IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnNcIjtcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgTnVtZXJpY1NlbGVjdG9yU3RhdGUgPSB7XG4gIGN1cnJlbnRSZWZpbmVtZW50Pzogc3RyaW5nIHwgbnVsbDtcbiAgb3B0aW9uczoge31bXTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtbnVtZXJpYy1zZWxlY3RvclwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KCcnKVwiPlxuICAgICAgPHNlbGVjdFxuICAgICAgICBbY2xhc3NdPVwiY3goJ3NlbGVjdCcpXCJcbiAgICAgICAgKGNoYW5nZSk9XCJzdGF0ZS5yZWZpbmUoJGV2ZW50LnRhcmdldC52YWx1ZSlcIlxuICAgICAgPlxuICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdvcHRpb24nKVwiXG4gICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc3RhdGUub3B0aW9uc1wiXG4gICAgICAgICAgW3ZhbHVlXT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgIFtzZWxlY3RlZF09XCJpdGVtLnZhbHVlID09PSBzdGF0ZS5jdXJyZW50UmVmaW5lbWVudFwiXG4gICAgICAgID5cbiAgICAgICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgICAgICA8L29wdGlvbj5cbiAgICAgIDwvc2VsZWN0PlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzTnVtZXJpY1NlbGVjdG9yIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGU6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIG9wZXJhdG9yOiBcIjxcIiB8IFwiPD1cIiB8IFwiPVwiIHwgXCI+PVwiIHwgXCI+XCIgfCBcIiE9XCIgPSBcIj1cIjtcbiAgQElucHV0KClcbiAgcHVibGljIGl0ZW1zOiB7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICB9W107XG5cbiAgcHVibGljIHN0YXRlOiBOdW1lcmljU2VsZWN0b3JTdGF0ZSA9IHtcbiAgICBjdXJyZW50UmVmaW5lbWVudDogbnVsbCxcbiAgICBvcHRpb25zOiBbXSxcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiTnVtZXJpY1NlbGVjdG9yXCIpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3ROdW1lcmljU2VsZWN0b3IsIHtcbiAgICAgIGF0dHJpYnV0ZU5hbWU6IHRoaXMuYXR0cmlidXRlLFxuICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3IsXG4gICAgICBvcHRpb25zOiB0aGlzLml0ZW1zXG4gICAgfSk7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc051bWVyaWNTZWxlY3RvciB9IGZyb20gXCIuL251bWVyaWMtc2VsZWN0b3JcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNOdW1lcmljU2VsZWN0b3JdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtOZ0Fpc051bWVyaWNTZWxlY3Rvcl0sXG4gIGV4cG9ydHM6IFtOZ0Fpc051bWVyaWNTZWxlY3Rvcl0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzTnVtZXJpY1NlbGVjdG9yTW9kdWxlIHt9XG4iLCJjb25zdCByYW5nZSA9IHJlcXVpcmUoXCJsb2Rhc2gvcmFuZ2VcIik7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgY29ubmVjdFBhZ2luYXRpb24gfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBwYXJzZU51bWJlcklucHV0LCBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtcGFnaW5hdGlvblwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICA8bGlcbiAgICAgICAgICAqbmdJZj1cInNob3dGaXJzdFwiXG4gICAgICAgICAgKGNsaWNrKT1cInJlZmluZSgkZXZlbnQsIDApXCJcbiAgICAgICAgICBbY2xhc3NdPVwiXG4gICAgICAgICAgICBjeCgnaXRlbScpICtcbiAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICBjeCgnaXRlbScsICdmaXJzdFBhZ2UnKSArXG4gICAgICAgICAgICAoc3RhdGUuY3VycmVudFJlZmluZW1lbnQgPT09IDAgPyAnICcgKyBjeCgnaXRlbScsICdkaXNhYmxlZCcpIDogJycpXG4gICAgICAgICAgXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBbaHJlZl09XCJzdGF0ZS5jcmVhdGVVUkwoMClcIlxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdsaW5rJylcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIMOiwoDCucOiwoDCuVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cblxuICAgICAgICA8bGlcbiAgICAgICAgICAqbmdJZj1cInNob3dQcmV2aW91c1wiXG4gICAgICAgICAgKGNsaWNrKT1cInJlZmluZSgkZXZlbnQsIHN0YXRlLmN1cnJlbnRSZWZpbmVtZW50IC0gMSlcIlxuICAgICAgICAgIFtjbGFzc109XCJcbiAgICAgICAgICAgIGN4KCdpdGVtJykgK1xuICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgIGN4KCdpdGVtJywgJ3ByZXZpb3VzUGFnZScpICtcbiAgICAgICAgICAgIChzdGF0ZS5jdXJyZW50UmVmaW5lbWVudCA9PT0gMCA/ICcgJyArIGN4KCdpdGVtJywgJ2Rpc2FibGVkJykgOiAnJylcbiAgICAgICAgICBcIlxuICAgICAgICA+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIFtocmVmXT1cInN0YXRlLmNyZWF0ZVVSTChzdGF0ZS5jdXJyZW50UmVmaW5lbWVudCAtIDEpXCJcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnbGluaycpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICDDosKAwrlcbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG5cbiAgICAgICAgPGxpXG4gICAgICAgICAgW2NsYXNzXT1cIlxuICAgICAgICAgICAgY3goJ2l0ZW0nKSArXG4gICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgY3goJ2l0ZW0nLCAncGFnZScpICtcbiAgICAgICAgICAgIChzdGF0ZS5jdXJyZW50UmVmaW5lbWVudCA9PT0gcGFnZSA/ICcgJyArIGN4KCdpdGVtJywgJ3NlbGVjdGVkJykgOiAnJylcbiAgICAgICAgICBcIlxuICAgICAgICAgICpuZ0Zvcj1cImxldCBwYWdlIG9mIHBhZ2VzXCJcbiAgICAgICAgICAoY2xpY2spPVwicmVmaW5lKCRldmVudCwgcGFnZSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnbGluaycpXCJcbiAgICAgICAgICAgIFtocmVmXT1cInN0YXRlLmNyZWF0ZVVSTChwYWdlKVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3twYWdlICsgMX19XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaVxuICAgICAgICAgICpuZ0lmPVwic2hvd05leHRcIlxuICAgICAgICAgIChjbGljayk9XCJyZWZpbmUoJGV2ZW50LCBzdGF0ZS5jdXJyZW50UmVmaW5lbWVudCArIDEpXCJcbiAgICAgICAgICBbY2xhc3NdPVwiXG4gICAgICAgICAgICBjeCgnaXRlbScpICtcbiAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICBjeCgnaXRlbScsICduZXh0UGFnZScpICtcbiAgICAgICAgICAgIChzdGF0ZS5jdXJyZW50UmVmaW5lbWVudCArIDEgPT09IHN0YXRlLm5iUGFnZXMgPyAnICcgKyBjeCgnaXRlbScsICdkaXNhYmxlZCcpIDogJycpXG4gICAgICAgICAgXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBbaHJlZl09XCJzdGF0ZS5jcmVhdGVVUkwoc3RhdGUuY3VycmVudFJlZmluZW1lbnQgKyAxKVwiXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2xpbmsnKVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgw6LCgMK6XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaVxuICAgICAgICAgICpuZ0lmPVwic2hvd0xhc3RcIlxuICAgICAgICAgIChjbGljayk9XCJyZWZpbmUoJGV2ZW50LCBzdGF0ZS5uYlBhZ2VzIC0gMSlcIlxuICAgICAgICAgIFtjbGFzc109XCJcbiAgICAgICAgICAgIGN4KCdpdGVtJykgK1xuICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgIGN4KCdpdGVtJywgJ2xhc3RQYWdlJykgK1xuICAgICAgICAgICAgKHN0YXRlLmN1cnJlbnRSZWZpbmVtZW50ICsgMSA9PT0gc3RhdGUubmJQYWdlcyA/ICcgJyArIGN4KCdpdGVtJywgJ2Rpc2FibGVkJykgOiAnJylcbiAgICAgICAgICBcIlxuICAgICAgICA+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIFtocmVmXT1cInN0YXRlLmNyZWF0ZVVSTChzdGF0ZS5uYlBhZ2VzIC0gMSlcIlxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdsaW5rJylcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIMOiwoDCusOiwoDCulxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNQYWdpbmF0aW9uIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93Rmlyc3Q6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd0xhc3Q6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIHNob3dQcmV2aW91czogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TmV4dDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBwYWRkaW5nOiBudW1iZXIgfCBzdHJpbmcgPSAzO1xuXG4gIC8vIGNvbm5lY3RvciBvcHRpb25zd1xuICBASW5wdXQoKSBwdWJsaWMgdG90YWxQYWdlcz86IG51bWJlciB8IHN0cmluZztcblxuICBwdWJsaWMgc3RhdGUgPSB7XG4gICAgY3JlYXRlVVJMOiBub29wLFxuICAgIGN1cnJlbnRSZWZpbmVtZW50OiAwLFxuICAgIG5iSGl0czogMCxcbiAgICBuYlBhZ2VzOiAwLFxuICAgIHJlZmluZTogbm9vcFxuICB9O1xuXG4gIGdldCBwYWdlcygpIHtcbiAgICBjb25zdCB7IG5iUGFnZXMsIGN1cnJlbnRSZWZpbmVtZW50IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgcGFnZXNBcnJheSA9IEFycmF5LmFwcGx5KG51bGwsIHsgbGVuZ3RoOiBuYlBhZ2VzIH0pLm1hcChcbiAgICAgIE51bWJlci5jYWxsLFxuICAgICAgTnVtYmVyXG4gICAgKTtcblxuICAgIGNvbnN0IHBhZ2VzUGFkZGluZyA9XG4gICAgICB0eXBlb2YgdGhpcy5wYWRkaW5nID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gcGFyc2VJbnQodGhpcy5wYWRkaW5nLCAxMClcbiAgICAgICAgOiB0aGlzLnBhZGRpbmc7XG5cbiAgICBpZiAocGFnZXNQYWRkaW5nICYmIHBhZ2VzUGFkZGluZyA+IDApIHtcbiAgICAgIC8vIHNob3VsZCBub3QgZGlzcGxheSBwYWdlcyB0aGF0IGRvZXMgbm90IGV4aXN0c1xuICAgICAgaWYgKG5iUGFnZXMgPCBwYWdlc1BhZGRpbmcgKiAyICsgMSkge1xuICAgICAgICByZXR1cm4gcGFnZXNBcnJheTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWluRGVsdGEgPSBjdXJyZW50UmVmaW5lbWVudCAtIHBhZ2VzUGFkZGluZyAtIDE7XG4gICAgICBjb25zdCBtYXhEZWx0YSA9IGN1cnJlbnRSZWZpbmVtZW50ICsgcGFnZXNQYWRkaW5nICsgMTtcblxuICAgICAgaWYgKG1pbkRlbHRhIDwgMCkge1xuICAgICAgICByZXR1cm4gcmFuZ2UoMCwgY3VycmVudFJlZmluZW1lbnQgKyBwYWdlc1BhZGRpbmcgKyBNYXRoLmFicyhtaW5EZWx0YSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4RGVsdGEgPiBuYlBhZ2VzKSB7XG4gICAgICAgIHJldHVybiByYW5nZShcbiAgICAgICAgICBjdXJyZW50UmVmaW5lbWVudCAtIHBhZ2VzUGFkZGluZyAtIChtYXhEZWx0YSAtIG5iUGFnZXMpLFxuICAgICAgICAgIG5iUGFnZXNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJhbmdlKFxuICAgICAgICBjdXJyZW50UmVmaW5lbWVudCAtIHBhZ2VzUGFkZGluZyxcbiAgICAgICAgY3VycmVudFJlZmluZW1lbnQgKyBwYWdlc1BhZGRpbmcgKyAxXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBwYWdlc0FycmF5O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIlBhZ2luYXRpb25cIik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdFBhZ2luYXRpb24sIHtcbiAgICAgIG1heFBhZ2VzOiBwYXJzZU51bWJlcklucHV0KHRoaXMudG90YWxQYWdlcylcbiAgICB9KTtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgcHVibGljIHJlZmluZShldmVudDogTW91c2VFdmVudCwgcGFnZTogbnVtYmVyKSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChcbiAgICAgIHBhZ2UgPCAwIHx8XG4gICAgICBwYWdlID09PSB0aGlzLnN0YXRlLmN1cnJlbnRSZWZpbmVtZW50IHx8XG4gICAgICBwYWdlID49IHRoaXMuc3RhdGUubmJQYWdlc1xuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUucmVmaW5lKHBhZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzUGFnaW5hdGlvbiB9IGZyb20gXCIuL3BhZ2luYXRpb25cIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNQYWdpbmF0aW9uXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNQYWdpbmF0aW9uXSxcbiAgZXhwb3J0czogW05nQWlzUGFnaW5hdGlvbl0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUGFnaW5hdGlvbk1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0UmFuZ2UgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgKiBhcyBub1VpU2xpZGVyIGZyb20gXCJub3Vpc2xpZGVyXCI7XG5cbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi4vYmFzZS13aWRnZXRcIjtcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gXCIuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmltcG9ydCB7IHBhcnNlTnVtYmVySW5wdXQsIG5vb3AgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgUmFuZ2VTbGlkZXJTdGF0ZSA9IHtcbiAgcmFuZ2U6IHsgbWluOiBudW1iZXI7IG1heDogbnVtYmVyIH07XG4gIHJlZmluZTogRnVuY3Rpb247XG4gIHN0YXJ0OiBudW1iZXJbXTtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtcmFuZ2Utc2xpZGVyXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3goKVwiPlxuICAgICAgPGRpdiBbY2xhc3NdPVwiY3goJ2JvZHknKVwiPlxuICAgICAgICA8ZGl2ICNzbGlkZXJDb250YWluZXI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1JhbmdlU2xpZGVyIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBWaWV3Q2hpbGQoXCJzbGlkZXJDb250YWluZXJcIikgcHVibGljIHNsaWRlckNvbnRhaW5lcjogYW55O1xuXG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBwaXBzOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIHRvb2x0aXBzOiBib29sZWFuID0gdHJ1ZTtcblxuICAvLyBjb25uZWN0b3Igb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtaW4/OiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXg/OiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBwcmVjaXNpb246IG51bWJlciB8IHN0cmluZyA9IDI7XG5cbiAgcHVibGljIHN0YXRlOiBSYW5nZVNsaWRlclN0YXRlID0ge1xuICAgIHJhbmdlOiB7IG1pbjogMCwgbWF4OiAxIH0sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHN0YXJ0OiBbMCwgMV1cbiAgfTtcblxuICBwcml2YXRlIHNsaWRlcjogYW55O1xuXG4gIGdldCBzdGVwKCkge1xuICAgIC8vIGNvbXB1dGUgc3RlcCBmcm9tIHRoZSBwcmVjaXNpb24gdmFsdWVcbiAgICBjb25zdCBwcmVjaXNpb24gPSBwYXJzZU51bWJlcklucHV0KHRoaXMucHJlY2lzaW9uKSB8fCAyO1xuICAgIHJldHVybiAxIC8gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiUmFuZ2VTbGlkZXJcIik7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdFJhbmdlLCB7XG4gICAgICBhdHRyaWJ1dGVOYW1lOiB0aGlzLmF0dHJpYnV0ZSxcbiAgICAgIG1heDogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLm1heCksXG4gICAgICBtaW46IHBhcnNlTnVtYmVySW5wdXQodGhpcy5taW4pLFxuICAgICAgcHJlY2lzaW9uOiBwYXJzZU51bWJlcklucHV0KHRoaXMucHJlY2lzaW9uKVxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTdGF0ZSA9IChzdGF0ZSwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0ZpcnN0UmVuZGVyaW5nKSB7XG4gICAgICAvLyBjcmVhdGUgc2xpZGVyXG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIGFuaW1hdGU6IGZhbHNlLFxuICAgICAgICBiZWhhdmlvdXI6IFwic25hcFwiLFxuICAgICAgICBjb25uZWN0OiB0cnVlLFxuICAgICAgICByYW5nZTogeyBtaW46IDAsIG1heDogMSB9LFxuICAgICAgICBzdGFydDogWzAsIDFdLFxuICAgICAgICBzdGVwOiB0aGlzLnN0ZXAsXG4gICAgICAgIHRvb2x0aXBzOiB0aGlzLnRvb2x0aXBzICYmIFtcbiAgICAgICAgICB7IHRvOiB0aGlzLmZvcm1hdFRvb2x0aXAgfSxcbiAgICAgICAgICB7IHRvOiB0aGlzLmZvcm1hdFRvb2x0aXAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5waXBzID09PSB0cnVlIHx8IHR5cGVvZiB0aGlzLnBpcHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjb25maWcsIHtcbiAgICAgICAgICBwaXBzOiB7XG4gICAgICAgICAgICBkZW5zaXR5OiAzLFxuICAgICAgICAgICAgbW9kZTogXCJwb3NpdGlvbnNcIixcbiAgICAgICAgICAgIHN0ZXBwZWQ6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZXM6IFswLCA1MCwgMTAwXVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGlwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLCB7IHBpcHM6IHRoaXMucGlwcyB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zbGlkZXIgPSBub1VpU2xpZGVyLmNyZWF0ZShcbiAgICAgICAgdGhpcy5zbGlkZXJDb250YWluZXIubmF0aXZlRWxlbWVudCxcbiAgICAgICAgY29uZmlnXG4gICAgICApO1xuXG4gICAgICAvLyByZWdpc3RlciBsaXN0ZW4gZXZlbnRzXG4gICAgICB0aGlzLnNsaWRlckNvbnRhaW5lci5uYXRpdmVFbGVtZW50Lm5vVWlTbGlkZXIub24oXG4gICAgICAgIFwiY2hhbmdlXCIsXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBjb21wb25lbnQgaW5uZXIgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG5cbiAgICAvLyB1cGRhdGUgdGhlIHNsaWRlciBzdGF0ZVxuICAgIGNvbnN0IHtcbiAgICAgIHJhbmdlOiB7IG1pbiwgbWF4IH0sXG4gICAgICBzdGFydFxuICAgIH0gPSBzdGF0ZTtcblxuICAgIGNvbnN0IGRpc2FibGVkID0gbWluID09PSBtYXg7XG4gICAgY29uc3QgcmFuZ2UgPSBkaXNhYmxlZCA/IHsgbWluLCBtYXg6IG1heCArIDAuMDAwMSB9IDogeyBtaW4sIG1heCB9O1xuXG4gICAgdGhpcy5zbGlkZXIudXBkYXRlT3B0aW9ucyh7IGRpc2FibGVkLCByYW5nZSwgc3RhcnQgfSk7XG4gIH07XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZSA9ICh2YWx1ZXM6IHN0cmluZ1tdIHwgbnVtYmVyW10pID0+IHtcbiAgICB0aGlzLnN0YXRlLnJlZmluZSh2YWx1ZXMpO1xuICB9O1xuXG4gIHB1YmxpYyBmb3JtYXRUb29sdGlwID0gKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdmFsdWUudG9GaXhlZChwYXJzZU51bWJlcklucHV0KHRoaXMucHJlY2lzaW9uKSk7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzUmFuZ2VTbGlkZXIgfSBmcm9tIFwiLi9yYW5nZS1zbGlkZXJcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNSYW5nZVNsaWRlcl0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzUmFuZ2VTbGlkZXJdLFxuICBleHBvcnRzOiBbTmdBaXNSYW5nZVNsaWRlcl0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUmFuZ2VTbGlkZXJNb2R1bGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBjb25uZWN0UmVmaW5lbWVudExpc3QgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBwYXJzZU51bWJlcklucHV0LCBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCB0eXBlIFJlZmluZW1lbnRMaXN0U3RhdGUgPSB7XG4gIGNhblJlZmluZTogYm9vbGVhbjtcbiAgY2FuVG9nZ2xlU2hvd01vcmU6IGJvb2xlYW47XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIGlzU2hvd2luZ01vcmU6IGJvb2xlYW47XG4gIGl0ZW1zOiB7fVtdO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xuICB0b2dnbGVTaG93TW9yZTogRnVuY3Rpb247XG4gIHNlYXJjaEZvckl0ZW1zOiBGdW5jdGlvbjtcbiAgaXNGb3JtU2VhcmNoOiBib29sZWFuO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1yZWZpbmVtZW50LWxpc3RcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xhc3NdPVwiY3goKVwiXG4gICAgICAqbmdJZj1cIiFpc0hpZGRlblwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICAqbmdJZj1cInNlYXJjaGFibGVcIlxuICAgICAgICBbY2xhc3NdPVwiY3goJ3NlYXJjaEJveCcpXCJcbiAgICAgID5cbiAgICAgICAgPGFpcy1mYWNldHMtc2VhcmNoXG4gICAgICAgICAgW3NlYXJjaF09XCJzdGF0ZS5zZWFyY2hGb3JJdGVtc1wiXG4gICAgICAgICAgW3NlYXJjaFBsYWNlaG9sZGVyXT1cInNlYXJjaFBsYWNlaG9sZGVyXCJcbiAgICAgICAgPlxuICAgICAgICA8L2Fpcy1mYWNldHMtc2VhcmNoPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICA8bGlcbiAgICAgICAgICBbY2xhc3NdPVwiZ2V0SXRlbUNsYXNzKGl0ZW0pXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiXG4gICAgICAgICAgKGNsaWNrKT1cInJlZmluZSgkZXZlbnQsIGl0ZW0pXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxsYWJlbCBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2NoZWNrYm94JylcIlxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICB2YWx1ZT1cInt7aXRlbS52YWx1ZX19XCJcbiAgICAgICAgICAgICAgW2NoZWNrZWRdPVwiaXRlbS5pc1JlZmluZWRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnbGFiZWxUZXh0JylcIj5cbiAgICAgICAgICAgICAgPGFpcy1oaWdobGlnaHQgYXR0cmlidXRlPVwiaGlnaGxpZ2h0ZWRcIiBbaGl0XT1cIml0ZW1cIj48L2Fpcy1oaWdobGlnaHQ+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2NvdW50JylcIj57e2l0ZW0uY291bnR9fTwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICAqbmdJZj1cInNob3dNb3JlTGltaXQgJiYgc3RhdGUuY2FuVG9nZ2xlU2hvd01vcmVcIlxuICAgICAgICAoY2xpY2spPVwic3RhdGUudG9nZ2xlU2hvd01vcmUoKVwiXG4gICAgICA+XG4gICAgICAgIHt7c3RhdGUuaXNTaG93aW5nTW9yZSA/IHNob3dMZXNzTGFiZWwgOiBzaG93TW9yZUxhYmVsfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUmVmaW5lbWVudExpc3QgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgLy8gcmVuZGVyIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIHNob3dNb3JlTGFiZWw6IHN0cmluZyA9IFwiU2hvdyBtb3JlXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TGVzc0xhYmVsOiBzdHJpbmcgPSBcIlNob3cgbGVzc1wiO1xuICBASW5wdXQoKSBwdWJsaWMgdHJhbnNmb3JtSXRlbXM/OiBGdW5jdGlvbjtcbiAgQElucHV0KCkgcHVibGljIHNlYXJjaGFibGU/OiBib29sZWFuO1xuICBASW5wdXQoKSBwdWJsaWMgc2VhcmNoUGxhY2Vob2xkZXI6IHN0cmluZyA9IFwiU2VhcmNoIGhlcmUuLi5cIjtcblxuICAvLyBjb25uZWN0b3JzIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGF0dHJpYnV0ZTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgb3BlcmF0b3I6IFwib3JcIiB8IFwiYW5kXCIgPSBcIm9yXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBsaW1pdDogbnVtYmVyIHwgc3RyaW5nID0gMTA7XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TW9yZUxpbWl0OiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzb3J0Qnk6IHN0cmluZ1tdIHwgKChpdGVtOiBvYmplY3QpID0+IG51bWJlcik7XG5cbiAgcHVibGljIHN0YXRlOiBSZWZpbmVtZW50TGlzdFN0YXRlID0ge1xuICAgIGNhblJlZmluZTogZmFsc2UsXG4gICAgY2FuVG9nZ2xlU2hvd01vcmU6IGZhbHNlLFxuICAgIGNyZWF0ZVVSTDogbm9vcCxcbiAgICBpc1Nob3dpbmdNb3JlOiBmYWxzZSxcbiAgICBpdGVtczogW10sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHRvZ2dsZVNob3dNb3JlOiBub29wLFxuICAgIHNlYXJjaEZvckl0ZW1zOiBub29wLFxuICAgIGlzRm9ybVNlYXJjaDogZmFsc2VcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiUmVmaW5lbWVudExpc3RcIik7XG4gIH1cblxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnRyYW5zZm9ybUl0ZW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGhpcy50cmFuc2Zvcm1JdGVtcyh0aGlzLnN0YXRlLml0ZW1zKVxuICAgICAgOiB0aGlzLnN0YXRlLml0ZW1zO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RSZWZpbmVtZW50TGlzdCwge1xuICAgICAgbGltaXQ6IHBhcnNlTnVtYmVySW5wdXQodGhpcy5saW1pdCksXG4gICAgICBzaG93TW9yZUxpbWl0OiBwYXJzZU51bWJlcklucHV0KHRoaXMuc2hvd01vcmVMaW1pdCksXG4gICAgICBhdHRyaWJ1dGVOYW1lOiB0aGlzLmF0dHJpYnV0ZSxcbiAgICAgIHNvcnRCeTogdGhpcy5zb3J0QnksXG4gICAgICBlc2NhcGVGYWNldFZhbHVlczogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZpbmUoXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQsXG4gICAgaXRlbTogeyBpc1JlZmluZWQ6IGJvb2xlYW47IHZhbHVlOiBzdHJpbmcgfVxuICApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuY2FuUmVmaW5lKSB7XG4gICAgICAvLyB1cGRhdGUgVUkgZGlyZWN0bHksIGl0IHdpbGwgdXBkYXRlIHRoZSBjaGVja2JveCBzdGF0ZVxuICAgICAgaXRlbS5pc1JlZmluZWQgPSAhaXRlbS5pc1JlZmluZWQ7XG5cbiAgICAgIC8vIHJlZmluZSB0aHJvdWdoIEFsZ29saWEgQVBJXG4gICAgICB0aGlzLnN0YXRlLnJlZmluZShpdGVtLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgYmVtIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtZmFjZXRzLXNlYXJjaFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxmb3JtXG4gICAgICAgIFtjbGFzc109XCJjeCgnZm9ybScpXCJcbiAgICAgICAgKHN1Ym1pdCk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiXG4gICAgICAgIG5vdmFsaWRhdGVcbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdpbnB1dCcpXCJcbiAgICAgICAgICBhdXRvY2FwaXRhbGl6ZT1cIm9mZlwiXG4gICAgICAgICAgYXV0b2NvcnJlY3Q9XCJvZmZcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3tzZWFyY2hQbGFjZWhvbGRlcn19XCJcbiAgICAgICAgICByb2xlPVwidGV4dGJveFwiXG4gICAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgW3ZhbHVlXT1cInNlYXJjaFF1ZXJ5XCJcbiAgICAgICAgICAoaW5wdXQpPVwiaGFuZGxlQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpXCJcbiAgICAgICAgLz5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdzdWJtaXQnKVwiXG4gICAgICAgICAgdGl0bGU9XCJTdWJtaXQgdGhlIHNlYXJjaCBxdWVyeS5cIlxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgW25nQ2xhc3NdPVwiY3goJ3N1Ym1pdEljb24nKVwiXG4gICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQwIDQwXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTBcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMTBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjYuODA0IDI5LjAxYy0yLjgzMiAyLjM0LTYuNDY1IDMuNzQ2LTEwLjQyNiAzLjc0NkM3LjMzMyAzMi43NTYgMCAyNS40MjQgMCAxNi4zNzggMCA3LjMzMyA3LjMzMyAwIDE2LjM3OCAwYzkuMDQ2IDAgMTYuMzc4IDcuMzMzIDE2LjM3OCAxNi4zNzggMCAzLjk2LTEuNDA2IDcuNTk0LTMuNzQ2IDEwLjQyNmwxMC41MzQgMTAuNTM0Yy42MDcuNjA3LjYxIDEuNTktLjAwNCAyLjIwMi0uNjEuNjEtMS41OTcuNjEtMi4yMDIuMDA0TDI2LjgwNCAyOS4wMXptLTEwLjQyNi42MjdjNy4zMjMgMCAxMy4yNi01LjkzNiAxMy4yNi0xMy4yNiAwLTcuMzItNS45MzctMTMuMjU3LTEzLjI2LTEzLjI1N0M5LjA1NiAzLjEyIDMuMTIgOS4wNTYgMy4xMiAxNi4zNzhjMCA3LjMyMyA1LjkzNiAxMy4yNiAxMy4yNTggMTMuMjZ6XCI+PC9wYXRoPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdyZXNldCcpXCJcbiAgICAgICAgICB0eXBlPVwicmVzZXRcIlxuICAgICAgICAgIHRpdGxlPVwiQ2xlYXIgdGhlIHNlYXJjaCBxdWVyeS5cIlxuICAgICAgICAgIGhpZGRlblxuICAgICAgICA+XG4gICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgW25nQ2xhc3NdPVwiY3goJ3Jlc2V0SWNvbicpXCJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgd2lkdGg9XCIxMFwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIxMFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04LjExNCAxMEwuOTQ0IDIuODMgMCAxLjg4NSAxLjg4NiAwbC45NDMuOTQzTDEwIDguMTEzbDcuMTctNy4xNy45NDQtLjk0M0wyMCAxLjg4NmwtLjk0My45NDMtNy4xNyA3LjE3IDcuMTcgNy4xNy45NDMuOTQ0TDE4LjExNCAyMGwtLjk0My0uOTQzLTcuMTctNy4xNy03LjE3IDcuMTctLjk0NC45NDNMMCAxOC4xMTRsLjk0My0uOTQzTDguMTEzIDEwelwiPjwvcGF0aD5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNGYWNldHNTZWFyY2gge1xuICBASW5wdXQoKSBwdWJsaWMgc2VhcmNoUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNlYXJjaDogRnVuY3Rpb247XG5cbiAgcHVibGljIGN4ID0gYmVtKFwiU2VhcmNoQm94XCIpO1xuXG4gIHB1YmxpYyBzZWFyY2hRdWVyeSA9IFwiXCI7XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zZWFyY2hRdWVyeSA9IHZhbHVlO1xuICAgIHRoaXMuc2VhcmNoKHZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2VhcmNoKHRoaXMuc2VhcmNoUXVlcnkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzSGlnaGxpZ2h0TW9kdWxlIH0gZnJvbSBcIi4uL2hpZ2hsaWdodC9oaWdobGlnaHQubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc1JlZmluZW1lbnRMaXN0IH0gZnJvbSBcIi4vcmVmaW5lbWVudC1saXN0XCI7XG5pbXBvcnQgeyBOZ0Fpc0ZhY2V0c1NlYXJjaCB9IGZyb20gXCIuL2ZhY2V0cy1zZWFyY2hcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNSZWZpbmVtZW50TGlzdCwgTmdBaXNGYWNldHNTZWFyY2hdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtOZ0Fpc1JlZmluZW1lbnRMaXN0XSxcbiAgZXhwb3J0czogW05nQWlzUmVmaW5lbWVudExpc3RdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBOZ0Fpc0hpZ2hsaWdodE1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNSZWZpbmVtZW50TGlzdE1vZHVsZSB7fVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBjb25uZWN0U2VhcmNoQm94IH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYWlzLXNlYXJjaC1ib3hcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzc109XCJjeCgpXCI+XG4gICAgICA8Zm9ybVxuICAgICAgICBbY2xhc3NdPVwiY3goJ2Zvcm0nKVwiXG4gICAgICAgIG5vdmFsaWRhdGVcbiAgICAgICAgKHN1Ym1pdCk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiXG4gICAgICA+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIFtjbGFzc109XCJjeCgnaW5wdXQnKVwiXG4gICAgICAgICAgYXV0b2NhcGl0YWxpemU9XCJvZmZcIlxuICAgICAgICAgIGF1dG9jb3JyZWN0PVwib2ZmXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7cGxhY2Vob2xkZXJ9fVwiXG4gICAgICAgICAgcm9sZT1cInRleHRib3hcIlxuICAgICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIFt2YWx1ZV09XCJzdGF0ZS5xdWVyeVwiXG4gICAgICAgICAgKGlucHV0KT1cImhhbmRsZUNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICAgICAgKGZvY3VzKT1cImZvY3VzLmVtaXQoJGV2ZW50KVwiXG4gICAgICAgICAgKGJsdXIpPVwiYmx1ci5lbWl0KCRldmVudClcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBbY2xhc3NdPVwiY3goJ3N1Ym1pdCcpXCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICB0aXRsZT1cInt7c3VibWl0VGl0bGV9fVwiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZVN1Ym1pdCgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgIFtuZ0NsYXNzXT1cImN4KCdzdWJtaXRJY29uJylcIlxuICAgICAgICAgICAgdmlld0JveD1cIjAgMCA0MCA0MFwiXG4gICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgIGhlaWdodD1cIjQwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTI2LjgwNCAyOS4wMWMtMi44MzIgMi4zNC02LjQ2NSAzLjc0Ni0xMC40MjYgMy43NDZDNy4zMzMgMzIuNzU2IDAgMjUuNDI0IDAgMTYuMzc4IDAgNy4zMzMgNy4zMzMgMCAxNi4zNzggMGM5LjA0NiAwIDE2LjM3OCA3LjMzMyAxNi4zNzggMTYuMzc4IDAgMy45Ni0xLjQwNiA3LjU5NC0zLjc0NiAxMC40MjZsMTAuNTM0IDEwLjUzNGMuNjA3LjYwNy42MSAxLjU5LS4wMDQgMi4yMDItLjYxLjYxLTEuNTk3LjYxLTIuMjAyLjAwNEwyNi44MDQgMjkuMDF6bS0xMC40MjYuNjI3YzcuMzIzIDAgMTMuMjYtNS45MzYgMTMuMjYtMTMuMjYgMC03LjMyLTUuOTM3LTEzLjI1Ny0xMy4yNi0xMy4yNTdDOS4wNTYgMy4xMiAzLjEyIDkuMDU2IDMuMTIgMTYuMzc4YzAgNy4zMjMgNS45MzYgMTMuMjYgMTMuMjU4IDEzLjI2elwiPjwvcGF0aD5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIFtjbGFzc109XCJjeCgncmVzZXQnKVwiXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICB0aXRsZT1cInt7cmVzZXRUaXRsZX19XCJcbiAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlUmVzZXQoJGV2ZW50KVwiXG4gICAgICAgICAgW2hpZGRlbl09XCIhc3RhdGUucXVlcnkgfHwgKHN0YXRlLnF1ZXJ5ICYmICFzdGF0ZS5xdWVyeS50cmltKCkpXCI+XG4gICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgW25nQ2xhc3NdPVwiY3goJ3Jlc2V0SWNvbicpXCJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgd2lkdGg9XCIyMFwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIyMFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04LjExNCAxMEwuOTQ0IDIuODMgMCAxLjg4NSAxLjg4NiAwbC45NDMuOTQzTDEwIDguMTEzbDcuMTctNy4xNy45NDQtLjk0M0wyMCAxLjg4NmwtLjk0My45NDMtNy4xNyA3LjE3IDcuMTcgNy4xNy45NDMuOTQ0TDE4LjExNCAyMGwtLjk0My0uOTQzLTcuMTctNy4xNy03LjE3IDcuMTctLjk0NC45NDNMMCAxOC4xMTRsLjk0My0uOTQzTDguMTEzIDEwelwiPjwvcGF0aD5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNTZWFyY2hCb3ggZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KCkgcHVibGljIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSBcIlNlYXJjaFwiO1xuICBASW5wdXQoKSBwdWJsaWMgc3VibWl0VGl0bGU6IHN0cmluZyA9IFwiU3VibWl0XCI7XG4gIEBJbnB1dCgpIHB1YmxpYyByZXNldFRpdGxlOiBzdHJpbmcgPSBcIlJlc2V0XCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZWFyY2hBc1lvdVR5cGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIC8vIE91dHB1dCBldmVudHNcbiAgLy8gZm9ybVxuICBAT3V0cHV0KCkgc3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgcmVzZXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gaW5wdXRcbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgYmx1ciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwdWJsaWMgc3RhdGUgPSB7XG4gICAgcXVlcnk6IFwiXCIsXG4gICAgcmVmaW5lOiBub29wXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIlNlYXJjaEJveFwiKTtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0U2VhcmNoQm94KTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDaGFuZ2UocXVlcnk6IHN0cmluZykge1xuICAgIHRoaXMuY2hhbmdlLmVtaXQocXVlcnkpO1xuXG4gICAgaWYgKHRoaXMuc2VhcmNoQXNZb3VUeXBlKSB7XG4gICAgICB0aGlzLnN0YXRlLnJlZmluZShxdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVN1Ym1pdChldmVudDogTW91c2VFdmVudCkge1xuICAgIC8vIHNlbmQgc3VibWl0IGV2ZW50IHRvIHBhcmVudCBjb21wb25lbnRcbiAgICB0aGlzLnN1Ym1pdC5lbWl0KGV2ZW50KTtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoIXRoaXMuc2VhcmNoQXNZb3VUeXBlKSB7XG4gICAgICB0aGlzLnN0YXRlLnJlZmluZSh0aGlzLnN0YXRlLnF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlUmVzZXQoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAvLyBzZW5kIHJlc2V0IGV2ZW50IHRvIHBhcmVudCBjb21wb25lbnRcbiAgICB0aGlzLnJlc2V0LmVtaXQoZXZlbnQpO1xuXG4gICAgLy8gcmVzZXQgc2VhcmNoXG4gICAgdGhpcy5zdGF0ZS5yZWZpbmUoXCJcIik7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNTZWFyY2hCb3ggfSBmcm9tIFwiLi9zZWFyY2gtYm94XCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nQWlzU2VhcmNoQm94XSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNTZWFyY2hCb3hdLFxuICBleHBvcnRzOiBbTmdBaXNTZWFyY2hCb3hdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1NlYXJjaEJveE1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdFNvcnRCeVNlbGVjdG9yIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYWlzLXNvcnQtYnlcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzc109XCJjeCgpXCI+XG4gICAgICA8c2VsZWN0XG4gICAgICAgIFtjbGFzc109XCJjeCgnc2VsZWN0JylcIlxuICAgICAgICAoY2hhbmdlKT1cInN0YXRlLnJlZmluZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICA+XG4gICAgICAgIDxvcHRpb25cbiAgICAgICAgICBbY2xhc3NdPVwiY3goJ29wdGlvbicpXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5vcHRpb25zXCJcbiAgICAgICAgICBbdmFsdWVdPVwiaXRlbS52YWx1ZVwiXG4gICAgICAgICAgW3NlbGVjdGVkXT1cIml0ZW0udmFsdWUgPT09IHN0YXRlLmN1cnJlbnRSZWZpbmVtZW50XCJcbiAgICAgICAgPlxuICAgICAgICAgIHt7aXRlbS5sYWJlbH19XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNTb3J0QnkgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KClcbiAgcHVibGljIGl0ZW1zOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gIH1bXTtcblxuICBwdWJsaWMgc3RhdGU6IHtcbiAgICBjdXJyZW50UmVmaW5lbWVudDogc3RyaW5nIHwgbnVsbDtcbiAgICBvcHRpb25zOiB7fVtdO1xuICAgIHJlZmluZTogRnVuY3Rpb247XG4gIH0gPSB7XG4gICAgY3VycmVudFJlZmluZW1lbnQ6IG51bGwsXG4gICAgb3B0aW9uczogW10sXG4gICAgcmVmaW5lOiBub29wXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcihcIlNvcnRCeVwiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0U29ydEJ5U2VsZWN0b3IsIHsgaW5kaWNlczogdGhpcy5pdGVtcyB9KTtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzU29ydEJ5IH0gZnJvbSBcIi4vc29ydC1ieVwiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ0Fpc1NvcnRCeV0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzU29ydEJ5XSxcbiAgZXhwb3J0czogW05nQWlzU29ydEJ5XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNTb3J0QnlNb2R1bGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IGNvbm5lY3RTdGFyUmF0aW5nIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBSYXRpbmdNZW51U3RhdGUgPSB7XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIGhhc05vUmVzdWx0czogYm9vbGVhbjtcbiAgaXRlbXM6IHt9W107XG4gIHJlZmluZTogRnVuY3Rpb247XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYWlzLXJhdGluZy1tZW51XCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDxzdmcgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCI+XG4gICAgICAgIDxzeW1ib2xcbiAgICAgICAgICBpZD1cImFpcy1TdGFyUmF0aW5nLXN0YXJTeW1ib2xcIlxuICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgICAgIHdpZHRoPVwiMjRcIlxuICAgICAgICAgIGhlaWdodD1cIjI0XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTIgLjI4OGwyLjgzMyA4LjcxOGg5LjE2N2wtNy40MTcgNS4zODkgMi44MzMgOC43MTgtNy40MTYtNS4zODgtNy40MTcgNS4zODggMi44MzMtOC43MTgtNy40MTYtNS4zODloOS4xNjd6XCIvPlxuICAgICAgICA8L3N5bWJvbD5cbiAgICAgICAgPHN5bWJvbFxuICAgICAgICAgIGlkPVwiYWlzLVN0YXJSYXRpbmctc3RhckVtcHR5U3ltYm9sXCJcbiAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgICB3aWR0aD1cIjI0XCJcbiAgICAgICAgICBoZWlnaHQ9XCIyNFwiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aCBkPVwiTTEyIDYuNzZsMS4zNzkgNC4yNDZoNC40NjVsLTMuNjEyIDIuNjI1IDEuMzc5IDQuMjQ2LTMuNjExLTIuNjI1LTMuNjEyIDIuNjI1IDEuMzc5LTQuMjQ2LTMuNjEyLTIuNjI1aDQuNDY1bDEuMzgtNC4yNDZ6bTAtNi40NzJsLTIuODMzIDguNzE4aC05LjE2N2w3LjQxNiA1LjM4OS0yLjgzMyA4LjcxOCA3LjQxNy01LjM4OCA3LjQxNiA1LjM4OC0yLjgzMy04LjcxOCA3LjQxNy01LjM4OWgtOS4xNjdsLTIuODMzLTguNzE4elwiLz5cbiAgICAgICAgPC9zeW1ib2w+XG4gICAgICA8L3N2Zz5cblxuICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgIDxsaVxuICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zXCJcbiAgICAgICAgICBbY2xhc3NdPVwiZ2V0SXRlbUNsYXNzKGl0ZW0pXCJcbiAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlQ2xpY2soJGV2ZW50LCBpdGVtLnZhbHVlKVwiXG4gICAgICAgID5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj1cInt7c3RhdGUuY3JlYXRlVVJMKGl0ZW0udmFsdWUpfX1cIlxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdsaW5rJylcIlxuICAgICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgaXRlbS52YWx1ZSlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IHN0YXIgb2YgaXRlbS5zdGFyc1wiXG4gICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImN4KCdzdGFySWNvbicpXCJcbiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHVzZVxuICAgICAgICAgICAgICAgICpuZ0lmPVwic3RhclwiXG4gICAgICAgICAgICAgICAgeGxpbms6aHJlZj1cIiNhaXMtU3RhclJhdGluZy1zdGFyU3ltYm9sXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8L3VzZT5cblxuICAgICAgICAgICAgICA8dXNlXG4gICAgICAgICAgICAgICAgKm5nSWY9XCIhc3RhclwiXG4gICAgICAgICAgICAgICAgeGxpbms6aHJlZj1cIiNhaXMtU3RhclJhdGluZy1zdGFyRW1wdHlTeW1ib2xcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDwvdXNlPlxuICAgICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPnt7YW5kVXBMYWJlbH19PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdjb3VudCcpXCI+e3tpdGVtLmNvdW50fX08L3NwYW4+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1JhdGluZ01lbnUgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgLy8gcmVuZGVyIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGFuZFVwTGFiZWw6IHN0cmluZyA9IFwiJiBVcFwiO1xuXG4gIC8vIGNvbm5lY3RvcnMgb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXg/OiBudW1iZXIgPSA1O1xuXG4gIHB1YmxpYyBzdGF0ZTogUmF0aW5nTWVudVN0YXRlID0ge1xuICAgIGNyZWF0ZVVSTDogbm9vcCxcbiAgICBoYXNOb1Jlc3VsdHM6IGZhbHNlLFxuICAgIGl0ZW1zOiBbXSxcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiUmF0aW5nTWVudVwiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0U3RhclJhdGluZywge1xuICAgICAgYXR0cmlidXRlTmFtZTogdGhpcy5hdHRyaWJ1dGUsXG4gICAgICBtYXg6IHRoaXMubWF4XG4gICAgfSk7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCwgdmFsdWU6IHN0cmluZykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnN0YXRlLnJlZmluZSh2YWx1ZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTmdBaXNSYXRpbmdNZW51IH0gZnJvbSBcIi4vcmF0aW5nLW1lbnVcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNSYXRpbmdNZW51XSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNSYXRpbmdNZW51XSxcbiAgZXhwb3J0czogW05nQWlzUmF0aW5nTWVudV0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUmF0aW5nTWVudU1vZHVsZSB7fVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdFN0YXRzIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuXG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtc3RhdHNcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzc109XCJjeCgpXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGU7IGNvbnRleHQ6IHRlbXBsYXRlQ29udGV4dFwiPlxuICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgIDxzcGFuICpuZ0lmPVwiIXRlbXBsYXRlXCIgW2NsYXNzXT1cImN4KCd0ZXh0JylcIj5cbiAgICAgICAge3tzdGF0ZS5uYkhpdHN9fSByZXN1bHRzIGZvdW5kIGluIHt7c3RhdGUucHJvY2Vzc2luZ1RpbWVNU319bXMuXG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNTdGF0cyBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKSBwdWJsaWMgdGVtcGxhdGU6IGFueTtcblxuICBwdWJsaWMgc3RhdGUgPSB7XG4gICAgaGl0UGVyUGFnZTogMCxcbiAgICBuYkhpdHM6IDAsXG4gICAgbmJQYWdlczogMCxcbiAgICBwYWdlOiAwLFxuICAgIHByb2Nlc3NpbmdUaW1lTVM6IDAsXG4gICAgcXVlcnk6IFwiXCJcbiAgfTtcblxuICBnZXQgdGVtcGxhdGVDb250ZXh0KCkge1xuICAgIHJldHVybiB7IHN0YXRlOiB0aGlzLnN0YXRlIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiU3RhdHNcIik7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdFN0YXRzKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc1N0YXRzIH0gZnJvbSBcIi4vc3RhdHNcIjtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmdBaXNTdGF0c10sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzU3RhdHNdLFxuICBleHBvcnRzOiBbTmdBaXNTdGF0c10sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzU3RhdHNNb2R1bGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IGNvbm5lY3RUb2dnbGUgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCB0eXBlIFRvZ2dsZVN0YXRlID0ge1xuICBjcmVhdGVVUkw6IEZ1bmN0aW9uO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xuICB2YWx1ZToge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgY291bnQ/OiBudW1iZXI7XG4gICAgaXNSZWZpbmVkPzogYm9vbGVhbjtcbiAgfTtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtdG9nZ2xlXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3goKVwiPlxuICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgIDxsaVxuICAgICAgICAgIFtjbGFzc109XCJjeCgnaXRlbScpXCJcbiAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlQ2xpY2soJGV2ZW50KVwiPlxuICAgICAgICAgIDxsYWJlbCBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2NoZWNrYm94JylcIlxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICB2YWx1ZT1cInt7c3RhdGUudmFsdWUubmFtZX19XCJcbiAgICAgICAgICAgICAgW2NoZWNrZWRdPVwic3RhdGUudmFsdWUuaXNSZWZpbmVkXCJcbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnbGFiZWxUZXh0JylcIj5cbiAgICAgICAgICAgICAge3tsYWJlbCB8fCBzdGF0ZS52YWx1ZS5uYW1lfX1cbiAgICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdjb3VudCcpXCI+e3tzdGF0ZS52YWx1ZS5jb3VudH19PC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzVG9nZ2xlIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIGNvbm5lY3RvciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGU6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB2YWx1ZXM6IHsgb24/OiBib29sZWFuOyBvZmY/OiBib29sZWFuIH0gPSB7IG9uOiB0cnVlLCBvZmY6IHVuZGVmaW5lZCB9O1xuXG4gIHB1YmxpYyBzdGF0ZTogVG9nZ2xlU3RhdGUgPSB7XG4gICAgY3JlYXRlVVJMOiBub29wLFxuICAgIHJlZmluZTogbm9vcCxcbiAgICB2YWx1ZToge31cbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiVG9nZ2xlUmVmaW5lbWVudFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0VG9nZ2xlLCB7XG4gICAgICBhdHRyaWJ1dGVOYW1lOiB0aGlzLmF0dHJpYnV0ZSxcbiAgICAgIGxhYmVsOiB0aGlzLmxhYmVsLFxuICAgICAgdmFsdWVzOiB0aGlzLnZhbHVlc1xuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuc3RhdGUucmVmaW5lKHRoaXMuc3RhdGUudmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzVG9nZ2xlIH0gZnJvbSBcIi4vdG9nZ2xlXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nQWlzVG9nZ2xlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNUb2dnbGVdLFxuICBleHBvcnRzOiBbTmdBaXNUb2dnbGVdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1RvZ2dsZU1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgSW5qZWN0LCBDb21wb25lbnQsIElucHV0LCBmb3J3YXJkUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY29ubmVjdFJhbmdlIH0gZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9yc1wiO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gXCIuLi9iYXNlLXdpZGdldFwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSBcIi4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaFwiO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJJbnB1dCwgbm9vcCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBOdW1lcmljUmFuZ2VTdGF0ZSA9IHtcbiAgcmFuZ2U6IHsgbWluPzogbnVtYmVyOyBtYXg/OiBudW1iZXIgfTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbiAgc3RhcnQ6IG51bWJlcltdO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFpcy1yYW5nZS1pbnB1dFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxmb3JtXG4gICAgICAgIFtjbGFzc109XCJjeCgnZm9ybScpXCJcbiAgICAgICAgKHN1Ym1pdCk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiXG4gICAgICAgIG5vdmFsaWRhdGVcbiAgICAgID5cbiAgICAgICAgPGxhYmVsIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPlxuICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY3VycmVuY3knKVwiPnt7Y3VycmVuY3l9fTwvc3Bhbj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnaW5wdXQnLCAnbWluJylcIlxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICBbbWluXT1cInN0YXRlLnJhbmdlLm1pblwiXG4gICAgICAgICAgICBbbWF4XT1cInN0YXRlLnJhbmdlLm1heFwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwic3RhdGUucmFuZ2UubWluXCJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJtaW5JbnB1dFZhbHVlXCJcbiAgICAgICAgICAgIFtzdGVwXT1cInN0ZXBcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoJGV2ZW50LCAnbWluJylcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdzZXBhcmF0b3InKVwiPnt7c2VwYXJhdG9yfX08L3NwYW4+XG5cbiAgICAgICAgPGxhYmVsIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPlxuICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY3VycmVuY3knKVwiPnt7Y3VycmVuY3l9fTwvc3Bhbj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnaW5wdXQnLCAnbWF4JylcIlxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICBbbWluXT1cInN0YXRlLnJhbmdlLm1pblwiXG4gICAgICAgICAgICBbbWF4XT1cInN0YXRlLnJhbmdlLm1heFwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwic3RhdGUucmFuZ2UubWF4XCJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJtYXhJbnB1dFZhbHVlXCJcbiAgICAgICAgICAgIFtzdGVwXT1cInN0ZXBcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoJGV2ZW50LCAnbWF4JylcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIFtjbGFzc109XCJjeCgnc3VibWl0JylcIlxuICAgICAgICAgIChjbGljayk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgICB7e3N1Ym1pdExhYmVsfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNSYW5nZUlucHV0IGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBjdXJyZW5jeTogc3RyaW5nID0gXCIkXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZXBhcmF0b3I6IHN0cmluZyA9IFwidG9cIjtcbiAgQElucHV0KCkgcHVibGljIHN1Ym1pdExhYmVsOiBzdHJpbmcgPSBcIkdvXCI7XG5cbiAgLy8gY29ubmVjdG9yIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGF0dHJpYnV0ZTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgbWluPzogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgbWF4PzogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgcHJlY2lzaW9uOiBudW1iZXIgfCBzdHJpbmcgPSAyO1xuXG4gIC8vIGlubmVyIHN0YXRlXG4gIHB1YmxpYyBtaW5JbnB1dFZhbHVlPzogbnVtYmVyIHwgc3RyaW5nID0gXCJcIjtcbiAgcHVibGljIG1heElucHV0VmFsdWU/OiBudW1iZXIgfCBzdHJpbmcgPSBcIlwiO1xuXG4gIGdldCBzdGVwKCkge1xuICAgIGNvbnN0IHByZWNpc2lvbiA9IHBhcnNlTnVtYmVySW5wdXQodGhpcy5wcmVjaXNpb24pIHx8IDI7XG4gICAgcmV0dXJuIDEgLyBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0ZTogTnVtZXJpY1JhbmdlU3RhdGUgPSB7XG4gICAgcmFuZ2U6IHsgbWluOiB1bmRlZmluZWQsIG1heDogdW5kZWZpbmVkIH0sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHN0YXJ0OiBbMCwgMF1cbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiUmFuZ2VJbnB1dFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0UmFuZ2UsIHtcbiAgICAgIGF0dHJpYnV0ZU5hbWU6IHRoaXMuYXR0cmlidXRlLFxuICAgICAgbWF4OiBwYXJzZU51bWJlcklucHV0KHRoaXMubWF4KSxcbiAgICAgIG1pbjogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLm1pbiksXG4gICAgICBwcmVjaXNpb246IHBhcnNlTnVtYmVySW5wdXQodGhpcy5wcmVjaXNpb24pXG4gICAgfSk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZShldmVudDogYW55LCB0eXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlTnVtYmVySW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblxuICAgIGlmICh0eXBlID09PSBcIm1pblwiKSB7XG4gICAgICB0aGlzLm1pbklucHV0VmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXhJbnB1dFZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVN1Ym1pdChldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUucmVmaW5lKFt0aGlzLm1pbklucHV0VmFsdWUsIHRoaXMubWF4SW5wdXRWYWx1ZV0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IE5nQWlzUmFuZ2VJbnB1dCB9IGZyb20gXCIuL3JhbmdlLWlucHV0XCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nQWlzUmFuZ2VJbnB1dF0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzUmFuZ2VJbnB1dF0sXG4gIGV4cG9ydHM6IFtOZ0Fpc1JhbmdlSW5wdXRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1JhbmdlSW5wdXRNb2R1bGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYWlzLXBhbmVsXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImFpcy1QYW5lbFwiPlxuICAgICAgPGRpdiAqbmdJZj1cImhlYWRlclwiIGNsYXNzPVwiYWlzLVBhbmVsLWhlYWRlclwiPlxuICAgICAgICB7e2hlYWRlcn19XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImFpcy1QYW5lbC1ib2R5XCI+XG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2ICpuZ0lmPVwiZm9vdGVyXCIgY2xhc3M9XCJhaXMtUGFuZWwtZm9vdGVyXCI+XG4gICAgICAgIHt7Zm9vdGVyfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUGFuZWwge1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyPzogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgZm9vdGVyPzogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc1BhbmVsIH0gZnJvbSBcIi4vcGFuZWxcIjtcbmV4cG9ydCB7IE5nQWlzUGFuZWwgfSBmcm9tIFwiLi9wYW5lbFwiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ0Fpc1BhbmVsXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTmdBaXNQYW5lbF0sXG4gIGV4cG9ydHM6IFtOZ0Fpc1BhbmVsXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNQYW5lbE1vZHVsZSB7fVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgSW5qZWN0LFxuICBmb3J3YXJkUmVmLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IGNvbm5lY3RDb25maWd1cmUgfSBmcm9tIFwiaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzXCI7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSBcIi4uL2Jhc2Utd2lkZ2V0XCI7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoXCI7XG5pbXBvcnQgeyBub29wIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhaXMtY29uZmlndXJlXCIsXG4gIHRlbXBsYXRlOiBcIlwiXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzQ29uZmlndXJlIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBJbnB1dCgpIHNlYXJjaFBhcmFtZXRlcnM6IHt9ID0ge307XG5cbiAgcHVibGljIHN0YXRlOiB7IHJlZmluZTogRnVuY3Rpb24gfSA9IHtcbiAgICByZWZpbmU6IG5vb3BcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKFwiQ29uZmlndXJlXCIpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RDb25maWd1cmUsIHtcbiAgICAgIHNlYXJjaFBhcmFtZXRlcnM6IHRoaXMuc2VhcmNoUGFyYW1ldGVyc1xuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICghY2hhbmdlcy5zZWFyY2hQYXJhbWV0ZXJzLmlzRmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVmaW5lKGNoYW5nZXMuc2VhcmNoUGFyYW1ldGVycy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBOZ0Fpc0NvbmZpZ3VyZSB9IGZyb20gXCIuL2NvbmZpZ3VyZVwiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ0Fpc0NvbmZpZ3VyZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW05nQWlzQ29uZmlndXJlXSxcbiAgZXhwb3J0czogW05nQWlzQ29uZmlndXJlXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNDb25maWd1cmVNb2R1bGUge31cbiIsImltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tIFwiYWxnb2xpYXNlYXJjaC9pbmRleFwiO1xuaW1wb3J0ICogYXMgZW5jb2RlUHJveHkgZnJvbSBcInF1ZXJ5c3RyaW5nLWVzMy9lbmNvZGVcIjtcblxuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gXCIuL3ZlcnNpb25cIjtcblxuLy8gQU9UICsgUm9sbHVwIHdvcmthcm91bmRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xMjY3I2lzc3VlY29tbWVudC0yOTYzOTU3MzRcblxuY29uc3QgYWxnb2xpYXNlYXJjaCA9IGFsZ29saWFzZWFyY2hQcm94eS5kZWZhdWx0IHx8IGFsZ29saWFzZWFyY2hQcm94eTtcbmNvbnN0IGVuY29kZSA9IGVuY29kZVByb3h5LmRlZmF1bHQgfHwgZW5jb2RlUHJveHk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTU1JBbGdvbGlhQ2xpZW50KHtcbiAgaHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIHRyYW5zZmVyU3RhdGUsXG4gIG1ha2VTdGF0ZUtleVxufSkge1xuICBjb25zb2xlLndhcm4oXG4gICAgXCJgY3JlYXRlU1NSQWxnb2xpYUNsaWVudGAgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY3JlYXRlU1NSU2VhcmNoQ2xpZW50YCB0byBiZSBwbHVnZ2VkIHRvIGBzZWFyY2hDbGllbnRgLlwiXG4gICk7XG5cbiAgcmV0dXJuIChfLCBhcHBJZCwgYXBpS2V5KSA9PlxuICAgIGNyZWF0ZVNTUlNlYXJjaENsaWVudCh7XG4gICAgICBhcHBJZCxcbiAgICAgIGFwaUtleSxcbiAgICAgIGh0dHBDbGllbnQsXG4gICAgICBIdHRwSGVhZGVycyxcbiAgICAgIHRyYW5zZmVyU3RhdGUsXG4gICAgICBtYWtlU3RhdGVLZXlcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNTUlNlYXJjaENsaWVudCh7XG4gIGFwcElkLFxuICBhcGlLZXksXG4gIGh0dHBDbGllbnQsXG4gIEh0dHBIZWFkZXJzLFxuICB0cmFuc2ZlclN0YXRlLFxuICBtYWtlU3RhdGVLZXlcbn0pIHtcbiAgY29uc3QgY2xpZW50ID0gYWxnb2xpYXNlYXJjaChhcHBJZCwgYXBpS2V5LCB7fSk7XG4gIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAke1ZFUlNJT059YCk7XG5cbiAgY2xpZW50Ll9yZXF1ZXN0ID0gKHJhd1VybCwgb3B0cykgPT4ge1xuICAgIGxldCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoXG4gICAgICBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgb3B0cy5tZXRob2QgPT09IFwiUE9TVFwiXG4gICAgICAgID8gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICAgICAgICA6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldChcImFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cbiAgICBjb25zdCB1cmwgPVxuICAgICAgcmF3VXJsICsgKHJhd1VybC5pbmNsdWRlcyhcIj9cIikgPyBcIiZcIiA6IFwiP1wiKSArIGVuY29kZShvcHRzLmhlYWRlcnMpO1xuXG4gICAgY29uc3QgdHJhbnNmZXJTdGF0ZUtleSA9IG1ha2VTdGF0ZUtleShgbmdhaXMoJHtvcHRzLmJvZHl9KWApO1xuXG4gICAgaWYgKHRyYW5zZmVyU3RhdGUuaGFzS2V5KHRyYW5zZmVyU3RhdGVLZXkpKSB7XG4gICAgICBjb25zdCByZXNwID0gSlNPTi5wYXJzZSh0cmFuc2ZlclN0YXRlLmdldCh0cmFuc2ZlclN0YXRlS2V5LCB7fSkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVyc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGh0dHBDbGllbnRcbiAgICAgICAgLnJlcXVlc3Qob3B0cy5tZXRob2QsIHVybCwge1xuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgYm9keTogb3B0cy5ib2R5LFxuICAgICAgICAgIG9ic2VydmU6IFwicmVzcG9uc2VcIlxuICAgICAgICB9KVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgIHJlc3AgPT4ge1xuICAgICAgICAgICAgdHJhbnNmZXJTdGF0ZS5zZXQodHJhbnNmZXJTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkocmVzcCkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNwID0+XG4gICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIGNsaWVudDtcbn1cbiIsImltcG9ydCB7IEFsZ29saWFTZWFyY2hIZWxwZXIgfSBmcm9tIFwiYWxnb2xpYXNlYXJjaC1oZWxwZXJcIjtcblxuLy8gVHJhbnNmb3JtcyB1cmwgcXVlcnkgdG8gU2VhcmNoUGFyYW1ldGVyc1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2VydmVyUmVxdWVzdChyZXE6IHsgdXJsOiBzdHJpbmcgfSB8IHZvaWQpIHtcbiAgaWYgKHJlcSAmJiByZXEudXJsICYmIHJlcS51cmwuaW5jbHVkZXMoXCI/XCIpKSB7XG4gICAgY29uc3QgcXVlcnkgPSByZXEudXJsLnNwbGl0KFwiP1wiKVsxXTtcbiAgICByZXR1cm4gQWxnb2xpYVNlYXJjaEhlbHBlci5nZXRDb25maWd1cmF0aW9uRnJvbVF1ZXJ5U3RyaW5nKHF1ZXJ5KTtcbiAgfVxuXG4gIHJldHVybiB7fTtcbn1cbiIsImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLy8gTW9kdWxlc1xuaW1wb3J0IHsgTmdBaXNCcmVhZGNydW1iTW9kdWxlIH0gZnJvbSBcIi4vYnJlYWRjcnVtYi9icmVhZGNydW1iLm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNDbGVhclJlZmluZW1lbnRzTW9kdWxlIH0gZnJvbSBcIi4vY2xlYXItcmVmaW5lbWVudHMvY2xlYXItcmVmaW5lbWVudHMubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc0N1cnJlbnRSZWZpbmVtZW50c01vZHVsZSB9IGZyb20gXCIuL2N1cnJlbnQtcmVmaW5lbWVudHMvY3VycmVudC1yZWZpbmVtZW50cy5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzSGllcmFyY2hpY2FsTWVudU1vZHVsZSB9IGZyb20gXCIuL2hpZXJhcmNoaWNhbC1tZW51L2hpZXJhcmNoaWNhbC1tZW51Lm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNIaXRzUGVyUGFnZU1vZHVsZSB9IGZyb20gXCIuL2hpdHMtcGVyLXBhZ2UvaGl0cy1wZXItcGFnZS5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzSGl0c01vZHVsZSB9IGZyb20gXCIuL2hpdHMvaGl0cy5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzSW5maW5pdGVIaXRzTW9kdWxlIH0gZnJvbSBcIi4vaW5maW5pdGUtaGl0cy9pbmZpbml0ZS1oaXRzLm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoTW9kdWxlIH0gZnJvbSBcIi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoLm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNNZW51TW9kdWxlIH0gZnJvbSBcIi4vbWVudS9tZW51Lm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNOdW1lcmljTWVudU1vZHVsZSB9IGZyb20gXCIuL251bWVyaWMtbWVudS9udW1lcmljLW1lbnUubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc051bWVyaWNTZWxlY3Rvck1vZHVsZSB9IGZyb20gXCIuL251bWVyaWMtc2VsZWN0b3IvbnVtZXJpYy1zZWxlY3Rvci5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzUGFnaW5hdGlvbk1vZHVsZSB9IGZyb20gXCIuL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzUmFuZ2VTbGlkZXJNb2R1bGUgfSBmcm9tIFwiLi9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyLm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNSZWZpbmVtZW50TGlzdE1vZHVsZSB9IGZyb20gXCIuL3JlZmluZW1lbnQtbGlzdC9yZWZpbmVtZW50LWxpc3QubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc1NlYXJjaEJveE1vZHVsZSB9IGZyb20gXCIuL3NlYXJjaC1ib3gvc2VhcmNoLWJveC5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzU29ydEJ5TW9kdWxlIH0gZnJvbSBcIi4vc29ydC1ieS9zb3J0LWJ5Lm1vZHVsZVwiO1xuaW1wb3J0IHsgTmdBaXNSYXRpbmdNZW51TW9kdWxlIH0gZnJvbSBcIi4vcmF0aW5nLW1lbnUvcmF0aW5nLW1lbnUubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc1N0YXRzTW9kdWxlIH0gZnJvbSBcIi4vc3RhdHMvc3RhdHMubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc1RvZ2dsZU1vZHVsZSB9IGZyb20gXCIuL3RvZ2dsZS90b2dnbGUubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc0hpZ2hsaWdodE1vZHVsZSB9IGZyb20gXCIuL2hpZ2hsaWdodC9oaWdobGlnaHQubW9kdWxlXCI7XG5pbXBvcnQgeyBOZ0Fpc1JhbmdlSW5wdXRNb2R1bGUgfSBmcm9tIFwiLi9yYW5nZS1pbnB1dC9yYW5nZS1pbnB1dC5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzUGFuZWxNb2R1bGUgfSBmcm9tIFwiLi9wYW5lbC9wYW5lbC5tb2R1bGVcIjtcbmltcG9ydCB7IE5nQWlzQ29uZmlndXJlTW9kdWxlIH0gZnJvbSBcIi4vY29uZmlndXJlL2NvbmZpZ3VyZS5tb2R1bGVcIjtcblxuLy8gQ3VzdG9tIFNTUiBhbGdvbGlhc2VhcmNoQ2xpZW50XG5pbXBvcnQge1xuICBjcmVhdGVTU1JBbGdvbGlhQ2xpZW50LFxuICBjcmVhdGVTU1JTZWFyY2hDbGllbnRcbn0gZnJvbSBcIi4vY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudFwiO1xuZXhwb3J0IHsgY3JlYXRlU1NSQWxnb2xpYUNsaWVudCwgY3JlYXRlU1NSU2VhcmNoQ2xpZW50IH07XG5cbmltcG9ydCB7IHBhcnNlU2VydmVyUmVxdWVzdCB9IGZyb20gXCIuL3BhcnNlLXNlcnZlci1yZXF1ZXN0XCI7XG5leHBvcnQgeyBwYXJzZVNlcnZlclJlcXVlc3QgfTtcblxuLy8gQ3VzdG9tIHdpZGdldCB3aXRoIEJhc2VXaWRnZXQgY2xhc3NcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tIFwiLi9iYXNlLXdpZGdldFwiO1xuZXhwb3J0IHsgQmFzZVdpZGdldCB9O1xuXG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tIFwiLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2hcIjtcbmV4cG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9O1xuXG5jb25zdCBOR0lTX01PRFVMRVMgPSBbXG4gIE5nQWlzSW5zdGFudFNlYXJjaE1vZHVsZSxcbiAgTmdBaXNIaXRzTW9kdWxlLFxuICBOZ0Fpc1NlYXJjaEJveE1vZHVsZSxcbiAgTmdBaXNDbGVhclJlZmluZW1lbnRzTW9kdWxlLFxuICBOZ0Fpc01lbnVNb2R1bGUsXG4gIE5nQWlzUGFnaW5hdGlvbk1vZHVsZSxcbiAgTmdBaXNSZWZpbmVtZW50TGlzdE1vZHVsZSxcbiAgTmdBaXNIaXRzUGVyUGFnZU1vZHVsZSxcbiAgTmdBaXNTb3J0QnlNb2R1bGUsXG4gIE5nQWlzTnVtZXJpY1NlbGVjdG9yTW9kdWxlLFxuICBOZ0Fpc051bWVyaWNNZW51TW9kdWxlLFxuICBOZ0Fpc1N0YXRzTW9kdWxlLFxuICBOZ0Fpc1RvZ2dsZU1vZHVsZSxcbiAgTmdBaXNJbmZpbml0ZUhpdHNNb2R1bGUsXG4gIE5nQWlzQ3VycmVudFJlZmluZW1lbnRzTW9kdWxlLFxuICBOZ0Fpc0hpZXJhcmNoaWNhbE1lbnVNb2R1bGUsXG4gIE5nQWlzUmF0aW5nTWVudU1vZHVsZSxcbiAgTmdBaXNSYW5nZVNsaWRlck1vZHVsZSxcbiAgTmdBaXNCcmVhZGNydW1iTW9kdWxlLFxuICBOZ0Fpc0hpZ2hsaWdodE1vZHVsZSxcbiAgTmdBaXNSYW5nZUlucHV0TW9kdWxlLFxuICBOZ0Fpc1BhbmVsTW9kdWxlLFxuICBOZ0Fpc0NvbmZpZ3VyZU1vZHVsZVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogTkdJU19NT0RVTEVTLFxuICBpbXBvcnRzOiBbTmdBaXNJbnN0YW50U2VhcmNoTW9kdWxlLmZvclJvb3QoKV1cbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNSb290TW9kdWxlIHt9XG5cbkBOZ01vZHVsZSh7IGltcG9ydHM6IE5HSVNfTU9EVUxFUywgZXhwb3J0czogTkdJU19NT0RVTEVTIH0pXG5leHBvcnQgY2xhc3MgTmdBaXNNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHsgbmdNb2R1bGU6IE5nQWlzUm9vdE1vZHVsZSB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiaXNQbGF0Zm9ybUJyb3dzZXIiLCJJbnB1dCIsImFsZ29saWFzZWFyY2hQcm94eS5kZWZhdWx0IiwiRXZlbnRFbWl0dGVyIiwiQ29tcG9uZW50IiwiSW5qZWN0IiwiUExBVEZPUk1fSUQiLCJPdXRwdXQiLCJ0c2xpYl8xLl9fZXh0ZW5kcyIsImNvbm5lY3RCcmVhZGNydW1iIiwiZm9yd2FyZFJlZiIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIiwiY29ubmVjdENsZWFyQWxsIiwiY29ubmVjdEN1cnJlbnRSZWZpbmVkVmFsdWVzIiwiY29ubmVjdEhpZXJhcmNoaWNhbE1lbnUiLCJjb25uZWN0SGl0c1BlclBhZ2UiLCJjb25uZWN0SGl0cyIsIkNvbnRlbnRDaGlsZCIsIlRlbXBsYXRlUmVmIiwiY29ubmVjdEluZmluaXRlSGl0cyIsIkh0dHBDbGllbnRNb2R1bGUiLCJjb25uZWN0TWVudSIsImNvbm5lY3ROdW1lcmljUmVmaW5lbWVudExpc3QiLCJjb25uZWN0TnVtZXJpY1NlbGVjdG9yIiwiY29ubmVjdFBhZ2luYXRpb24iLCJub1VpU2xpZGVyLmNyZWF0ZSIsImNvbm5lY3RSYW5nZSIsIlZpZXdDaGlsZCIsImNvbm5lY3RSZWZpbmVtZW50TGlzdCIsImNvbm5lY3RTZWFyY2hCb3giLCJjb25uZWN0U29ydEJ5U2VsZWN0b3IiLCJjb25uZWN0U3RhclJhdGluZyIsImNvbm5lY3RTdGF0cyIsImNvbm5lY3RUb2dnbGUiLCJjb25uZWN0Q29uZmlndXJlIiwiYWxnb2xpYXNlYXJjaCIsImFsZ29saWFzZWFyY2hQcm94eSIsImVuY29kZVByb3h5LmRlZmF1bHQiLCJBbGdvbGlhU2VhcmNoSGVscGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBOzs7Ozs7Ozs7Ozs7OztJQWNBO0lBRUEsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7U0FDcEMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztZQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7Z0JBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFL0UsdUJBQTBCLENBQUMsRUFBRSxDQUFDO1FBQzFCLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEIsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDdkMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0FBRUQsSUFBTyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLGtCQUFrQixDQUFDO1FBQ3RELEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFB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